



/*--------------------------------*/
/*BOOKMARK **snippet_helper.js****/
/*------------------------------*/
/*
#############################################################################
##
## 	file: .../util/snippet_helper.js
##
## 	JavaScript Library used on all Revize html pages
##
## 	Copyright (C) 2000-2014 Revize Software Systems All rights reserved.
##
##	--------------------------------------------
##	Source Code Changes Required for Doc-O-Matic
##	--------------------------------------------
##
##	Separate text with blank lines to force new link on output
##
##	Use ## to ignore lines in Doc-O-Matic (like these comments)
##
##	Bracket initialization code with the following:
##		//DOM-IGNORE-BEGIN
##		//DOM-IGNORE-END
##
##	Below are sample sections used:
##
##		For RZ.*** input arguments use one of the following section names
##
##			RZ Parameters:
##			RZ Input Parameters:
##
##		Internal: Called by
##		then start description with (Internal Function) ...
##
##		Future: under development (may be available in a later release)
##
##		Parameters:
##		  	None: (no input parameters)
##
##		Returns:
##		  	no value currently returned
##
## Add the following as preceeding comment for deprecated functions
## 		Same as RZcalleditlist (retained for backward compatibility)
*/
/****************************************************************************
##	First part of code below executes before the onload handler
****************************************************************************/

/*---------------------------------------------------------------------------
Define RZ object and variables if not already defined.
----------------------------------------------------------------------------*/
if (!window.EZ) EZ = {};
if (!EZ.isFeature) EZ.isFeature = function() {return false};

if (typeof RZ == 'undefined') var RZ = new Object();
if (typeof RZ.pagetype == 'undefined') RZ.pagetype = '';
if (typeof RZ.jsversion == 'undefined') RZ.jsversion = '1.2';

//********************************************************\\
RZ.snippet_helper_version = '02-20-2014';
//********************************************************//

//-----	Define additional RZ objects used by javascript library functions
if (typeof RZ.rte == 'undefined') RZ.rte = new Object();
if (typeof RZ.link == 'undefined') RZ.link = new Object();
if (typeof RZ.icons == 'undefined') RZ.icons = new Array();
if (typeof RZ.image == 'undefined') RZ.image = new Object();
if (typeof RZ.setvalues == 'undefined') RZ.setvalues = new Object();
if (typeof RZ.control == 'undefined') RZ.control = new Object();
if (typeof RZ.permits == 'undefined') RZ.permits = new Object();
if (typeof RZ.permits.modules == 'undefined') RZ.permits.modules = new Object();
if (typeof RZ.linkpagekey == 'undefined') RZ.linkpagekey = new Object();
if (typeof RZ.linkparentnew == 'undefined') RZ.linkparentnew = new Object();
if (typeof RZ.linkparentreset == 'undefined') RZ.linkparentreset = new Object();
if (typeof RZ.linktemplates == 'undefined') RZ.linktemplates = new Object();
if (typeof RZ.badlinks == 'undefined') RZ.badlinks = new Object();
if (typeof RZ.warning == 'undefined') RZ.warning = '';
if (typeof RZ.alert == 'undefined') RZ.alert = '';
RZ.linklevel = -1
RZ.nextseq = {linknames:{},modules:{}};	//can be removed after all channels published

// For very old backward compatibility (probably build 27-) on templates
RZ.webSpaceName = RZ.webspace;
var rzRecordID = RZ.editrecordid;
/*---------------------------------------------------------------------------
Call additional setup functions as soon as JavaScript is compiled.

TODO: all inline code should be moved to onload handler to eliminate race
	  conditions mostly using image mananger with Firefox as of 08-01-2009
	  Of course some code is needed to hide or display buttons so that login
	  would need reworking (probably display:none until page loads)

	  Consider RZeventadd(..) allowing this file in head for all scenaios
----------------------------------------------------------------------------*/
RZpageSetup();		// get page into
RZpermits();		// setup module permissions
RZpagepermission()	// determine page permission
RZactionReset();  	// clear all action button input arguments
RZpageLoaded();		// final page setup

/****************************************************************************
Remaining code defines javaScript library functions
****************************************************************************/
/*!
  * Bowser - a browser detector
  * https://github.com/ded/bowser
  * MIT License | (c) Dustin Diaz 2013
  * DCO 11-18-2015: function renamed by code not changed
  */
function RZbowser()
{
 /**
    * navigator.userAgent =>
    * Chrome:  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_7) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.57 Safari/534.24"
    * Opera:   "Opera/9.80 (Macintosh; Intel Mac OS X 10.6.7; U; en) Presto/2.7.62 Version/11.01"
    * Safari:  "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-us) AppleWebKit/533.21.1 (KHTML, like Gecko) Version/5.0.5 Safari/533.21.1"
    * IE:      "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C)"
    * IE>=11:  "Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; .NET4.0E; .NET4.0C; Media Center PC 6.0; rv:11.0) like Gecko"
    * Firefox: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0) Gecko/20100101 Firefox/4.0"
    * iPhone:  "Mozilla/5.0 (iPhone Simulator; U; CPU iPhone OS 4_3_2 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5"
    * iPad:    "Mozilla/5.0 (iPad; U; CPU OS 4_3_2 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5",
    * Android: "Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; T-Mobile G2 Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1"
    * Touchpad: "Mozilla/5.0 (hp-tabled;Linux;hpwOS/3.0.5; U; en-US)) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/234.83 Safari/534.6 TouchPad/1.0"
    * PhantomJS: "Mozilla/5.0 (Macintosh; Intel Mac OS X) AppleWebKit/534.34 (KHTML, like Gecko) PhantomJS/1.5.0 Safari/534.34"
    */

  var ua = navigator.userAgent
    , t = true
    , ie = /(msie|trident)/i.test(ua)
    , chrome = /chrome/i.test(ua)
    , phantom = /phantom/i.test(ua)
    , safari = /safari/i.test(ua) && !chrome && !phantom
    , iphone = /iphone/i.test(ua)
    , ipad = /ipad/i.test(ua)
    , touchpad = /touchpad/i.test(ua)
    , android = /android/i.test(ua)
    , opera = /opera/i.test(ua) || /opr/i.test(ua)
    , firefox = /firefox/i.test(ua)
    , gecko = /gecko\//i.test(ua)
    , seamonkey = /seamonkey\//i.test(ua)
    , webkitVersion = /version\/(\d+(\.\d+)?)/i
    , firefoxVersion = /firefox\/(\d+(\.\d+)?)/i
    , o

  function detect() {

    if (ie) return {
        msie: t
      , version: ua.match(/(msie |rv:)(\d+(\.\d+)?)/i)[2]
      }
    if (opera) return {
        opera: t
      , version: ua.match(webkitVersion) ? ua.match(webkitVersion)[1] : ua.match(/opr\/(\d+(\.\d+)?)/i)[1]
      }
    if (chrome) return {
        webkit: t
      , chrome: t
      , version: ua.match(/chrome\/(\d+(\.\d+)?)/i)[1]
      }
    if (phantom) return {
        webkit: t
      , phantom: t
      , version: ua.match(/phantomjs\/(\d+(\.\d+)+)/i)[1]
      }
    if (touchpad) return {
        webkit: t
      , touchpad: t
      , version : ua.match(/touchpad\/(\d+(\.\d+)?)/i)[1]
      }
    if (iphone || ipad) {
      o = {
        webkit: t
      , mobile: t
      , ios: t
      , iphone: iphone
      , ipad: ipad
      , version: (ua.match(/CPU iPhone OS ([0-9_]+) like Mac OS X/i)[1] || '1.1.1').replace('_', '.')
      }
      return o
    }
    if (android) return {
        webkit: t
      , android: t
      , mobile: t
      , version: (ua.match(/Linux; Android ([0-9.]+)/i) || ua.match(firefoxVersion))[1]
      }
    if (safari) return {
        webkit: t
      , safari: t
      , version: ua.match(webkitVersion)[1]
      }
    if (gecko) {
      o = {
        gecko: t
      , mozilla: t
      , version: ua.match(firefoxVersion)[1]
      }
      if (firefox) o.firefox = t
      return o
    }
    if (seamonkey) return {
        seamonkey: t
      , version: ua.match(/seamonkey\/(\d+(\.\d+)?)/i)[1]
      }
    return {}
  }

  var bowser = detect()

  // Graded Browser Support
  // http://developer.yahoo.com/yui/articles/gbs
  if ((bowser.msie && bowser.version >= 8) ||
      (bowser.chrome && bowser.version >= 10) ||
      (bowser.firefox && bowser.version >= 4.0) ||
      (bowser.safari && bowser.version >= 5) ||
      (bowser.opera && bowser.version >= 10.0)) {
    bowser.a = t;
  }

  else if ((bowser.msie && bowser.version < 8) ||
      (bowser.chrome && bowser.version < 10) ||
      (bowser.firefox && bowser.version < 4.0) ||
      (bowser.safari && bowser.version < 5) ||
      (bowser.opera && bowser.version < 10.0)) {
    bowser.c = t
  } else bowser.x = t

  return bowser
}
/*---------------------------------------------------------------------------
(Internal Function) Set page information and display in trace window
Internal: Called by onload handler
----------------------------------------------------------------------------*/
function RZpageSetup()
{
	//----- Set flags
	RZ.revizepreview = false

	//----- Set browser settings
	RZ.MSIE = false       // MS explorer mode
	RZ.isnavigator = true // Netscape
	RZ.pos = navigator.appVersion.indexOf('MSIE')
	if(RZ.pos != -1)
	{
		RZ.MSIE = true
		RZ.isnavigator = false
	}
	if (RZ.isnavigator)
	{
		RZ.language = navigator.language.substring(0,2)
		RZ.browserversion = parseFloat(navigator.appVersion)
	}
	else
	{
		RZ.language = navigator.userLanguage.substring(0,2)
		RZ.browserversion = parseFloat(navigator.appVersion.substring(RZ.pos+4))
	}
	if (navigator.appVersion.toLowerCase().indexOf('windows') != -1)
	{
		RZ.platform = 'win'
		RZ.newline = '\r\n'
	}
	else
	{
		RZ.newline = '\r'
		RZ.platform = 'mac'
	}
	//CREDIT: http://stackoverflow.com/questions/17447373/how-can-i-target-only-internet-explorer-11-with-javascript
	//		  probably copied incorrectly because true/false switched (see not below)
	//Following 2 lines depreciated
	RZ.isIE11 = !navigator.userAgent.match(/Trident.*rv 11\./)	//true for any browser
	RZ.isIEstandards = !navigator.userAgent.match(/Trident/)	//false for any IE ver; true if not any IE

	//DCO 01-23-2014 (CREDIT: tiny_mce.3.5.10/tiny_mcs)
	RZ.isIEstandardsMode = navigator.userAgent.match(/Trident/)	//array for any IE ver (i.e. true)

	//DCO 03-26-2014: latest attempt at code that will pass the test of time
	RZ.isIEw3c = !RZ.MSIE && navigator.userAgent.indexOf('Trident') != -1 && navigator.appCodeName.indexOf('Mozilla') != -1;

	//DJO 04-22-2016: add MS edge user agent detection
	RZ.isMSEdge = navigator.userAgent.match(/Edge/);

	//DCO 12-16-2015: refactor w/o calling RZbowser() -- gets js error on iPad
	var results, ua = navigator.userAgent
	RZ.isMSIE = /(msie|trident)/i.test(ua);
	RZ.isChrome = /chrome/i.test(ua);
	RZ.isFirefox = /firefox/i.test(ua);
	if (RZ.isMSIE)
	{				//nogo for IE5 returns 7 but who cares
		results = ua.match(/(msie |rv:)(\d+(\.\d+)?)/i);
		if (results && results[2])
			RZ.browserversion = results[2];
	}
	else if (RZ.isChrome)
	{
		results = ua.match(/chrome\/(\d+(\.\d+)?)/i)
		if (results && results[1])
			RZ.browserversion = results[1];
	}
	else if (RZ.isFirefox)
	{				//seems to work but not 100% sure
		results = ua.match(/firefox\/(\d+(\.\d+)?)/i)
		if (results && results[1])
			RZ.browserversion = results[1];
	}

	//----- Does browser support css (only old versions of navigator did not support)
	//		Assume true to avoid race condition with image manager on Firefox
	RZ.css = true;

	//----- Parent window if accessable (otherwise current window)
	//		TODO: susceptible to race condition with image_frame.jsp on Firefox
	RZ.parent = window;
	if (RZwinaccess(window.parent)) RZ.parent = window.parent;

	//----- Set page information, login webspace and display page properties
	RZ.page = RZgetfileinfo( location.href )

	/* disabled 08-15-2012; causing issues on some versions of chrome, trace not
	// enabled yet so it never prints AND superceeded by AdminPanel enhancements.
	RZ.message = 'RZ.webspace: ' + RZ.webspace + '\n'
			   + 'RZ.page.domain: ' + RZ.page.domain + '\n'
			   + 'RZ.page.pathname: ' + RZ.page.pathname + '\n'
			   + 'RZ.page.filename: ' + RZ.page.filename + '\n'
			   + 'RZ.page.extension: ' + RZ.page.extension + '\n'
			   + 'RZ.page.query: ' + RZ.page.query + '\n'
			   + 'RZ.page.hash: ' + RZ.page.hash + '\n'
			   + 'RZ.page.home: ' + RZ.page.home + '\n'
			   + 'window.name: ' + window.name + '\n'
			   + 'document.referrer: ' + document.referrer + '\n'
			   + 'opener: '
	if (RZwinaccess(RZ.parent.opener))
	{
		RZ.message += RZ.parent.opener.location.href + '\n'
		if (RZ.parent.opener.name != '')
			RZ.message += 'opener.name: ' + RZ.parent.opener.name
	}
	else if (typeof RZ.parent != 'undefined')
		RZ.message += 'no access to opener'
	else
		RZ.message += 'no opener'

	RZtrace("Initializing Page", RZ.message)
	*/

	RZ.login = RZgetCookieValue('RZlogin', RZ.page.domain);

	//----- Determine trace and debug mode
	RZ.trace = false;	//RZcheckHash('trace');		//issues on some versions of chrome...
	RZ.debug = false;	//RZcheckHash('debug');		//...superceeded by enhanced adminpanel

	if (RZ.webspace && RZ.webspace != 'REVIZE')
	{
		var trace = RZgetcookie('RZtrace',RZ.page.domain);
		if (trace == RZ.webspace)
			RZ.trace = true;
		else if (trace != RZ.webspace)
			RZsetcookie('RZtrace', (RZ.trace ? RZ.webspace : '') ,RZ.page.domain);

		var debug = RZgetcookie('RZdebug',RZ.page.domain);
		if (debug == RZ.webspace)
			RZ.debug = true;
		else if (debug != RZ.webspace)
			RZsetcookie('RZdebug', (RZ.debug ? RZ.webspace : '') ,RZ.page.domain);
	}

	//----- Determine if called from workflow preview
	if (RZwinaccess(parent))
	{
		if (parent.window.name=='revizepreview')
			RZ.revizepreview = true

		if ((parent.window.name != window.name			//must be in frames
		&& parent.window.name=='revizepreview') || window.name == 'workflowCompare1' || window.name == 'workflowCompare2' )
		{
			RZ.login = ''
			//RZ.revizepreview = true
			RZsetuphandler( 'onunload', 'return RZtemplateclose()' )
		}
	}
	else
	{
		// if standard permissions button and logged in as admin, treat as "Admin Panel"
		// TODO: can be removed once break keyup is solid
 		var permisisonButton = document.getElementById('RZadminwinButton')
		if (permisisonButton
		//&& RZisadmin()
		//&& navigator.userAgent.indexOf("Firefox") == -1
		&& !RZcheckoptions(RZ.webspacedesc,"noadminpanel")
		&& permisisonButton.src.search('images/edit/permissions\\.(jpg|gif)') != -1)
		{
			permisisonButton.href = 'javascript:RZadminwin()';
			permisisonButton.alt = 'Admin Panel';
		}
	}

	/**********************************************************/
	/*BOOKMARK RZpageSetup() DONE if AdminPanel not supported*/
	/********************************************************/
	if (RZ.revizepreview) return;
	if (location.pathname.search(/(calendar_app\/index.html|calendar_app\/?$)/) != -1) return;
	if (location.pathname.search(/.*\/calendar_app\/(editpages\/)?calendar_.*\.(html|jsp)/) != -1) return;

	if (location.pathname.indexOf('/revize/admincenter/') == 0) return;
	if (location.pathname.indexOf('/revize/debug/') == 0) return;
	if (location.pathname.indexOf('/revize/trace/') == 0) return;
	//if (location.pathname.indexOf('/revize/plugins/') == 0) return;
	if (location.pathname.indexOf('/revize/security/') == 0) return;
	if (location.pathname.indexOf('/revize/util/') == 0) return;

	//----- "Pause/Break" keyup event monitor
	RZadminwin.keypressCount = 0;
	RZadminwin.toggle = function(e,win)
	{
		RZadminwin.keypressCount++;
		/* use following to capture F1 key
		document.onhelp = function() {return(false);}
		window.onhelp = function() {return(false);}
		processF1()
		*/
		var keycode = (window.event) ? event.keyCode : e.keyCode;
		if (keycode == 19 || keycode == 3 || keycode == 135)
		{
			if (RZ.login && RZisadmin())
			{
				// Show more buttons if Ctrl key also pressed
							var more = (keycode == 3) ? 'more' : '';
				RZadminwin('',more);
			}
			else if (!RZ.login && RZadminwin.keypressCount >= 2)
			{
				if (!confirm('Login to Revize?')) return;
				var url = '/revize/security/index.jsp?webspace=' + RZ.webspace
						+ '&filename=/' + RZ.page.filenameFull;
				parent.location = url;
			}
			/*
			else
			{
				var msg = 'Must login as Administrator to open AdminPanel';
				if (RZadminwin.keypressCount >= 2) alert(msg);
				window.status = msg;
			}
			*/
		}
	}

	//----- After page loads, complete AdminPanel setup
	RZeventadd(window, "load", function()
	{
		// Open AdminPanel if needed
		if (RZisadmin()
		&& (location.hash.indexOf('adminpanel') == 1 || RZ.debug || RZ.trace))
			RZadminwin();

		// Activate "Pause/Break" keyup event monitor
		RZeventadd(document, "keyup", function(e) {RZadminwin.toggle(event,window)});
	});
}
/*---------------------------------------------------------------------------
----------------------------------------------------------------------------*/
function RZpublishcalendars()
{
	var fileinfo = RZgetfileinfo(location.href);
	var url = fileinfo.domain + location.pathname;
	var msg = 'Publishing Calendar Templates';
	document.getElementById(RZ.adminwinId).innerHTML = msg;
	location.href = '/revize/debug/PublishCalendarTemplates.jsp'
				  + '?webspace=' + RZ.webspace
				  + '&hash=' + 'RZadminwin'
				  + '&returnurl=' + escape(url);
}
/*---------------------------------------------------------------------------
Show or hide updated Admin Panel
if adminpanel.html not yet loaded, load into new absolute <div> as iframe;
otherwise if loaded, call adminpanel.html::RZadminwin(...)
----------------------------------------------------------------------------*/
function RZadminwin(msg,action)
{
	RZadminwin.width = 680;		//outer width (iframe & its container)
	//if (!RZisadmin()) return;

	// Open adminpanel.html iframe in absolute div at top of body
	// RZ.adminwin set to iframe window object once initialized
	if (!RZ.adminwin)
	{
		RZ.adminwin = 'setup';
		RZadminwin.action = action;			//Save for adminpanel.html

		var adminDiv = document.createElement('div');
		adminDiv.setAttribute('id','RZadminpanelContainer');
		adminDiv.style.position = "fixed";
		adminDiv.style.zIndex = "999999999999";
		adminDiv.style.left = '0px';
		adminDiv.style.top = '0px';
		adminDiv.style.margin = '0';
		adminDiv.style.padding = '0';
		adminDiv.style.boxShadow = '0 0 6px rgba(0,0,0,.175)';
		adminDiv.style.width = '100%';
		adminDiv.style.height = '80px';		//loading height
/* 		adminDiv.style.border = '0px none #FFF'; */
		adminDiv.style.font = '13px Arial,Helvetica,sans-serif';
		adminDiv.style.lineHeight = '21px';
/* 		adminDiv.style.color = 'black'; */
		adminDiv.style.margin = '0';
		adminDiv.style.padding = '20px 0';
		adminDiv.style.textAlign = 'center';
		adminDiv.style.backgroundColor = "#ffffff";
		adminDiv.innerHTML = '<br><b id="RZadminwin-loading">&nbsp;&nbsp;&nbsp;Loading Admin Panel...</b>';

		document.body.insertBefore(adminDiv,document.body.firstChild);
		RZadminwin.container = adminDiv;	//save for adminpanel.html

		var iframe = document.createElement('iframe');
		var	src = '/revize/admincenter/adminpanel.jsp'
		//if (RZ.webspace == 'RostraverTownship')
		//	src = '/revize/admincenter/adminpanel.work.jsp'
		iframe.setAttribute('id','RZadminpanel');
		iframe.setAttribute('src',src);
		iframe.setAttribute('width','100%');
		iframe.setAttribute('height','20');			//loading height
		iframe.setAttribute('scrolling','no');
		iframe.setAttribute('frameborder','0');
		iframe.setAttribute('marginwidth','0');
		iframe.setAttribute('marginheight','0');
		iframe.style.margin = '0';
		iframe.style.padding = '0';
		iframe.style.border = '0px none';
		iframe.style.visibility = "hidden"; 		//hide IE inset borders while loading
		adminDiv.replaceChild(iframe, adminDiv.firstChild);
		return false;
	}

	// Ignore calls after loading starts until it completes
	else if (RZ.adminwin == 'setup')
		return false;

	return RZ.adminwin.RZadminwin('',action);
}
/*---------------------------------------------------------------------------
Add a new style rule or cssRule based on browser

var rules = RZaddrules('.someClass, {color:'black', zIndex:99});
----------------------------------------------------------------------------*/
function RZaddrules(stylesheet,selector,selectorRules)
{
	var cssStyle, rule, rules = '';
	for (rule in selectorRules)
	{
		if (!selectorRules.hasOwnProperty(rule)) continue;
		cssStyle = RZcssfromstyle(rule)
		if (document.all)
			stylesheet.addRule(selector, cssStyle + ':' + selectorRules[rule]);
		else
			rules +=  cssStyle + ':' + selectorRules[rule] + ';';
	}
	if (!document.all)
		stylesheet.insertRule(selector + '{' + rules + '}', 0);
}
/*
* converts a css style name FROM a camelCase style property
*/
function RZcssfromstyle(style)
{
	return style.replace(/([A-Z])/g,'-$1').toLowerCase();
}
/*
* converts a css style name TO a camelCase style property
*/
function RZcsstostyle(style)
{
	var results;
	while (results = style.match(/(-)(\w)/))
	{
		style = style.substring(0,results.index)
			  + results[2].toUpperCase()
			  + style.substring(results.index+results[0].length)
	}
	return style;
}
/*-----------------------------------------------------------------------------------
Returns specified element current specified style

Paramenter:
	el 			html element or element id
	style		css style e.g. display, backgroundColor


02-20-2014 DCO
	Updated code based on: http://help.dottoro.com/ljscsoax.php

	Prior cos document.defaultView.getComputedStyle(el,'') returning null
	for chrome and FF (not sure of original reference used as base)

	Updated code much more bullet-proff and accomodates IE11+)
-----------------------------------------------------------------------------------*/
function RZelementCurrentStyleValue(el,style)
{
	var value = '';

	/* 02-20-2014 DCO: disabled see notes above
	if (document.all)
		value = el.currentStyle[style];
	else
		value =  document.defaultView.getComputedStyle(el,'').getPropertyValue(style);
	*/

	// 02-20-2014 DCO start \\
	var currentStyle = null;
	if (typeof(el) == 'string')
		el = document.getDocumentById(el);

	if (typeof(el) == 'object')
	{
		if (window.getComputedStyle)	//chrome & FF work (others TBD per Ray)
			currentStyle = window.getComputedStyle;

		else if (el.currentStyle)		//pre IE11
			currentStyle = el.currentStyle

		if (currentStyle && currentStyle[style])
			value = currentStyle[style];
	}
	// 02-20-2014 DCO end //

	return value;
}
/*-----------------------------------------------------------------------------------
Return array of all values found for specified CSS selector (e.g. .left, #top)
Array is filled as selector are discovered; CSS priority is not considered.
Upgraded to return object containing array of all values for each specified selector.
-----------------------------------------------------------------------------------*/
function RZselectorValues(selectors)
{
	// if single selector specified as string, convert to array
	if (typeof selectors == 'string')
		selectors = selectors.split(',');

    var values = {};
	var classes = document.styleSheets[0].rules || document.styleSheets[0].cssRules
    for (var x=0;x<classes.length;x++)
	{
        var cssSelector = classes[x].selectorText;
		if (RZcheckoptions(selectors,cssSelector))
		{
            var value = (classes[x].cssText)
					  ? (classes[x].cssText)
					  : (classes[x].style.cssText);
			if (!values[cssSelector])
				values[cssSelector] = [];
			values[cssSelector].push(value);
        }
    }
	return values;
}
/*---------------------------------------------------------------------------
* Set style to value for one or more rules
* IE can only define single selector so rules is an array
* (for Firefox it is a single element array)
----------------------------------------------------------------------------*/
function changeStyle(rules,style,value)
{
	for (var i=0;i<rules.length;i++)
		rules[i]['style'][style] = value;
}
/*---------------------------------------------------------------------------
(Internal Function) Disables links on workflow preview page.
Internal: Called when trying to leave workflow preview page
or onclick for Firefox (TODO: allow html popup by checking the event target).
----------------------------------------------------------------------------*/
function RZtemplateclose(value)
{
	if (!RZ.revizepreview) return
	var msg = 'Links disabled during preview of content changes'
	alert(msg)
	location.href = location.href	//cancels hyperlink
	return false
}
/*---------------------------------------------------------------------------
(Internal Function) Look for specific hash (e.g. debug or trace) on current
window, opener, referrer hash and associated cookie

Internal: Diagnostic Support
----------------------------------------------------------------------------*/
function RZcheckHash(value)
{
	var key = false
	if (!RZwinaccess(top))
		return key;

	//TODO: below has issues on some versions of chrome
	//		(window.top.location.hash may be undefined)
	if(window.top.location.hash.indexOf('#'+value) != -1
	|| location.hash.indexOf('#'+value) != -1
	|| RZ.parent.location.hash.indexOf('#'+value) != -1
	|| RZgetCookieValue('RZ'+value) == 'ON' )
	{
		key = true
	}
	else if (RZwinaccess(RZ.parent.opener))
	{
		if( RZ.parent.opener.location.hash.indexOf('#'+value) != -1)
			key = true
		else if (typeof RZ.parent.opener.top != 'undefined'
		&& RZ.parent.opener.top.location.hash.indexOf('#'+value) != -1)
			key = true
	}
	else if (typeof document.referrer != 'undefined')
	{
		if (document.referrer.indexOf('#'+value) != -1) key = true
	}
	return key
}
/*---------------------------------------------------------------------------
(Internal Function) Sets final variables based on page type
Internal: Called after page loads and all initialzation is done.
----------------------------------------------------------------------------*/
function RZpageLoaded()
{
	window.focus()		//insure window gets focus() after loaded
	if (RZ.pagetype == 'template')
	{
		//----- Display trace information
		var recordid;
		if (typeof RZ.record != 'undefined')
			recordid = RZ.record.id
		else
			recordid = RZ.editrecordid

		RZ.string = 'RZ.webspace: ' + RZ.webspace + '\n'
				  + "RZ.editrecordid: (" + recordid + ")\n"
				  + "Clearing Return URLs ..."
		RZtrace( "Published Page Now Loaded", RZ.string )

		//----- Update cookies
		if (RZgetCookieValue('RZeditFormReturnUrl') != '')
			RZsetCookieValue('RZeditFormReturnUrl','')

		/*	deactivated when list allowed as popup
			(better supports template as list page)
		if (RZgetCookieValue('RZeditListReturnUrl') != '')
			RZsetCookieValue('RZeditListReturnUrl','')
		*/

		if (location.hash == '#logout') return

		//----- Save webSpace name in cookie unless logout call
		RZsetCookieValue('RZwebspace',RZ.webspace + "#" + document.location)

		if (RZlogin())
		{
			//----- Display page username and role in status bar
			if (RZ.pagetype == 'template')
				window.status = 'Logged in User is ' + RZ.username
							  + ' (roles: ' + RZ.roles + ')'

			//----- Call onload handler if permission warning enabled and logged in
			if (RZcheckoptions(RZ.permissions_options,"warnings"))
				RZsetuphandler( 'onload', 'RZshowIcons()' )

			//----- Display critical and warnings for templates
			if (RZ.alert != '') RZalert( RZ.alert );
			RZwarning();
		}

		//----- Create login button for page permission testing
		if (RZcheckoptions(RZ.permissions_options,"warnings")) document.write(
			'<div id="RevizeLogin" style="visibility:visible; position:absolute; z-index:1; top:30">',
			/* TODO: autoclick
			'  <a href="javascript:RZautoClick();"><img border="0"',
			'   src="/revize/images/warning-auto.gif" alt="Auto Click"></a>',
			'  <br>',
			*/
			'  <a href="/revize/security/"><img border="0"',
			'   src="/revize/images/RevizeRzSmall.gif" alt="Revize Login"></a>',
			'</div>',
			'')
	}

	//----- TODO: document why RZ.loaded not set true for edit forms
	//		(perhaps we did not want to use onload handler)
	if (RZ.pagetype != 'editform')
	{
		RZsetuphandler( 'onload', 'RZprocessHash()' )
	}
}
/*---------------------------------------------------------------------------
(Internal Function) position page on hash set by save
Internal: Runs after page is loaded
----------------------------------------------------------------------------*/
function RZprocessHash()
{
	if(location.hash.indexOf('_rz') != -1
	&& location.hash.indexOf('#trace') == -1
	&& location.hash.indexOf('#debug') == -1)
		location.hash = location.hash.substring(1);
	RZ.loaded=true;
}
/*---------------------------------------------------------------------------
(Internal Function) Displays stack trace(s) from rz.setup()
Internal: NOT YET USED
----------------------------------------------------------------------------*/
function RZprintStackTrace(msg)
{
	RZ.tracewin = RZpopupUrl('RevizeTrace');
	var msg = '<pre>' + msg + '</pre>'
	RZ.tracewin.document.write(msg);
}
/*---------------------------------------------------------------------------
(Internal Function) Repair bad page permission link
Internal: Recovery Support
Future: under development (currently placeholder with no functionality)
----------------------------------------------------------------------------*/
function RZbadlink(module,recordid,url)
{
}
/*---------------------------------------------------------------------------
(Internal Function) Displays page permissions warning on templates. NOT COMPLETED
Called as onload handler only

Internal: Called by onload handler permission warning are enabled and user is
currently logged in.

Future: under development (may be available in a later release)

Parameters:
  	None - no input parameters

Returns:
  	There is currently no value returned
----------------------------------------------------------------------------*/
function RZautoClick()
{
	var msg = 'Automatically click on every bad link to define parents.     '
	if (!confirm(msg)) return

return
	RZ.msg = ''
	var tag = 'A'
	if (tag == '')
		RZnodeProperties( 0, dw.getDocumentDOM("document").documentElement )
	else
	{
		var allTags = document.getElementsByTagName(tag);
		for (var i=0; i<allTags.length; i++)
		{
			RZ.msg += tag.toLowerCase() + '[' + i + ']:\n'
			if (allTags[i].hasChildNodes())
				for (var j=0; j<allTags[i].childNodes.length; j++)
					RZnodeProperties( 1, allTags[i].childNodes[j] )
		}
	}

	RZ.msg = RZ.msg.replace( /\t/g, '     ' )
	var pattern = /(.*\n){0,40}/g
	var matchArray = RZ.msg.match(pattern)
	alert('Written to ' + RZ.constant.tempDOM + '\n\n'
	     +'Up to 40 lines below:' + '\n' + matchArray[0])

}
/*---------------------------------------------------------------------------------------------
Parse a DOM node
Future: under development (may be available in a later release)
---------------------------------------------------------------------------------------------*/
function RZnodeProperties( level, childObj )
{
	var i,text
	var tab = ''
	var Node = new Object()
	Node.TEXT_NODE = 2
	Node.ELEMENT_NODE = 1
	Node.COMMENT_NODE = 1


	for (i=0; i<level; i++) tab += '\t'

	if ( childObj.nodeType == Node.TEXT_NODE)
	{
		RZ.msg += tab + 'TEXT NODE:\n'
		text = childObj.data
		text = text.replace(/\r/g,'\\r')
		text = text.replace(/\n/g,'\\n')
		RZ.msg += tab + '\t' + text + '\n'
	}
	else if (childObj.nodeType == Node.ELEMENT_NODE)
	{
		var name = ''
		if ( typeof childObj.getAttribute('name') != 'undefined')
			name = ' ' + childObj.getAttribute('name')
		RZ.msg += tab + '<' + childObj.tagName + '>'+name+':\n'
	}
	else if (childObj.nodeType == Node.COMMENT_NODE)
	{
		RZ.msg += tab + 'COMMENT NODE:\n'
		text = childObj.data
		text = text.replace(/\n/g, '\n\t' + tab )
		RZ.msg += tab + '\t' + text + '\n'
	}
	else
	{
		RZ.msg += tab + 'UKNOWN nodeType=' + childObj.nodeType + ':\n'
		RZ.msg += tab + 'Properties:\n'
		for (i in childObj)
			RZ.msg += tab + '-->' + i + '<--:' + childObj[i]
	}

	//----- Chase child nodes
	if (childObj.hasChildNodes())
		for (i=0; i<childObj.childNodes.length; i++)
			RZnodeProperties( level+1, childObj.childNodes[i] )
}
/*---------------------------------------------------------------------------
(Internal Function) Displays page permissions warning on templates.
Internal: Called by onload handler if warning are active and a user logged in
----------------------------------------------------------------------------*/
function RZshowIcons()
{
	//----- Show top left icon
	var icon = document.getElementById('RevizePageMessage')
	if (icon != null)
		icon.style.visibility = "visible";

	//----- Show frown icon if button must specify a template
	for (var i=0; i<RZ.icons.length; i++)
	{
		var module = RZ.icons[i]
		if(typeof RZ.linktemplates[module] == 'undefined'
		|| RZ.linktemplates[module] == '')
		{
			var icon = document.getElementById('RevizeButtonWarning' + i)
			if (icon != null)
				icon.style.visibility = "visible";
		}
	}
}

/*---------------------------------------------------------------------------
Get File Info for specifiec URL or file.

Description:
	Parses either a url or file and breaks apart into individual fully
	qualified components.  By default the input pathname is assumed to be a
	file if the	syntax is ambigious.  To intepret first component as domain
	as browsers do on the address line specify domain as an option.

	If port 80 is specified on input, it is omitted like IE location functions
	TODO: have not verified if Netscape location omits port 80

Parameters:
	pathname-		fully or partially qualified url or path/filename
	options-		=domain treat everything up to first / as domain
					(if protocol not specified e.g. http://)

Return Value List:
	page.domain     = 'http://localhost:8080'		//no trailing slash
	page.pathname   = '/revize/demositeIII'	//with leading slash but not trailing
	page.filename   = 'contacts'
	page.extension  = 'html'
	page.query      = '?webSpace=demositeII&recordid=1'	//contains leading ?
	page.hash       = 'trace'						//leading # omitted
	page.home       = 'http://localhost:8080//revize/demositeIII/index.html'

Notes:
	Regression test at .../revize/util/snippet_helper_getfileinfo_test

	TODO: some scenarios noted as in above test do not currently work properly.
	Many scenarios of domains ARE ONLY intrepreted correctly if domain option
	is specified and the input pathname ends with a slash when no filename.
	(remember page.href however is never returned with ending slash by design)
	See: .../revize/util/snippet_helper_getfileinfo_test for details.
----------------------------------------------------------------------------*/
/* Same as RZgetfileinfo (retained for backward compatibility) */
function RZgetFileInfo(pathname, options)
{return RZgetfileinfo(pathname, options)}
function RZgetfileinfo(pathname, options)
{
	var pos,idx,results
	var href=''
	var domain=''
	var filename=''
	var sep=''
	var extension=''
	var query=''
	var hash=''
	var home=''
	if (typeof options == 'undefined')
		options = '';
	else
		options += ','
	if (!pathname) pathname = '';
	if (pathname == '#') pathname = location.href
	if (pathname != '')
	{
		pathname = pathname.split('\\').join('/');

		//----- Determine domain
		domain = ''
		pos = pathname.indexOf(':')				//check for first colon :

		//----- If domain option & protocol is missing, prepend to pathname
		if (options.indexOf('domain,') != -1
		&& RZsubstring(pathname,pos+1,pos+3) != '//')
		{
			if (location.protocol != '')
				pathname = location.protocol + '//' + pathname
			else
				pathname = 'http://' + pathname
			pos = pathname.indexOf(':')			//reset colon pos
		}

		//----- If protocol present, e.g. //http:// https:// ftp://
		if (RZsubstring(pathname,pos+1,pos+3) == '//')
		{
			pos += 3
			if (pathname.indexOf('/',pos) != -1)	//if first slash following //:
				pos = pathname.indexOf('/',pos)		//domain goes up to slash
			else if (RZsubstring(pathname,0,4).toLowerCase() != 'file')
				pos = pathname.length				//assume domain is all of pathname
		}
		else if (pos == -1)		//not file type (e.g. C:) so use current page domain
		{
			if (options.indexOf('domain,') != -1
			|| RZsubstring(pathname,0,4).toLowerCase() == 'www.')
			{
				pos = pathname.indexOf('/')
				if (pos >= 0)
				{
					domain = pathname.substring(0,pos)
					pathname = pathname.substring(pos+1)
				}else
				{
					domain = pathname
					pathname = ''
				}
			}
			else
			{
				domain = document.location.host			//blank if file
				if (document.location.protocol != '')	//if not file
				{
					domain = document.location.protocol + '//' + domain
					pos = domain.length
					if (RZsubstring(pathname,0,1) != '/')
						pathname = '/' + pathname
					pathname = domain + pathname
				}
			}
		}

		//-----  if : found, file format of C: (split into domain and pathname)
		if (pos != -1)
		{
			if (pathname.substring(pos,pos+1) == ':')
				domain = pathname.substring(0,pos+1)
			else
				domain = pathname.substring(0,pos)

			pathname = pathname.substring(pos)
			if (pathname.substring(0,1) == ':')
				pathname = pathname.substring(1)
		}

		//----- Strip port 80 if present in domain
		pos = (domain+'/').indexOf(':80/')
		if (pos != -1)
			domain = domain.substring(0,pos);

		//----- Parse pathname and filename
		//		DCO 03-09-2012 previously simple lastIndexOf('/') incorecctly
		//		               found slash past hash "#" or query "?"
		//		e.g. /calendar_app/index.html#Master,03/09/2012
		//			 (both results[0] & results[1] have pathname
		results = pathname.match(/^([^#?]*\/)[^#?]*?/m);

		if (results)	//found slash PRECEEDING query "?" or hash "#"

		{	//results.lastIndex NA on IE9
			pos = results.index + results[1].length;
			filename = pathname.substr(pos);
			pathname = pathname.substr(0,pos-1);
			if (pathname.substr(0,1) != '/')
				pathname = '/' + pathname;
		}
		else			//safe to use lastIndexOf() when no query or hash
		{
			filename = pathname;
			pathname = '';
		}

		//------ Parse search (query)
		pos = filename.indexOf('?')
		if (pos == -1)
			query = ''
		else
		{
			query = filename.substring(pos)
			filename = filename.substring(0,pos)
		}

		//------ Parse hash
		pos = filename.indexOf('#')
		if (pos != -1)
		{
			hash = filename.substring(pos+1)
			filename = filename.substring(0,pos)
		}

		//------ Parse filename extension
		pos = filename.lastIndexOf('.')
		if (pos == -1)
			extension = ''
		else
		{
			extension = filename.substring(pos+1)
			filename = filename.substring(0,pos)
		}
		if (filename == '')		// use index.html when filename is blank
		{
			filename = ''
			extension = ''
		}

		//----- home page (questionable value)
		home = domain + pathname
		if (RZright(home,1) != '/' && pathname != '') home += '/'
	}

	//----- Return all the components
	var page = new Object();
	page.domain = domain;
	page.pathname = pathname;
	page.filename = filename;
	page.extension = extension;
	page.extention = extension;

	page.filenameFull = page.filename;
	if (page.extension)
		page.filenameFull += '.' + extension;
	page.pathfilename = page.filenameFull;
	if (page.pathname)
		page.pathfilename = page.pathname + '/' + page.pathfilename;

	page.query = query;
	page.search = query;
	page.hash = hash;
	page.home = home;

	page.sep = ((extension != '') ? '.' : '')
	page.href = domain
	page.href += pathname
	page.href += ((filename != ''&& RZright(page.href,1) != '/') ? '/' : '')
	page.href += filename + page.sep + extension + query
	if (hash != '') page.href += '#' + hash

	return page
}
/*---------------------------------------------------------------------------
----------------------------------------------------------------------------*/
function RZbuildurl(fileInfo)
{
	var location = fileInfo.domain + fileInfo.pathname
	if (RZright(location,1) != '/') location += '/'
	location += fileInfo.filename + fileInfo.sep + fileInfo.extension
	          + fileInfo.query
	if (fileInfo.hash != '') location += '#' + fileInfo.hash
	return location
}
/*---------------------------------------------------------------------------
Return Browser Version - report page design flaw if unknown

Parameters:
	None- (no input parameters)

Returns: Browser version
----------------------------------------------------------------------------*/
function RZbrowserversion()
{
	var version = 0
	if (RZ.isnavigator)
	{
		version = parseFloat( navigator.appVersion )
	}else
	{
		var pos = navigator.appVersion.indexOf("MSIE")
		version = parseFloat(navigator.appVersion.substring(pos+4))
	}
	if (isNaN(version) || version == 0)
		RZalert( "Unable to determine Browser version\n"
			 + "navigator.appVersion: " + navigator.appVersion )

	return version
}
/*---------------------------------------------------------------------------
Resize window; if width or hieght not specified use available size

Parameters:
	width -		specifies requested window width (text or number)
	hieght -	specifies requested window hieght (text or number)
	justify -	Optional string; right or left to justify window respectively
	win -		Optional window object to specify window if not window/frame
				that includes the snippet_helper.js library file.
----------------------------------------------------------------------------*/
function RZresize(width,height,justify,win)
{
	 return;
	 if (!width) width = screen.availWidth;
	 if (!height) height = screen.availHeight;
	 if (!justify) justify = 'center'
	 if (!win) win = window
	 if (win.dialogArguments) return; //DCO 02-04-2014

	 //DCO 08-03-2009
	 //if (RZ.isnavigator) height -= 125  //TODO: for linkmanager ???

	 var x = (screen.availWidth - width) / 2
	 var y = (screen.availHeight - height) / 2
	 if (justify == 'right')
	  x = screen.availWidth - width - 10
	 else if (justify == 'left')
	  x = 0
	 if (x < 0) x = 0
	 if (y < 0) y = 0

	 win.resizeTo(width,height);
     win.moveTo( x,y )

}
/*-----------------------------------------------------------------------------------
Return window and browser screen sizes and offset to locate block of width & height.

NOTE: browser width & height returned are limited to screen width/height

---------
Arguments:
---------
width		(optional) width of window or layer to open; default is full size
height		(optional) height of window or layer to open; default is full size
options		list of option=value or option separated by commas from list below:
				norounding	returned width/height & offsets rounded to nearest integer
				browser		returned width/height & offsets relative to browser window
							instead of screen
-----------------------------------------------------------------------------------*/
function RZscreensizes(width,height,options)
{
	if (typeof width == 'undefined') width = 0;
	if (typeof height == 'undefined') height = 0;

	var base, offsetX, offsetY;
	var sizes = {
		width:width, height:height,
		screenWidth:0, screenHeight:0,
		browserWidth:0, browserHeight:0,
		offsetWidth:0, offsetHeight:0
	};

	//----- Is offset limited and relative to browser or screen screen size
	var base = 'screen';
	if (RZcheckoptions(options,'browser'))
		base = 'browser';

	//----- Window sizes...
	sizes.screenWidth=screen.width;
	sizes.screenHeight = screen.height;
	offsetY = 0;
	offsetX = 0;

	//----- Browser sizes...
	if(!window.innerWidth)	//IE...
	{
		if (!(document.documentElement.clientWidth == 0))
		{					//...strict mode
			sizes.browserWidth = document.documentElement.clientWidth;
			sizes.browserHeight = document.documentElement.clientHeight;
			if (base == 'browser')
			{
				offsetY = document.documentElement.scrollTop;
				offsetX = document.documentElement.scrollLeft;
			}
		}
		else
		{					//...quirks mode
			sizes.browserWidth = document.body.clientWidth;
			sizes.browserHeight = document.body.clientHeight;
			if (base == 'browser')
			{
				offsetY = document.body.scrollTop;
				offsetX = document.body.scrollLeft;
			}
		}
	}
	else					//WC3...
	{
		sizes.browserWidth = window.innerWidth;
		sizes.browserHeight = window.innerHeight;
		if (base == 'browser')
		{
			offsetX = window.pageXOffset;
			offsetY = window.pageYOffset;
		}
	}

	//----- If browser sizes exceed screen sizes, adjust
	sizes.browserWidth = Math.min(sizes.browserWidth,sizes.screenWidth);
	sizes.browserHeight = Math.min(sizes.browserHeight,sizes.screenHeight);

	//----- Adjust height & width to center of browser or screen (depending on base value)
	//		If either width or height not specified, set to browser or screen width/height
	//		negative width or height uses full size less negative value specified
	if (width == 0)
		sizes.width = sizes[base+'Width'];
	else if (width < 0)
		sizes.width = sizes[base+'Width'] + width;

	if (height == 0)
		sizes.height = sizes[base+'Height'];
	else if (height < 0)
		sizes.height = sizes[base+'Height'] + height;

	//----- Limit width and height to browser or screen width and height
	sizes.width = Math.min(sizes.width,sizes[base+'Width']);
	sizes.height = Math.min(sizes.height,sizes[base+'Height']);

	offsetX = (sizes[base+'Width'] - sizes.width) / 2 + offsetX;
	offsetY = (sizes[base+'Height'] - sizes.height) / 2 + offsetY;

	//----- round up unless no rounding specified
	if (!RZcheckoptions(options,'norounding'))
	{
		offsetX = parseInt(offsetX + .5);
		offsetY = parseInt(offsetY + .5);
	}

	sizes.offsetWidth = offsetX;
	sizes.offsetHeight  = offsetY;

	//----- Return object with all sizes
	return sizes;
}
/*---------------------------------------------------------------------------
Return true if layer exists and is currently visible.

Parameters:
----------
layerName-	text representing layer name

doc-		Optional argument specifing document object
			(appropriate when caller in in another frame or window)
----------------------------------------------------------------------------*/
function RZisvisible(layerName,doc)
{
	if (typeof doc == 'undefined') doc = document
    if (typeof doc == 'undefined') return false;    //firefox cludge
	if (typeof(layerName) == 'object')
		layerName = layerName.id;
	var status = false;

	if (doc.layers && doc.layers[layerName])		//ns
	{
		if(typeof doc.layers[layerName] != 'undefined'
		&& doc.layers[layerName].visibility == 'visible') status = true
	}
	else if (RZ.css)			//ie or firefox (see notes in RZshowlayer)
	{
		var el = doc.getElementById(layerName)
		if (!el && RZ.MSIE) el = doc.all[layerName];
		if (el != null)
		{
			var layerStyle = el.style
			if (layerStyle.visibility != ''	&& layerStyle.visibility == 'visible')
				status = true
			if (layerStyle.display != '' && layerStyle.display != 'none')
				status = true
		}
	}

	return status;
}
/*---------------------------------------------------------------------------
Does layer exist?

Parameters:
----------
layerName-	text representing layer name

trueFalse-	Not used

doc-		Optional argument specifing document object
			(appropriate when caller in in another frame or window)
----------------------------------------------------------------------------*/
function RZhavelayer(layerName,trueFalse,doc)
{
	if (typeof doc == 'undefined') doc = document
	if (typeof(layerName) == 'object')
		layerName = layerName.id;
	if (doc.layers && doc.layers[layerName])		//ns
	{
		if(typeof doc.layers[layerName] == 'undefined') return false
	}
	else if (RZ.css)			//ie or firefox (see notes in RZshowlayer)
	{
        var el = document.getElementById(layerName)
        if (el == null) return false
		//if(typeof doc.all[layerName] == 'undefined') return false
	}
	return true
}
/*---------------------------------------------------------------------------
Show or hide a layer based on browser type.  If the layer visibility property
is valid (non-blank), it is used to show or hide layer however it does not
work for Firefox.  If the visibility property is blank and the style.display
property if not blank, it is used to hide or show layer.

This feature was initially added as a simple backward compatible method to use
this function in Firefox in legacy utility functions such as the link manager
by simply changing the condictionally displayed code to define a display
property and leave the visiblity property blank.

Parameters:
----------
layerName-	text representing layer name

trueFalse- 	optional argument:
			if not passed, toggle layer (i.e. hide if showing or show if hidden)
			otherwise: if true show layer, if false hide layer

doc-		Optional argument specifing document object
			(appropriate when caller in in another frame or window)
----------------------------------------------------------------------------*/
function RZshowlayer(layerName,trueFalse,doc)
{
	var el, msg = '';
	if (typeof doc == 'undefined') doc = document

	//----- Netscape 4 loses layers if page was resized so leave layer visible
	if (RZ.isnavigator
	&& RZ.isnavigatorLayers == true
	&& doc.layers.length == 0) return

	if (typeof(layerName) == 'object')
		el = layerName;

	//----- If invalie layerName of object, set status and return
	else if (typeof layerName != 'string')
	{
		RZalert('Invalid layer name must be text argument');
		return;
	}
 	//----- Get div/span/layer element
	else
	{
		el = doc.getElementById(layerName)
		if (!el && RZ.MSIE) el = doc.all[layerName];
	}

	//----- If trueFalse not specified, toggle setting
	if (typeof trueFalse == 'undefined')
	{
		if ( RZisvisible(layerName,doc) == true)
			trueFalse = false
		else
			trueFalse = true
	}

	//----- See if layers are found on Netscape
	var msg = "Can't Hide Layer because ...\n"
	if (trueFalse == true) msg ="Can't Show Layer because ...\n"
	if (doc.layers)									//ns
	{
		if(doc.layers.length == 0)
		{
			msg += 'No Netscape Layers Defined (may be caused by resizing the window)\n'
				 + 'Try refreshing the page and re-entering information'
			RZalert(msg)
			return
		}
		RZ.isnavigatorLayers = trueFalse;	//indicate layer existed at one time
		if(typeof doc.layers[layerName] == 'undefined')
		{
			msg += 'Netscape Layer Not Defined: ' + layerName

			// list defined layers
			msg += '\n\nDOM document.layers properties'
			for (i in doc.layers)
				msg += '\n      ' + i + '=' + doc.layers[i]
			RZalert(msg)
			return
		}
	}
	else if (RZ.css)					//ie or firefox (see notes in description)
	{
		if (el == null)
		{
			msg += 'Layer Not Defined: ' + layerName
			RZalert(msg)
			return
		}
	}

	//----- Show or hide layer
	if (trueFalse == true)	// show layer
	{
		if (doc.layers && doc.layers[layerName])			//ns
			doc.layers[layerName].visibility = 'visible';

		else if (RZ.css)					//ie or firefox (see notes in description)
		{
			//var displayBlock = el.tagName.toUpperCase() == 'SPAN' ? 'inline' : 'block' ;
			var displayBlock = 'inline';	//most tags display=inline
			if (el.tagName.toLowerCase() == 'div')
				displayBlock = 'block';		//div display=block
			if (el.style.visibility != '')
			{
				el.style.visibility = 'visible';
				el.style.zIndex = 100;
			}
			else if (el.style.display != displayBlock)
				el.style.display = displayBlock;
		}
    }
    else 					// hide layer
    {
		if (doc.layers && doc.layers[layerName])			//ns
			doc.layers[layerName].visibility = 'hidden';
		else if (RZ.css)				//ie or firefox (see notes in description)
		{
			if (el.style.visibility != '')
				el.style.visibility = 'hidden';
			else if (el.style.display != 'none')
				el.style.display = 'none';
		}
	}
}
/*---------------------------------------------------------------------------
Set Cookie value
-----------
Parameters:
-----------
key			Key part of the Cookie key=value pair
value		Value part of key=value (may have optional qualifier appended)
qualifier	(Optional) string specifyin gualifier
			e.g. current page url or webspace domain
---------
Examples:
---------
	RZsetcookie('RZeditListReturnUrl',location.href);		//no qualifier
	RZsetcookie('RZlogin',RZ.webspace+"#"+RZ.page.domain);	//value has qualifier
	RZsetcookie('RZuser',RZ.username,RZ.page.domain)		//qualifier 3rd arg
----------------------------------------------------------------------------*/
function RZsetCookieValue( key, value, qualifier )
{ return RZsetcookie( key, value, qualifier ) }
function RZsetcookie( key, value, qualifier )
{
	if (!qualifier) qualifier = '';
	if (qualifier)
	{
		if (qualifier.substr(0,1) != '#')
			qualifier = '#' + qualifier;
		value += qualifier;
	}

	var domain = '';
	//DO-KS: was causing problems with Netscape when running from a remote host
	//if (document.location.host.indexOf('.') >= 0)
	//  domain = '; domain=' + document.domain;

	document.cookie = key + '=' + value
   	                + '; path=/' + domain;

	var text = key + "=" + value + domain
	RZtrace( 'Set Cookie', text )
	return text;
}

/* Same as RZgetcookie (retained for backward compatibility) */
function RZgetCookieValue( key, qualifier )
{ return RZgetcookie( key, qualifier ) }
/*---------------------------------------------------------------------------
Get Cookie value

Parameters:
----------
key-		Key part of the Cookie key=value pair

qualifier-	Optional parameter that qualifies the cookie by requiring the
			value to end with qualifier string.  Either a blank value is
			returned the qualifier string is removed from the returned value.
			Examples qualifies are: server domain and/or page url

			If qualifer is blank, accept any qualified value after stripping
			the cookie qualifier
----------------------------------------------------------------------------*/
function RZgetcookie( key, qualifier )
{

	var msg = '';
	var value = '';
	if (!key)
		RZwarn('Key undefined');

	else
	{
		var allcookies = document.cookie + ';'
		var pos = allcookies.toLowerCase().indexOf( key.toLowerCase()+';' );
		if (pos == -1)	// not empty string value
			pos = allcookies.toLowerCase().indexOf( key.toLowerCase()+'=' );
		if (pos == -1) 	// if no cookie defined, return blank
			value = ""
		else // when cookie defined, return value
		{
			var valStart = pos + key.length + 1;
			if (allcookies.substring(valStart-1,valStart) != "=" )
				value = ""
			else
			{
				var valEnd = allcookies.indexOf( ";", valStart );
				if (valEnd == -1 ) valEnd = allcookies.length - 1
				value = allcookies.substring( valStart, valEnd );  //keep value case sensitive
			}
		}

		//----- Build trace message; check for qualifier and remove or set value to blank
		msg = key + "=" + value
		if (typeof qualifier != 'undefined')
		{
			msg += '\nQualifier: (' + qualifier + ')'
			pos = value.indexOf('#')
			if (pos <= 0)
				value = ''
			else if (qualifier != '' && value.substring(pos+1) != qualifier)
				value = ''
			else
				value = value.substring(0,pos)
			msg += '\nQualified Value: (' + value + ')'
		}
	}

	RZtrace("Get Cookie",msg)
	return value
}
/*----------------------------------------------------------------------------
Date subclass to supports dashes "-" in constructor for FF & Chrome:
	.e.g. new RZdate('12-21-2012')

Plus additional properties and methods.
The builtin Date() object is not extended to avoid different behavior caused
by adding prototypes directly.

TODO:
	date.formatted.revizeDate --> date.get('revizeDate')
----------------------------------------------------------------------------*/
function RZdate(year,month,day,hours,minutes,seconds,ms)
{
	var date = null;
	switch (RZdate.arguments.length)
	{
		case 0:
			date = new Date();
			break;
		case 1:		//milliseconds since midnight 1-1-70 -OR- date string
			if (typeof year == 'number')
				date = new Date(year)
			else
			{		//date object or string; replace dashs in date
				var dateStr = (year + '')
				dateStr = dateStr.replace(/Noon/i,'12:00pm');
				dateStr = dateStr.replace(/Midnight/i,'12:00am');
				dateStr = dateStr.replace(/(\d)\-(\d)/g,'$1/$2');

				dateStr = dateStr.replace(/(\d{1,2}\/\d{1,2}\/)(\d{2})(?!\d)/, '$120$2');
				dateStr = dateStr.replace(/(\d)(am|pm)/, '$1 $2');

				if (dateStr)
					date = new Date(dateStr);
				else
					date = new Date();
			}
			break;
		case 2:
			date = new Date(year,month);
			break;
		case 3:
			date = new Date(year,month,day);
			break;
		case 4:
			date = new Date(year,month,day,hours);
			break;
		case 5:
			date = new Date(year,month,day,hours,minutes);
			break;
		case 6:
			date = new Date(year,month,day,hours,minutes,seconds);
			break;
		default:
			date = new Date(year,month,day,hours,minutes,seconds,ms);
			break;
	}
	//----- If invalid date, return NaN
	if (isNaN(date)) return null;

	date.isRZdate = true;
	date.string = date.toString();	//only used show value in debugger
	//date.toString = function() ... may work better

	//----- Add additional properties and methods.
	//		calendar_app issues
	//		1. cloning does not get these properties and methods
	//		2. adding reference to homeframe freezes IE7
	//		   must explictly reference as homeframe.RZdate(...)
	//		3. valid date return true for isNaN beside invalid when
	//		   not called from homeframe
	for (var prop in RZdate.prototype)
		date[prop] = RZdate.prototype[prop];

	if (date.getFormatted)			//TODO: change to getFormat()
		date.getFormatted();		//set formatted data for constructor date
	return date;
}
/*----------------------------------------------------------*/
/*BOOKMARK RZdate static properties (instance not required)*/
/*--------------------------------------------------------*/
RZdate.baseDate = '01/01/1970';
RZdate.monthNames = ["January", "February", "March", "April",
				     "May", "June", "July", "August",
					 "September", "October", "November", "December"];
RZdate.dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday",
				   "Thursday", "Friday", "Saturday"];

RZdate.getMonth = function(monthName)
{
	for (var i=0; i<RZdate.monthNames; i++)
		if (RZdate.monthNames[i] == monthName) return i;
	return -1;
}

/*-------------------------------------------------------------*/
/*BOOKMARK RZdate instance properties (backward compatibility)*/
/*-----------------------------------------------------------*/
RZdate.prototype.monthNames = ["January", "February", "March", "April",
							   "May", "June", "July", "August",
							   "September", "October", "November", "December"];

RZdate.prototype.dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday",
							  "Thursday", "Friday", "Saturday"];

/*------------------------*/
/*BOOKMARK RZdate methods*/
/*----------------------*/
RZdate.prototype.get = function(key)		//return format property
{											//TODO: extend to get any property
	if (typeof this.formatted[key] == 'undefined')
		return key;

	this.getFormatted();
	return this.formatted[key];
}
RZdate.prototype.toString = function()		//return string for date
{
	return new Date(this.getTime()) + '';
}
RZdate.prototype.getMonthName = function()	//return full month name
{
	return this.monthNames[this.getMonth()];
}
RZdate.prototype.getDayName = function()	//return full day name
{
	return this.dayNames[this.getDay()];
}
RZdate.prototype.getDaysInMonth = function()
{
	//                  1  2  3  4  5  6  7  8  9 10 11 12
	var daysInMonth = [31,28,31,30,31,30,31,31,30,31,30,31];
	var month = this.getMonth();
	var days = daysInMonth[month];
	if (month==1 && isLeapYear(this.getFullYear()))
		days=29;
	return (days);

	function isLeapYear(Year)
	{
		if (((Year % 4)==0) && ((Year % 100)!=0) || ((Year % 400)==0))
			return true;
		else
			return false;
	}
	/* alt from: http://msdn.microsoft.com/en-us/library/aa239571(v=vs.60).aspx
	// may not work in non-IE browsers
	eomDate = new Date();
	eomDate.setMonth(eomDate.getMonth() + 1 );
	eomDate.setDate(1);
	eomDate.setDate( eomDate.getDate() - 1);
	alert("Last day of this month = " + eomDate);
	*/
}
/*----------------------------------------------------------------------------
Add/substract number of months to current date.
return number of days added or subtracted
----------------------------------------------------------------------------*/
RZdate.prototype.addMonth = function(number)
{	//backward compatibility
	return this.addMonths(number)
}
RZdate.prototype.addMonths = function(number)
{
	if (typeof number == 'undefined') number = 1;
	number = parseInt(number);

	var time = this.getTime();
	var year = this.getFullYear() + parseInt(number / 12);
	var month = (this.getMonth() + number) % 12;
	if (number > 0 && month < this.getMonth())
		year++;
	else if (number < 0 & month > this.getMonth())
		year--;
	var day = this.getDate();

	// advance to next month using day=1
	this.setDate(1);
	this.setYear(year);
	this.setMonth(month);

	// adjust date using current day or last day of month
	day = Math.min(day,this.getDaysInMonth());
	this.setDate(day);
	this.getFormatted();

	time = this.getTime() - time;
	return time / 24 / 60 / 60 / 1000; 	//number of days added
}
/*----------------------------------------------------------------------------
Add/substract number of weeks to current date.
return number of minutes added or subtracted
----------------------------------------------------------------------------*/
RZdate.prototype.addWeeks = function(number)
{
	if (typeof number == 'undefined') number = 1;
	return this.addDays(number*7);
}
/*----------------------------------------------------------------------------
Add/substract number of days to current date.
return number of minutes added or subtracted

Credit: http://www.w3schools.com/js/js_obj_date.asp
They say if adding days goes into another month or year, Date object adjusts.
----------------------------------------------------------------------------*/
RZdate.prototype.addDays = function(number)
{
	if (typeof number == 'undefined') number = 1;
	number = parseInt(number);

	var time = this.getTime();
	this.setDate(this.getDate() + number);
	this.getFormatted();

	time = this.getTime() - time;
	return (time / 60 / 1000); 	//number of minutes added
}
/*----------------------------------------------------------------------------
Return new RZdate() object containing only the date portion of this RZdate().
----------------------------------------------------------------------------*/
RZdate.prototype.getDatePart = function()
{
	return new RZdate(this.getFullYear(),this.getMonth(),this.getDate());
}
/*----------------------------------------------------------------------------
Return a new Date() object which is GMT representation of time component.

Therefore getTime() returns milliseconds since midnight not since GMT 12:00am
(e.g. 0 for midnight; 1*60*60*1000 = 3600000 for 1am, etc).

However getHours() returns GMT hours not the hour specified when this RZdate
object was created. Therefore RZdate() with no time component (i.e. midnight)
returns 19 (7pm) from getHours() when local is EST since EST is GMT-5 hours.
----------------------------------------------------------------------------*/
RZdate.prototype.getTimePart = function()
{
	var date = new Date(1970,0,1);
	date.setUTCHours(this.getHours(),
					 this.getMinutes(),
					 this.getSeconds(),
					 this.getMilliseconds());
	return date;
}
/*----------------------------------------------------------------------------
Returns the week number for this date.

@param int dowOffset (optional) day week starts on (0 to 6) 1 is Monday
@return int ISO 8601 week number

Credit: Nick Baicoianu at MeanFreePath: http://www.meanfreepath.com
----------------------------------------------------------------------------*/
RZdate.prototype.getWeek = function(dowOffset)
{
	if (isNaN(this)) return null;
	dowOffset = typeof(dowOffset) == 'int' ? dowOffset : 0; //default dowOffset to zero

	var newYear = new Date(this.getFullYear(),0,1);
	var day = newYear.getDay() - dowOffset; //the day of week the year begins on
	day = (day >= 0 ? day : day + 7);
	var daynum = Math.floor((this.getTime() - newYear.getTime() -
				 (this.getTimezoneOffset()-newYear.getTimezoneOffset())*60000)/86400000) + 1;
	var weeknum;

	//if the year starts before the middle of a week
	if(day < 4)
	{
		weeknum = Math.floor((daynum+day-1)/7) + 1;
		if(weeknum > 52)
		{
			nYear = new Date(this.getFullYear() + 1,0,1);
			nday = nYear.getDay() - dowOffset;
			nday = nday >= 0 ? nday : nday + 7;
			/*if the next year starts before the middle of
			  the week, it is week #1 of that year*/
			weeknum = nday < 4 ? 1 : 53;
		}
	}
	else
		weeknum = Math.floor((daynum+day-1)/7);
	return weeknum;
}
/*---------------------------------------------------------------------------------------------
getNthDayInMonth(nth)
If nth specified, get date for nth occurance of this.date dayOfWeek -OR-
If no parameters, determine occurance of day of week in this.date month

----------------------
Parameters (optional):
----------------------
theDayOfWeek 	specifies day of week; 0-6 or day name (at least 3 characters)
theNth			specifies desired occurance of theDayOfWeek

--------
Returns:
--------
if parameters:	(RZdate) matching theNth occurance of theDayOfWeek in the month
otherwise		(String) 1st to 4th or 'last' if nth > 4th)

--------
Examples:
---------
this.date=01-01-2012
				getNthDayInMonth() 			returns '1st' 01-01-201 is 1nd Sun in Jan 2012
				getNthDayInMonth(1) 		returns RZdate('01-01-2012')
				getNthDayInMonth(4) 		returns RZdate('01-22-2012')
				getNthDayInMonth('last') 	returns RZdate('01-29-2012')
this.date=01-09-2012
				getNthDayInMonth() 			returns '2nd'; 01-09-201 is 2nd Mon in Jan 2012
				getNthDayInMonth(1) 		returns RZdate('01-02-2012')
				getNthDayInMonth(4) 		returns RZdate('01-23-2012')
				getNthDayInMonth('last') 	returns RZdate('01-23-2012')
---------------------------------------------------------------------------------------------*/
RZdate.prototype.getNthDayInMonth = function (nth,dayOfWeek)
{
	var day;
	var theDate = RZdate(this);		//work object that can be modified
	var daysInMonth = theDate.getDaysInMonth();
	var nthCount = 0;
	var dateTime = 0;

	//----- Compute nth day of current date in month
	if (arguments.length == 0)
	{
		dayOfWeek = theDate.getDay();
		for (day=1;day<=daysInMonth;day++)
		{
	        theDate.setDate(day);
			if (theDate.getDay() == dayOfWeek)
				nthCount++;
			if (theDate.getDatePart()+'' == this.getDatePart()+'')
				break;
		}
		if (nthCount > 4)
			nthCount = 'last';
		else
			nthCount = RZnth(nthCount);
		return nthCount;
	}

	//----- Find date of nth dayOfWeek in month
	else
	{
		if (nth != 'last')
			nth = nth.substr(0,1);					//drop th; keep number
		for (day=1;day<=daysInMonth;day++)
		{
			theDate.setDate(day);
			if (theDate.getDay() == dayOfWeek)
			{
				if (nth == 'last')
					dateTime = theDate.getTime();
				else if (nth == ++nthCount)
					return RZdate(theDate);
			}
		}
		return RZdate(dateTime);
	}
}
/*---------------------------------------------------------------------------------------------
Return various formatted strings for RZdate() object and save for future reference.
---------------------------------------------------------------------------------------------*/
RZdate.prototype.getFormatted = function(isForceFormat)
{
	//----- Initialize return object; formats shown below replaced by subsequent code:
	var formatted = {									//all dates are blank if no date component...
		briefDate:		'mm-dd-yy',						//2 digits for month, day & year
		shortDate:		'mm-dd-yyyy',					//2 digits for month & day; 4 digit year
		longDate:	 	'wwww mmmm d, yyyy',			//full day name & month name e.g. Monday January
		smartDate:		'mmm d, yyyy',					//3 char day of week (use substr(4) to omit or replace)
		revizeDate:		'yyyy-mm-dd',					//4 digit year, 2 digit month and day

		month:			'mm',							//2 digit month 01-12
		minutes:		'MM',							//2 digit minutes
		seconds:		'ss',							//2 digit seconds
		hours:			'h',							//1 or 2 digit hour; 12 hr clock
		hoursPadded:	'h',							//hours with &nbsp;&nbsp prefix if single digit
														//single digit prefixed with ' &nbsp'
														//Noon for 12:00:00; Midnight for 00:00:00

		hours12:		'hh',							//2 digit hours 12 hour format
		hours24:		'hh',							//2 digit hours 24 hour clock
		ampm:			'am/pm',						//am or pm

		day:			'dd',							//2 digit day 01-31
		daySuffix:		'ST',							//st, nd ... th
		dayLong:		'dST',							//1-2 digit: 1st, 2nd.. 30th

		dayName:     	'WWWW',							//full name of day e.g. Monday
		monthName:   	'mmmm',							//full name of month e.g. January

		briefTime: 		'[hh:MM am/pm]',				//2 digits for hr; seconds always dropped
														//blank if timePart() == 0
														//Noon for 12:00:00; 12 hr clock
		shortTime: 		'hh:MM[:ss]',					//always 2 digits for hour; seconds dropped if 0
														//24 hour clock (hours are 00-23)
		longTime: 		'hh:MM:ss am/pm',				//2 digits for hr; seconds always displayed
														//Noon for 12:00:00; Midnight for 00:00:00
		miniTime:		'hh:MM{:ss] am/pm',				//same as longTime except seconds dropped if 0
														//Noon for 12:00:00; Midnight for 00:00:00
		ampmTime: 		'hh:MM{:ss] am/pm',				//same as longTime except seconds dropped if 0
														//does not use noon or midnight
		smartTime:    	' h:MM:ss am/pm',				//blank if no timePart(); single digit padded
														//Noon for 12:00:00; seconds dropped if 0
														//12 hour clock
		timeZone:		'zzzz',							//as shown in new Date().toString()
														//varies by browser

		briefDateTime: 	'mm-dd-yy [hh:mm am/pm]', 		//time dropped if timePart() = 0
														//Noon for 12:00; seconds always dropped
		shortDateTime:	'mm-dd-yyyy hh:MM:ss',		    //time always displayed with seconds
													    //24 hour clock
		longDateTime:  	'wwww mmm d, yyyy hh:MM:ss zzzz', //time dropped if timePart() = 0
														//Noon for 12:00:00
		smartDateTime: 	' d, yyyy [h:mm:ss am/pm zzzz]', //time dropped if timePart() = 0
														//Noon for 12:00:00
		revizeDateTime:	'yyyy-mm-dd hh:MM:ss',			//time dropped if timePart() = 0
														//hh is 24 hour time; seconds dropped if 0
		shortDateBriefTime: '',
		formattedTime:  0								//getTime() value used for all formatted
	}
	// if not forcing formatting and date has not changed since last call, no need to run again
	if (!isForceFormat && this.formatted && this.formatted.formattedTime == this.getTime())
		return;

	formatted.formattedTime == this.getTime();			//remember value last used for formatted

	var day = this.getDate();
	var month = this.getMonth();
	var year = this.getFullYear()
	var dayOfWeek = this.getDay();

	// day suffix e.g. 1st, 2nd. 3rd, 4th ... 30th
	var suffix = ''
	if (day == 1 || day == 21 || day == 31)
		suffix = 'st';
	else if (day == 2 || day == 22)
		suffix = 'nd';
	else if (day == 3 || day == 23)
		suffix = 'rd';
	else
		suffix = 'th';
	formatted.daySuffix = suffix;
	formatted.dayLong = day + suffix;

	// Full dayName & monthName (use substr(0,3) for short names
	formatted.dayName = this.getDayName();
	formatted.monthName = this.getMonthName();

	//----- Extract time zone from Date.toString() function
	//		chrome: Sun Mar 18 2012 23:21:58 GMT-0400 (Eastern Daylight Time)
	//		FF:		Sun Mar 18 2012 23:42:25 GMT-0400 (Eastern Daylight Time)
	//		IE7-9:  Sun Mar 18 23:21:14 EDT 2012 (may show EST not EDT)
	var pattern = new RegExp( '(\\w*' + day + ')(.*)('+year+')' );	//for IE format...
	formatted.timeZone = this.toString();								//...move year before timezone
	formatted.timeZone = RZtrim(formatted.timeZone.replace(pattern,'$1, $3$2'));
	var results = formatted.timeZone.match(/.*\d (.*)$/mi);			//find time zone at end
	if (results)
		formatted.timeZone = results[1];
	else
		formatted.timeZone = '';

	//----- Dates...
	formatted.month = RZright('0'+(month+1),2);
	formatted.day = RZright('0'+day,2);

	if (month == 0 && day == 1 && year == 1970)		//no date component
	{
		formatted.briefDate = '';
		formatted.shortDate = '';
		formatted.longDate = '';
		formatted.smartDate = '';
		formatted.revizeDate = '';
	}
	else
	{
		formatted.briefDate = formatted.month + '-' + formatted.day + '-' + (year+'').substr(2);
		formatted.shortDate = formatted.month + '-' + formatted.day + '-' + year;
		formatted.longDate = formatted.dayName + ' ' + formatted.monthName + ' '  + day + ', ' + year;
		formatted.smartDate = formatted.dayName.substr(0,3) + ' '
						    + formatted.monthName.substr(0,3) + ' '  + day + ', ' + year;
		formatted.revizeDate = year + '-' +  formatted.month + '-' + formatted.day;
	}

	//----- Time formats...
	var hours = this.getHours();
	var minutes = this.getMinutes();
	var seconds = this.getSeconds();

	var ampm = (hours < 12) ? ' am' : ' pm';
	formatted.ampm = ampm.substr(1);
	formatted.minutes = RZright('0' + minutes,2);
	formatted.seconds = RZright('0' + seconds,2);

	formatted.hours24 = RZright('0' + hours,2);
	formatted.hours = hours <= 12 ? hours : hours -= 12;
	formatted.hours12 = RZright('0'+ (hours==0?'12':hours), 2);
	formatted.hoursPadded = (hours.toString().length == 1 ? '&nbsp;&nbsp;' : '') + hours;

	formatted.briefTime = ((hours + minutes) > 0)
					    ? formatted.hours12 + ':' + formatted.minutes + ampm : '';
	formatted.briefTime = formatted.briefTime.replace(/12:00 pm/i,'Noon');

	formatted.shortTime = formatted.hours24 + ':' + formatted.minutes
					    + (seconds > 0 ? ':' + formatted.seconds : '');

	formatted.longTime  = formatted.hours12 + ':' + formatted.minutes + ':' + formatted.seconds + ampm;
	formatted.longTime  = formatted.longTime.replace(/12:00:00 am/i,'Midnight');
	formatted.longTime  = formatted.longTime.replace(/12:00:00 pm/i,'Noon');

	formatted.ampmTime  = formatted.hours12 + ':' + formatted.minutes + ampm;

	formatted.miniTime  = formatted.ampmTime.replace(/12:00 am/i,'Midnight');
	formatted.miniTime  = formatted.miniTime.replace(/12:00 pm/i,'Noon');

	formatted.smartTime = ((hours + minutes + seconds) > 0)
					    ? (formatted.hoursPadded + ':' + formatted.minutes + ':' + formatted.seconds) + ampm : '';
	formatted.smartTime = formatted.smartTime.replace(/:00 /i,' ');			//drop seconds if zero
	formatted.smartTime = formatted.smartTime.replace(/12:00 pm/i,'Noon');

	//----- Combine Date and Time
	formatted.briefDateTime = formatted.briefDate   + (formatted.briefTime ? ' ' + formatted.briefTime : '');
	formatted.shortDateTime = formatted.shortDate   + ' ' + formatted.shortTime;
	formatted.longDateTime = formatted.longDate     + ' ' + formatted.longTime;
	formatted.smartDateTime = formatted.smartDate   + (formatted.smartTime ? ' ' + RZtrim(formatted.smartTime) : '');
	formatted.revizeDateTime = formatted.revizeDate + (formatted.briefTime ? ' ' + formatted.briefTime : '');

	// trim leading space in case there was no date or time component
	formatted.briefDateTime = RZtrim(formatted.briefDateTime);
	formatted.shortDateTime = RZtrim(formatted.shortDateTime);
	formatted.longDateTime = RZtrim(formatted.longDateTime);
	formatted.smartDateTime = RZtrim(formatted.smartDateTime);
	formatted.revizeDateTime = RZtrim(formatted.revizeDateTime);

	// Additional date & time combinations
	formatted.shortDateBriefTime = RZtrim(formatted.shortDate + ' ' + formatted.briefTime);

	this.string = this.toString();	//update value shown in debugger
	this.formatted = formatted;
	return formatted;
}
/*---------------------------------------------------------------------------------------------
Called to parse a Date string

The JavaSript Date.Parse method is used to accept all valid date formats.  Only problem
is two digits years (99) are intrepreted as 20th century dates (1999),  We counteract this
by adding 100 to the year unless the 4 digit date string exists in the input date string.

Parameters:
	fieldValue-	String representing a date in any standard format

Returns:
	returns 	null if invalid date;
				blank if no date specified;
				formatted date: yyyy-mm-dd hh:mm:ss
---------------------------------------------------------------------------------------------*/
function RZparseDate(fieldValue)
{
	RZparseDate.date = null;

	if (fieldValue == '') return '';
	if (typeof(fieldValue) == 'undefined' || fieldValue == null) return null;

	if (fieldValue.constructor == Date)
		fieldValue = fieldValue.toString();
	if (typeof fieldValue != 'string')
		fieldValue = fieldValue + '';

	var fieldValueOriginal = fieldValue;
	fieldValue = fieldValue.split('-').join('/');	//Chrome, Firefox does not accept -
	var dateSeconds = Date.parse(fieldValue);

	// may have incorrectly changed dash in: "Mon Jan 09 2012 12:28:37 GMT-0500 (EST)"
	// try above legacy conversion first for safe backward compatibility
	if(isNaN(dateSeconds) || fieldValue.search('GMT/') != -1)
	{							// <digit>-<digit> --> <digit>/<digit>
		fieldValue = fieldValueOriginal.replace(/(\d)-(\d)/g,'$1/$2');
		dateSeconds = Date.parse(fieldValue);
	}

	// try time only with today's date
	if(isNaN(dateSeconds))
	{							// <digit>-<digit> --> <digit>/<digit>
		fieldValue = fieldValueOriginal.replace(/(\d)-(\d)/g,'$1/$2');
		if (fieldValue.indexOf('/') == -1 && fieldValue.indexOf(':') != -1)
		{
			fieldValue = RZparseDate(new Date()+'').substr(0,11) + fieldValue;
			fieldValue = RZparseDate(fieldValue);
			if (RZparseDate.date) dateSeconds = 0;	//valid date/time
			fieldValue = RZparseDate.date;
			RZparseDate.date = null;				//restore default
		}
	}

	if( isNaN(dateSeconds) ) return null;			//bad date

	//----- Treat dates of the form 01 as 2001
	var theDate = new Date(fieldValue)
	var year = theDate.getYear()					//js 1.1 compatible
	if (year < 1000) year += 1900					//broswer quirks
	if (year < 2000)
	{
		//see if the 4 digit year matches a string in the date field
		//if not then they we need to add 100 to the year
		if (fieldValue.indexOf(year.toString()) == -1)
			year += 100
	}
	var theMonth = theDate.getMonth() + 1
	var theDay = theDate.getDate()
	fieldValue = year.toString() + '-'
			   + RZright('0' + theMonth, 2)
			   + '-'
			   + RZright('0' + theDay, 2)
	var hour = theDate.getHours()
	var minutes = theDate.getMinutes()
	var seconds = theDate.getSeconds()
	fieldValue += ' ' + RZright('0' + hour.toString(), 2)
			   +  ':' + RZright('0' + minutes.toString(), 2)
			   +  ':' + RZright('0' + seconds.toString(), 2)

	//----- Save Date object with correct year and time to milliseconds
	RZparseDate.date = new Date(year,theDate.getMonth(),theDay,
								hour,minutes,seconds,theDate.getMilliseconds());

	//----- return date/time formatted for saveing int Revize db yyyy-mm-dd hh:mm:ss
	return fieldValue;
}
/*---------------------------------------------------------------------------------------------
Called to validate Date field

Parameters:
	fieldname-	field object containing date to validate

Returns: true if valid date; otherwise false
---------------------------------------------------------------------------------------------*/
function RZcheckdate( thisField )
{
	var fault = false
	var dateString = RZparseDate( thisField.value )
	if (dateString == null)
	{
		fault = true
		alert( "I'm sorry.  You have not entered a valid Date\n\n"
		 + "Examples: 12/12/2011 or 01-01-2012" )
		thisField.focus()
	}
	else
	{
		var theDate = new Date(dateString)
		if (theDate.getFullYear() < 1900)
		{
			if ( !confirm( 'You have entered a date prior to 1900\n\n'
			             + 'Is this correct?' ) )
			{
				fault = true
				thisField.focus()
			}
		}
	}
	return !fault		//cancels save if error
}
/*---------------------------------------------------------------------------
Setup or lookup module permits.
-----------------------------------------------------------------------------
Used by RZaction() and RZlogin to determine if buttons or html should be
displayed based on known permissions.

If RZpermits() is called with no parameters, the following setup occures:

	Get all module permissions determined at login from RZpermits cookie
	Permits (crud) are stored in the cookie as: global=crud,links=r

	RZ.permits.modules will be loaded with individual module permissions
	Following example above:
		RZ.permits.modules.global='crud';
		RZ.permits.modules.links='r'

Currently only the links module permissions are stored at after sucessful
login by the control_panel.jsp page (which is only used by the revizelogin
template).

Parameters:
	module-			Name of module to check
	requirePermits-	One of more of the following characters: (crud)
					c = Create
					r = Read
					u = Update
					d = Delete

TODO: Look up all module permissions, store in future control_panel window

Returns:

If RZpermits() is called with a module and permissions, the specified module
object is checked for the requested permissions returning true or false.

If there is no object for the specified module, the permissions are not known
therefore the function returns true.
----------------------------------------------------------------------------*/
function RZpermits(module,requiredPermits)
{
	if (RZ.isauthenticationactive == false)
		return true

	//----- If setup call...
	else if (typeof module == 'undefined')
	{
		//----- Module permissions
		RZ.message = 'none defined';
		var permits = RZgetCookieValue('RZpermits')
		if (permits != '')
		{
			var permitsArray = permits.split(',')
			RZ.message = '';
			for (var i=0; i<permitsArray.length; i++)
			{
				var module_permit = permitsArray[i].split(':')
				RZ.permits.modules[module_permit[0]] = module_permit[1]
				if (module_permit[1] == '') module_permit[1] = '-none-'
				RZmsgAdd(module_permit[0], ' ' + module_permit[1])
			}
		}
		RZtrace('Module Permissions',RZ.message)

		//----- Page permissions
		RZ.message = ''
		RZmsgAdd( 'RZ.page_key       ', ' ' + RZ.page_key )
		if (RZ.pagetype == 'template')
		{
			RZmsgAdd( 'RZ.page_role      ', ' ' + RZ.page_roles )
			RZmsgAdd( 'RZ.page_users     ', ' ' + RZ.page_users )
		}
		else
		{
			RZmsgAdd( 'RZ.permissions_module  ', ' ' + RZ.permissions_module )
			RZmsgAdd( 'RZ.permissions_parent  ', ' ' + RZ.permissions_parent )
			RZmsgAdd( 'RZ.permissions_template', ' ' + RZ.permissions_template )
		}
		RZtrace('Page Permissions',RZ.message)
	}

	//----- Check permissions...
	else
	{
		//----- Assume full permissions if module not listed in permits
		var modulePermits = 'crud';
		if (typeof RZ.permits.modules[module] != 'undefined')
			modulePermits = RZ.permits.modules[module]
		var requiredPermitsOptions = requiredPermits.split('|')

		var status = true
		for (var j=0; j<requiredPermitsOptions.length; j++)
		{
			var optionStatus = true
			for (var i=0; i<requiredPermitsOptions[j].length; i++)
			{
				var ch = requiredPermitsOptions[j].substring(i,i+1).toLowerCase()
					if (modulePermits.indexOf(ch) == -1)
					{
						optionStatus = false
						break;
					}
			}
			status = optionStatus
			if (optionStatus == true) break;
		}

		RZ.message = ''
		RZmsgAdd( 'module', module)
		RZmsgAdd( 'module permits', modulePermits)
		RZmsgAdd( 'permits required', requiredPermits)
		RZmsgAdd( 'status', status)
		RZtrace('Permissions Checked', RZ.message)
		return status;
	}
}
/*---------------------------------------------------------------------------------------------
Determine current page permissions
---------------------------------------------------------------------------------------------*/
function RZpagepermission()
{
	RZ.roles = ''
	RZ.username = RZgetCookieValue('RZusername',RZ.page.domain)
	if (RZ.username != '') RZ.roles = RZgetCookieValue('RZroles')

	RZ.pagepermission = false;

	//----- Get login username and roles
	var roles = '|' + RZ.roles + '|'
	var username = '|' + RZ.username + '|'

	RZ.browserdev = (roles.indexOf('@browserdev') != -1);

	if (RZ.isauthenticationactive == false)
		RZ.pagepermission = true;		//all permits if authentication disabled

	else if (username == '|')
		RZ.pagepermission = false;	//do nothing (not logged in)

	else if( roles.indexOf( '|superuser|' ) != -1
	||  roles.indexOf( '|administrator|') != -1)
		RZ.pagepermission = true;

	else if (RZ.page_roles == '' && RZ.page_users == '')
		RZ.pagepermission = true;		//no users or roles defined so everyone has access

	else
	{
		if ( ('|'+RZ.page_users+'|').indexOf(username) != -1)
			RZ.pagepermission = true;
		else
		{
			var rolesArray = roles.split('|')
			for (var i in rolesArray)
			{
				if ( rolesArray[i] == '' ) continue;
				if ( ('|'+RZ.page_roles+'|').indexOf('|'+rolesArray[i]+'|') != -1)
				{
					RZ.pagepermission = true;
					break;
				}
			}
		}
	}
	return
}
/*---------------------------------------------------------------------------
Calls either addEventListener or attachEvent if defined
RZ.browsertype set to "standard", "non-standard" or "unknown"

Example calls:
	RZeventadd(window, 'focus', function()
	{
		//do something
	});
	RZeventadd(form, 'submit', "validate('red,x=2')");

	// FF (chrome?), specified function object (e.g. validate) must be defined
	// before RZeventAdd called (not required for above calling variations)

	// On IE this form passes object as first argument (click event?)
	RZeventadd(form, 'submit', validate);
----------------------------------------------------------------------------*/
function RZeventadd(target, eventType, functionRef, capture)
{
    if (!capture) capture = false;
	if (eventType.substr(0,2) == 'on') eventType = eventType.substr(2);
	if (typeof target.addEventListener != "undefined")
    {
		// e.g. document.addEventListener("error", function, false);
        target.addEventListener(eventType, functionRef, capture);
        RZ.browsertype = "standards";

    }
	else if (typeof target.attachEvent != "undefined")
	{
        target.attachEvent("on" + eventType, functionRef);
        RZ.browsertype = "non-standards";
    }
	else
	{
        RZ.browsertype = "unknown";
    }
}
/*---------------------------------------------------------------------------
Calls either removeEventListener or removeEvent if defined

if (window.addEventListener) window.removeEventListener("focus", refresh, false);
else if (window.attachEvent) window.detachEvent("onfocus", refresh);   //IE
----------------------------------------------------------------------------*/
function RZeventremove(target, eventType, functionRef, capture)
{
    if (!capture) capture = false;

	if (typeof target.addEventListener != "undefined")
        target.removeEventListener(eventType, functionRef, capture);

	else if (typeof target.attachEvent != "undefined")
        target.detachEvent("on" + eventType, functionRef);
}
/*---------------------------------------------------------------------------------------------
Enable a new handler (append to current handler if one defined)
---------------------------------------------------------------------------------------------*/
function RZsetuphandler(handlerType,handlerFunction,isLast)
{
	//DCO 11-12-2015: MUST use event listeners when called by script before the body tag,
	//because body tag events MAY override (think IE) any body/window events defined here.
	var is = document.getElementsByTagName('body').length == 0;

	//DCO 12-02-2015: if onload and no <body onload="...">, use listener for backward
	//compatibilty with webgen/jquery/scripts.js (which overrides window.onload event)
	if (!is && handlerType.indexOf('onload') != -1 && !window.onload) is = true;
	if (is)
	{
		var fn = typeof(handlerFunction) == 'function' ? handlerFunction
			   : new Function('', handlerFunction.toString());
		if (window.addEventListener) window.addEventListener(handlerType.substr(2), fn, false);
		else if (window.attachEvent) window.attachEvent(handlerType, fn);   //IE
		else return false;	//safety for unexpected
		return true;
	}

	var functionStr = window[handlerType]; //existing handler function if defined
	var parameters = ""; //parameters string
	var pos = -1; //position of '{'
	var pos1 = -1; //position of '('
	var pos2 = -1; //position of ')'

	if ( functionStr != null )
	{
		functionStr = functionStr.toString()
		pos = functionStr.indexOf( '{' );
		pos1 = functionStr.indexOf( '(' );
		pos2 = functionStr.indexOf( ')' );
	}

	//Check if parameters exist.  If they do, then append them to the current
	//parameters string.
	if ( pos1 >= 0  && pos2 >= 0 )
		parameters += functionStr.substring( pos1+1, pos2 );

	//Check if the call to Function() exists.  If it does, then append a call to
	//new handler to it at the beginning; otherwise, just call new handler.
	if ( pos < 0 )
		functionStr = handlerFunction + ';'

	else if (isLast)	//DCO 10-20-2014
		functionStr = functionStr.substring( pos+1, functionStr.length-1 )	//existing function
					+ '\n' + handlerFunction + ';'
	else
		functionStr = handlerFunction + ';'		//appended function call
					+ functionStr.substring( pos+1, functionStr.length-1 );	//existing function

	//----- Set new handler and make trace entry
	window[handlerType] = new Function( parameters, functionStr );

	RZtrace("Initialized " + handlerType + " Handler", window[handlerType].toString() )
	return true;
}
/*-----------------------------------------------------------------------------------
  Implements button action operations (e.g. forward, save, delete, new, exit)
  Either a button or image is displayed on the page if a valid user is
  authenticated via the login page. If security is disabled any username is
  allowed.

  Normally code is generated to display button if authorized however if RZ.action=html
  function does not display button only returns html executed by specified button.

  TODO:  Document remaining RZ.* variables

  Parameters:
  action-		String representing type of action button (See Remarks)
  Parameters Format:
  <table 20c%>
  action         Button Types
  -------------  -----------------------------------------------
  editpage       "Edit this Page" calls -editform.jsp page
  editform       (same as above backward compatibility)
  editglobal     "Edit Globals" globals-editform.jsp
  \
  editlist       Edit this List (-editlist.jsp)
  exit           Exit Edit List page; return to caller
  newitem        Create new list item
  new            (same as above backward compatibility)
  edititem       Edit an existing list item
  edit           (same as above backward compatibility)
  delete         Delete an existing list item
  deleteitem     (same as above backward compatibility)
  \
  save           Edit form save button
  cancel         Edit form or Edit List cancel button
  \
  history        Edit form current record history
  editversion    Selects record to edit on history
  copyversion    Copy record on history as new version
  newversion     Create new version of current record
  permissions    opens permissions window
  </table>

  RZ Input Parameters:
  RZ.module-      Name of module
  RZ.recordid-	  recordid to process
  RZ.nexturl-     url of page recieving control from button
  RZ.popupwidth-  width of popup window
  RZ.popupheight- height of popup window
  RZ.popupscroll- indicate if popup window has scroll bars
  RZ.img-         if non\-blank html displayed for button
  				  (usually an image tag but can be any html)
  RZ.caption-     Label of input type=button
  				  (image button used if RZ.img not blank)
  RZ.tagname-     If non\-blank specified form button name)
  RZ.parentkey-   If not blank, specified parent key rather than letting Revize
  				  automatically determine.
  RZ.action-	  =html, does not display button
                  =false TODO
                  =true TODO

  Returns:  script executed when button clicked; If RZ.action
  -----------------------------------------------------------------------------------*/
function RZaction(action)
{

	if (RZ.nexturl == null || RZ.nexturl == 'null' ) RZ.nexturl = ''
	if (RZ.popupwidth == null || RZ.popupwidth == 'null') RZ.popupwidth = ''
	if (RZ.popupheight == null || RZ.popupheight == 'null') RZ.popupheight = ''
	if (RZ.popupscroll == null || RZ.popupscroll == 'null') RZ.popupscroll = ''

	var script=''
	var html=''
	var anchor = ''
	var level = ''
	var buttonName=''
	var requiredModule = RZ.module
	var requiredPermits = ''
	var options = ''
	var recordid = ''
	var parentkey = ''
	var msg = ''

	//----- Create specific JavaScript executed when button clicked
	//		(based on type of action requested)
	switch ( action.toLowerCase() )
	{

		case "editlist":
		{
			requiredPermits = 'c|u|d'
			if (RZ.tagname == '') RZ.tagname = 'RZeditlist';

			//-----delete below to always use new code-----\\
			if (!EZ.isFeature("EZ"))
			script = "RZcalleditlist("
				   + "'" + RZ.nexturl + "',"
				   + "'" + RZ.popupwidth + "',"
				   + "'" + RZ.popupheight + "',"
				   + "'" + RZ.popupscroll + "', "
				   + "'" + RZ.set + "')"
			else
			//-----delete above to always use new code-----//

			// build call of form:	RZeditlist( {nexturl:RZ.nexturl, ..., set:RZ.set});';
			script = 'RZeditlist({'
				   + EZ.concat([
								RZ.nexturl     ? "nexturl: '"    + RZ.nexturl     + "'" : '',
								RZ.module      ? "module: '"     + RZ.module      + "'" : '',	//added 12-15-2015
								RZ.popupwidth  ? "popupwidth: '" + RZ.popupwidth  + "'" : '',
								RZ.popupheight ? "popupheight:'" + RZ.popupheight + "'" : '',
								RZ.popupscroll ? "popupscroll:'" + RZ.popupscroll + "'" : '',
								RZ.set ? "set:'" + RZ.set.replace(/'/g, "\\'") + "'" : ''
								], ',')
				   + '})';
			break;
		}

		//----- Common code for all new and edit actions
		case "new":
		case "newitem":
			level = RZ.linklevel;
			if (!RZ.linklevel && RZ.module)
				level = RZ.nextseq.listid ? RZ.nextseq.listid : 1;

		case "edit":
		case "edititem":
		case "editform":
		case "editpage":
		case "editglobal":

			recordid = RZ.recordid

			//----- Format edit form call
			//		Note: without the isNaN test, remaining JavaScript not executed
			if ( !isNaN(RZ.recordid) || RZ.recordid.toLowerCase() != 'no items in list' )
			{
				if(action == 'edit' || action == 'edititem')
				{
					if (RZ.parentkey != '')
						parentkey = RZ.parentkey
					else
						parentkey = RZlevelQualifier(RZ.linkname,RZ.linklevel,RZ.recordid)
				}
				else if(action == 'new' || action == 'newitem')
				{
					parentkey = RZ.parentkey;	//non-blank if specified
				}


				if(action == 'new' || action == 'newitem'
				|| action == 'edit' || action == 'edititem')
				{
					//----- If page permissions warnings are enabled...
					if (RZcheckoptions(RZ.permissions_options,"warnings"))
					{
						// Display icon if module not specified on new or edit item button
						if (RZ.module == '' && RZ.template != '*none*')
						{
							msg = "'" + RZpermissionWarning(action,'') + "'"	//module req msg
							html += '<a href="JavaScript:RZpagemessage(' + RZreplace(msg,'\n','--') + ')">'
								 +  '  <img src="/revize/images/warning-button.gif" border=0>'
								 +  '</a>'
						}

						// Display hidden icon in case template can not be determineed
						else if (RZ.template == '' && RZ.linkname == '')
						{
							RZ.html = '<span id="RevizeButtonWarning' + RZ.icons.length + '"'
									+ ' style="visibility:hidden">'
									+ '  <a href="JavaScript:RZiconMessage(\''+ action +'\','
									+ RZ.icons.length + ')"'
									+ '   ><img src=\"/revize/images/warning-button.gif\"'
									+ '   border=0 alt="Click for Details"></a>'
									+ '</span>'
							//RZ.html = RZ.html.replace(/</g,'&lt;')	//display html
							document.write( RZ.html )
							RZ.icons[RZ.icons.length] = RZ.module
						}
					}
				}

				script = "RZedit( "
				       + "'" + RZ.recordid + "', "
				       + "'" + RZ.nexturl + "', "
				       + "'" + RZ.popupwidth + "',"
				       + "'" + RZ.popupheight + "',"
				       + "'" + RZ.popupscroll + "', "
				       + "'" + RZ.set + "', "
				       + "'" + RZ.module + "',"
				       + "'" + RZ.field + "',"
				       + "'" + RZ.linkname + "',"
				       + "'" + action + "',"
				       + "'" + RZ.template + "',"
				       + "'" + level + "',"
				       + "'" + parentkey + "')"
			}

			// if setting a recordid, ignore the recordid.value
			if ( RZ.set.indexOf('_recordid=') >= 0 ) RZ.recordid = ''

			//----- Button name dependent on action
			if (RZ.tagname == '')
			{
				switch (action)
				{
					case "new":
					case "newitem":
						RZ.tagname = 'RZnewitem';
						requiredPermits = 'c'
						anchor = 'Revize_' + RZ.module + '[new]'

						break;
					case "edit":
					case "edititem":
						RZ.tagname = 'RZedititem' + RZ.recordid;
						requiredPermits = 'u'
						anchor = 'Revize_' + RZ.module + '[' + RZ.recordid + ']'
						break;
					case "editform":
					case "editpage":
						RZ.tagname = 'RZeditpage';
						requiredPermits = 'c|u'
						break;
					case "editglobal":
						RZ.tagname = 'RZeditglobal';
						requiredPermits = 'c|u'
						break;
				}
			}
			break;

		case "exit":
			if(typeof RZ.nexturl != 'undefined' && RZ.nexturl != '' && RZ.nexturl != 'NEXTURL')
				script = "location='" + RZ.nexturl + "'";
			else
				script = "RZback( 'RZeditListReturnUrl' );"
			if (RZ.tagname == '') RZ.tagname = 'RZexit';
			break;

		case "delete":
		case "deleteitem":
			if (RZ.recordid.toLowerCase() != 'no items in list')
			{
				//script = "RZrecordDelete( '" + RZ.recordid +  "', '" + RZ.module + "' );"
				script = "RZdelete( '" + RZ.recordid +  "', '" + RZ.module
				if (RZ.nexturl != '') script += "', '" + RZ.nexturl
				script +=  "' );"
			}
			if (RZ.tagname == '') RZ.tagname = 'RZdeleteitem';
			requiredPermits = 'd'
			break;

		case "save":
			script = "RZsave( document.XMLForm, '" + RZ.nexturl + "' );"
			if (RZ.tagname == '') RZ.tagname = 'RevizeSave';
			break;

		case "save_as_draft":
			script = "RZsave_as_draft( '" + RZgetoption(RZ.options,'workflow') + "' );"
			if (RZ.tagname == '') RZ.tagname = 'RevizeSaveAsDraft';
			break;

		case "cancel":
			script = "RZeditFormCancel();"
			if (RZ.tagname == '') RZ.tagname = 'RevizeCancel';
			break;

		case "history":
			if (RZ.nexturl != '')
				options += 'nexturl='+RZ.nexturl
			if (RZ.field != '')
				options += 'fields='+RZ.field
			script = "RZhistory("
			       + "'" + RZ.module + "',"
			       + "'" + RZ.recordid + "', "
			       + "'" + RZ.version + "', "
			       + "'" + options + "') "
			if (RZ.tagname == '') RZ.tagname = 'RevizeHistory';
			break;

		case "permissions":
			requiredModule = RZ.permissions_module
			requiredPermits = 'u'
			if (RZ.nexturl != '')
				options += 'nexturl='+RZ.nexturl
			if (RZ.linkname != '')
				options += 'linkname='+RZ.linkname
			if (RZ.module != '')
				options += 'module='+RZ.module
			if (RZ.object != '')
				options += 'object='+RZ.object

			// if standard permissions buttom, treat as "Admin Panel"
			var isAdminPanel = true;
			if(RZcheckoptions(RZ.webspacedesc,"noadminpanel"))
			{
				isAdminPanel = false;
			}

			if (!options && isAdminPanel
			&& (RZ.img.indexOf('src="images/edit/permissions.jpg"') != -1
			|| RZ.img.indexOf('src="images/edit/permissions.gif"') != -1))
			{
				script = "void(0);";
				requiredModule = '';
				RZ.img = RZ.img.replace(/src="images\/edit\/permissions.jpg"/,'src="/revize/images/edit/admin_panel.jpg"');
				RZ.img = RZ.img.replace(/src="images\/edit\/permissions.gif"/,'src="/revize/images/edit/admin_panel.jpg"');
				RZ.img = RZ.img.replace(/alt="Permissions"/,'alt="Admin Panel" id="RZadminwinButton" onmouseup="RZadminwin()"');
			}
			// if permissions active
			else if (RZ.permissions_module != '')
				script = "RZpermissions("
					   + "'" + RZ.set + "',"
					   + "'" + options + "') "

			if (RZ.tagname == '') RZ.tagname = 'RevizePermissions';
			break;

		case "copyversion":
				options += ',copy'
		case "newversion":
		case "editversion":
			if (RZ.nexturl != '')
				options += 'nexturl='+RZ.nexturl
			script = "RZeditversion("
			       + "'" + RZ.module + "',"
			       + "'" + RZ.version + "', "
			       + "'" + options + "') "
			//TODO: perhaps button should be displayed and message if clicked.
			if (RZ.editnextversion == '') script = ''	//new record - no history
			if (RZ.tagname == '') RZ.tagname = 'RevizeVersion';
			break;

		default:
			script = "RZalert('Unknown or Invalid Revize Action Request');"
	}

	//----- Build html containing script (image or button version)
	if (script == '')
		html = ''
	else
	{
		if (RZ.script != '')
		{
			//----- Test results of user specified script via conditional operator
			//		so RZ.script code can cancel the button by returing false
			//
			// 			e.g. if (!user script)?donothing:button script;
			//
			if (RZright(RZ.script,1) != ';') RZ.script += ';'
			script = 'RZ.results=' + RZ.script
			       + '(!RZ.results && typeof RZ.results != \'undefined\')?void(0):'
			       + script;
		}

		if (RZ.img != "")
		{
			html += '<a href="javascript:' + script + '">' + RZ.img + '</a>'

			// show the help button after the adminpanel button
			if (RZ.img.indexOf('/revize/images/edit/admin_panel.jpg') != -1)
				html += '&nbsp;<a href="http://cms4.revize.com/revize/supportrevize/revize_faq.php" target="_new">'
					  + '<img src="../images/edit/help.jpg" alt="Help" border="0" /></a>';
		}
		else
		{
			if (RZ.caption == '') RZ.caption = 'Edit Page'
			html += '<input type="button" name="' + RZ.tagname + '" value="' + RZ.caption + '" '
				 + 'onClick="' + script + ';">'
		}
	}

	//----- Add <br> and/or anchor tag to html if requested
	if (html != '')
	{
		if (RZ.options.indexOf('<br>') != -1) html += '<br>'
		if (anchor != '') anchor = '<a name="' + anchor + '"></a>'
		html += anchor
	}

	//----- write html if logged into this webspace with correct permits
	//
	//		If RZ.active is blank or false, only write html if logged in with
	//		correct permissions for specified module and only return script
	//		when html written (default case).
	//
	//		If RZ.active is true, always write html
	//
	//		If RZ.active = 'html': return html instead of writting.  If not
	//		logged in or do not have permissions return blank for html.

	var active = RZ.active;
	if (active == 'html')
	{
		if ( RZlogin('', requiredModule, requiredPermits, action) )
			script = html;
		else
			script = '';
	}
	//----- If action is blank (i.e. not used)...
	else if (active == '')	// RZ.active blank or false (note: blank returns false)
	{
		// write html if logged into this webspace & permits for module
		active = RZlogin( html, requiredModule, requiredPermits, action );
		if (!active) script = '';
	}
	//----- If RZ.action is true, write html without checks
	else if ( active == 'true'						// RZ.active is 'true'
	|| (typeof active == 'boolean' && active) )		// RZ.active is true
	{
		document.write(html);
	}

	RZ.message = ''
	RZmsgAdd( "action", action )
    RZmsgAdd( "active", active )
	RZmsgAdd( "webspace", '\t' + RZ.webspace )
    RZmsgAdd( "module  ", '\t' + RZ.module )
    RZmsgAdd( "field   ", '\t' + RZ.field )
    RZmsgAdd( "linkname", '\t' + RZ.linkname )
    RZmsgAdd( "recordid", "\t(" + RZ.recordid + ")" )
    RZmsgAdd( "nexturl",  RZ.nexturl )
    RZmsgAdd( "popup",    RZ.popupwidth + "," + RZ.popupheight + "," + RZ.popupscroll )
    RZmsgAdd( "set",      RZ.set )
    RZmsgAdd( "img tag",  RZ.img )
    RZmsgAdd( "tagname",  RZ.tagname )
    RZmsgAdd( "caption",  RZ.caption )
    RZmsgAdd( "options",  options )
    RZmsgAdd( "generated html", html )
	RZtrace( "Action Button Processed", RZ.message );

	//----- clear RZ.* action arguments
	RZactionReset();

	//if (!active) script = ''
	return script;		//return generated script
}
/*---------------------------------------------------------------------------
Append "key: value" to RZ.message if value is not blank
Note: empty string same as false AND false matches \t & \t\t
----------------------------------------------------------------------------*/
function RZmsgAdd(key,val)
{
	//----- Following line avoids false matching empty string, \t & \t\t
	//		(also allow use of substring on true and false values)
	value = String(val)

	//----- Return if any empty value
	if(value==''
	|| value==null
	|| value=='\t()'					// empty recordid
	|| value=='0,0,' || value==',,'		// empty popup
	|| value=='\t' || value=='\t\t')
		return

	//----- Append : to key if value does not begin with a tab
	if (value.substring(0,1) != '\t') key += ': '

	//----- Append value to message
	RZ.message += key + value + '\n'
}
/*---------------------------------------------------------------------------
  (Internal Function) Resets RZ.* variables used as input variables for
  serveral functions called using RZ input parameters:
  	RZaction, RZlinkmanager, RZdelete

  This function is called during page setup and after arguments are used.
  This ensures values from one call are not carried forward to the next call.

  Parameters:
	  None  (no input parameters)

  Returns:
  No return value but the RZ input objects are set to an empty string
  * (see source code for current list of objects)
  ---------------------------------------------------------------------------*/
function RZactionReset()
{
	RZ.module=""; RZ.field=""; RZ.recordid=""; RZ.nexturl="";
	RZ.popupwidth=0; RZ.popupheight=0; RZ.popupscroll="";
	RZ.img=""; RZ.set=""; RZ.caption=""; RZ.tagname="";
	RZ.options=""; RZ.active=""; RZ.script="";
	RZ.rtefont=""; RZ.rtestyles = "";
	RZ.template=""; RZ.object="";
	RZ.linkname=""; RZ.linkmodule=""; RZ.linklevel="";
	RZ.filelocation=""; RZ.imagelocation="";
	RZ.version=""; RZ.nextversion="";
	RZ.imagemaxwidth=''; RZ.imagemaxheight=''; RZ.imagemaxbytes='';
	RZ.parentkey=''; RZ.windowname='';

	// optional link properties not initialized by RZTagSupport
	RZ.linkpathname = ''
	RZ.linknewsection = ''
	RZ.linkdisplaydefault = ''
	RZ.linktemplatedefault = ''
	RZ.linkfilenamedefault = ''
	RZ.linkautocontinue = ''
}

/*--------------------------------------------------------------------------
  Convert url to absolute url using the page location information determined
  during page initialization.
  Parameters:
  url :  url to convert
  --------------------------------------------------------------------------*/
function RZabsoluteUrl(url)
{
	if (url != '')
	{
		if ( !RZisAbsoluteUrl(url) )
		{
			if(url.substring(0,4) == 'www.')
				url = 'http://'+url;
			else
            {
                //DCO 02-22-2007\\
                //url = RZ.page.domain + RZ.page.pathname + '/' + url

                // domain + page pathname + baseprefix yeilds url to base channel
                url = RZ.page.domain + RZ.page.pathname + '/'
                	+ (RZ.baseurlprefix ? RZ.baseurlprefix : '')
                	+ url;

                while (url.indexOf("/../") > 0)
                {   //for each ../ remove it along with preceeding folder
                    var offsetEnd = url.indexOf("/../");
                    var offsetBeg = url.lastIndexOf("/",offsetEnd-1);
                    url = RZsubstring(url,0,offsetBeg)
                        + RZsubstring(url,offsetEnd+3);
                }
                //DCO 02-22-2007//
            }
		}
	}
	return url
}
/*---------------------------------------------------------------------------
is url absolute reference
----------------------------------------------------------------------------*/
function RZisAbsoluteUrl(url)
{
	if(url.substring(0,1) != '/'
	&& url.substring(0,7) != 'http://'
	&& url.substring(0,8) != 'https://')
		return false
	else
		return true
}
/*---------------------------------------------------------------------------
Determine Edit Page URL
----------------------------------------------------------------------------*/
function RZgetEditPageUrl( editPageUrl )
{
	var url = ""
	if (editPageUrl == 'EDITLISTURL')
		url = RZ.page.filename + '-editlist.jsp'
	else if (editPageUrl == 'EDITFORMURL')
		url = RZ.page.filename + '-editform.jsp'
	else
		url = editPageUrl

	//----- IE may need baseurlprefix
	//DCO 01-23-2014
	//if (RZ.MSIE && editPageUrl != '' && !RZisAbsoluteUrl(editPageUrl)

	// DJO 06-01-2016 - Can handle Edge with base url method just like IE
	if ((RZ.isMSEdge || RZ.MSIE || RZ.isIEstandardsMode)
	&& editPageUrl != '' && !RZisAbsoluteUrl(editPageUrl)
	&& typeof RZ.baseurlprefix != 'undefined' && RZ.baseurlprefix.length > 0)
		url = RZ.baseurlprefix + url;

	//----- if url contains a function call, replace with results
	//		function call is "non-letter a-z...(...);" semi-colon required
	url = url.replace(/([^\w])(\w+\(.*?\));/g,
	function (inputStr,nonWord,functionCall,semicolon)
	{
		return nonWord + eval(functionCall);
	});

	return url
}
/*---------------------------------------------------------------------------
Save return URL in cookie
TODO: store in control panel window
----------------------------------------------------------------------------*/
function RZsaveReturnUrl( returnUrlKey, url )
{
	if (arguments.length < 2) url = location.href	//DCO 10-20-2014
	//var url = location.href						//		 ''
	var hash = location.hash
	if (hash != '')
		url = url.substring(0,url.length-hash.length)
	if (RZ.trace)
		url += '#trace'
	if (RZ.debug)
		url += '#debug'
	RZsetCookieValue( returnUrlKey, url )
}
/*----------------------------------------------------------------------------
Call EDIT LIST page
----------------------------------------------------------------------------*/
/**
 *	DCO 03-07-2012: now pass single object argument to RZeditlist()
 *					object more flexible & readable
 *	Below function with named arguments retained for backward compatibility.
 **/
function RZcalleditlist(editPageUrl, width, height, scroll, set)
{
	var args = 		//args element names match RZ.??? names passed to RZaction()
	{				//argument names coorespond to legacy argument names
		nexturl     : editPageUrl,
		popupwidth  : width,
		popupheight : height,
		popupscroll : scroll,
		set         : set
	}
	return RZeditlist(args);
}
/**
 *	DCO 03-07-2012: new primary function passed single object argument whose
 *					element names match RZ.??? names passed to RZaction()
 *	Example call:
 *		RZeditlist( {nexturl: nexturl, popupwidth: popupwidth, ...} );
 **/
function RZeditlist (args)
{
	//----- Internal work variables
	var msg = '';

	//----- Following variables were previously passed as named arguments
	//		Local variables & args element names match RZ.??? names passed to RZaction()
	var nexturl     = args.nexturl     ? args.nexturl     : location.href;
	var popupwidth  = args.popupwidth  ? args.popupwidth  : '';
	var popupheight = args.popupheight ? args.popupheight : '';
	var popupscroll = args.popupscroll ? args.popupscroll : '';
	var set         = args.set         ? args.set         : '';

	//----- New input arguments never passed as named arguments
	var windowname = args.windowname ? args.windowname
				   : 'ListWindow';	//default

	//----- Call Developer defined onlist handler and quit if it returns false
	if (typeof window.onlist == 'function')
	{
		// update args with current values and pass to onedit handler
		// returns false to cancel delete, or object with below values:
		args.windowname = windowname;
		var returnValues = window.onlist(args);
		if (typeof returnValues == 'undefined' || returnValues == false)
		{
			window.status = 'Edit Canceled'
			return void(0)
		}
		else if (typeof(returnValues) == 'object')
		{
			if (returnValues.set) set = returnValues.set;
			if (returnValues.nexturl) nexturl = returnValues.nexturl;
			if (returnValues.windowname) windowname = returnValues.windowname;
		}
	}

	//----- Default nexturl if blank and adjust for IE if not absolute
	RZ.parameters = RZgetEditPageUrl(nexturl);
	RZaddUrlParameter( 'webspace=' + RZ.webspace )
	if (args.module && EZ.isFeature("EZ"))
	{
		RZaddUrlParameter( 'module=' + args.module )			//RZ.editmodule for editlist
		if (EZ && EZ.formfields && EZ.formfields.setupDropdown)
			set = EZ.formfields.setupDropdown(set, args.module); //check for EZdropdown class
	}
	RZsetParameter(set)
	RZaddUrlParameter( 'permissions_template=' + RZ.pagetemplatename )
	RZaddUrlParameter( 'permissions_parent=' + RZ.page_key )
	nexturl = RZ.parameters;

	RZtrace("Calling Edit List", RZ.message )

	RZ.editWindow = RZpopupUrl(windowname, nexturl, popupwidth, popupheight, popupscroll)
	if (RZ.editWindow == null)	//no popup properties defined
	{
		RZsaveReturnUrl( 'RZeditListReturnUrl' )
		document.location = nexturl;
	}
	return void(0)
}
/*---------------------------------------------------------------------------
----------------------------------------------------------------------------*/
function RZlistbegin( listid )
{
	RZ.nextseq.listid = listid + 1;
}
/*---------------------------------------------------------------------------
Called by closing list tag to remember the dependent template used by a link
tag inside the list.  See Dreamweaver help for more details.

TODO: consider triggering a warning if there is more than one list using the
same module which puts the template determination at risk.  Also RZTagSupport
might consider multple links and/or templates ambigous.

This function is also called with the linkname if a link manager link tag was
encountered inside the list.
----------------------------------------------------------------------------*/
function RZlinktemplate( module, template, listlinkname )
{
	if (module != '')
	{
		if (typeof RZ.linktemplates[module] == 'undefined'
		||  RZ.linktemplates[module] == '')
			RZ.linktemplates[module] = template
	}
}

/*---------------------------------------------------------------------------
Multi-level menu / page permissions support:

This function NOW called by RZaction to determine parentkey for level > 0.
For level 0, blank is returned because parent is determined by other means.
The parentkey is stored in RZ.linkpagekey by RZlinkmanager() which is called
via the script generated by the rz:link tag.
TODO: RZ.linkpagekey should probably be qualified by linkname.

This function WAS called by RZlinkmanager() and RZaction() to remember the 1st
recordid encountered at each level change for use by edit buttons.

This scheme is required to pass information from link tag to edit button
processing because the link tag may occur after the button in the html.
----------------------------------------------------------------------------*/
function RZlevelQualifier(linkname,level,recordid)
{
	var parentkey = ''

	if (isNaN(level)) return '';
	level = parseInt(level)

	/* deprecated but strategy may be useful in the future
	//----- If recordid not a number return
	if (isNaN(recordid)) return '';

	if (typeof RZ.linklevelmemory == 'undefined')
		RZ.linklevelmemory = -1

	//----- Clear level qualifier whenever level moves up
	if (level < RZ.linklevelmemory)
	{
		RZ.linklevelmemory = level
		RZ.levelrecordid[level] == null
	}

	//----- Save page_key of prior menu item when level moves down
	else if (level > RZ.linklevelmemory)
	{
		RZ.linklevelmemory = level
		RZ.levelrecordid[level] = recordid

	}
	*/

	//----- Get above level pagekey if level > 0
	if (level > 0)
		parentkey = RZ.linkpagekey[level-1]

	return parentkey
}
/*----------------------------------------------------------------------------
Call EDIT FORM page
----------------------------------------------------------------------------*/
/* Same as RZedit (retained for backward compatibility) */
function RZcallEditForm(recordid, editPageUrl, width,height,scroll, set)
{
	return RZedit(recordid, editPageUrl, width,height,scroll, set);
}
/* Same as RZedit (retained for backward compatibility) */
function RZcalleditform(recordid, editPageUrl, width,height,scroll, set, module, field, linkname)
{
	return RZedit(recordid, editPageUrl, width,height,scroll, set, module, field, linkname);
}
/**
* 01-20-2014 DCO: moved from setup_editlist_javascript.jsp
* Probably only called by NEW and EDIT ITEM buttons created with DW before 02-29-01.
**/
function RZrecordEdit( recordID, editPageUrl ){
  RZcallEditForm ( recordID, editPageUrl )
}
function RZrecordNew( editPageUrl ){
  RZcallEditForm ( 'new', editPageUrl )
}
/**
 *	DCO 03-07-2012: now pass single object argument to RZeditform()
 *					way too many arguments; object more flexible & readable
 *	Below function with named arguments retained for backward compatibility.
 **/
function RZedit(recordid, editPageUrl, width, height, scroll, set, module, field, linkname, action, template, level, parentkey)
{
	var args = 		//args element names match to RZ.??? names passed to RZaction()
	{				//argument names coorespond to legacy argument names
		recordid    : recordid,
		nexturl     : editPageUrl,
		popupwidth  : width,
		popupheight : height,
		popupscroll : scroll,
		set         : set,
		module      : module,
		field       : field,
		linkname    : linkname,
		action      : action,
		template    : template,
		level       : level,
		parentkey   : parentkey
	}
	return RZeditform(args);
}
/**
 *	DCO 03-07-2012: new primary function passed single object argument whose
 *					element names match RZ.??? names passed to RZaction()
 *	Example call:
 *		RZeditform( {recordid: nexturl, popupwidth: popupwidth, ...} );
 **/
function RZeditform(args)
{
	//----- Internal work variables
	var str = '';
	var msg = '';

	//----- Following variables were previously passed as (optional)named arguments.
	//		Local variables & args element names match RZ.??? names passed to RZaction()
	var recordid    = args.recordid    ? args.recordid : '';
	var nexturl     = args.nexturl     ? args.nexturl : '';
	var popupwidth  = args.popupwidth  ? args.popupwidth : ''
	var popupheight = args.popupheight ? args.popupheight : ''
	var popupscroll = args.popupscroll ? args.popupscroll : ''
	var set         = args.set         ? args.set : ''
	var module      = args.module      ? args.module : ''
	var field       = args.field       ? args.field  : ''
	var linkname    = args.linkname    ? args.linkname : ''
	var action      = args.action      ? args.action : ''
	var template    = args.template    ? args.template : ''
	var level       = args.level       ? args.level : ''
	var parentkey   = args.parentkey   ? args.parentkey : ''

	//----- New input arguments never passed as named arguments
	var windowname = args.windowname ? args.windowname
				   : (window.name == 'EditWindow' ? 'EditWindowPopup' : 'EditWindow');

	var samplearg  = args.samplearg  ? args.samplearg : ''; //default is ''

	//----- Processing...
	RZtrace( "Edit Form Button Clicked", "Record Id: (" + recordid + ")" );

	//----- Call Developer defined onedit handler and quit if it returns false
	if (typeof window.onedit == 'function')
	{
		// update args with current values and pass to onedit handler
		// returns false to cancel delete, or object with below values:
		args.windowname = windowname;
		var returnValues = window.onedit(args);
		if (typeof returnValues == 'undefined' || returnValues == false)
		{
			window.status = 'Edit Canceled'
			return void(0)
		}
		else if (typeof(returnValues) == 'object')
		{
			if (returnValues.set) set = returnValues.set;
			if (returnValues.nexturl) nexturl = returnValues.nexturl;
			if (returnValues.windowname) windowname = returnValues.windowname;
		}
	}

	//----- Apply baseurl prefix to nexturl if IE browser
	var url = RZgetEditPageUrl(nexturl);
	if (linkname == '')
	{
		RZ.message = ''
		var nextseqKey = module + '_' + level;	//level is listid
		if (action == 'newitem' && RZ.nextseq.modules[nextseqKey]
		&& (','+set).indexOf(','+ module + '.' + RZ.nextseq.modules[nextseqKey].field) == -1)
		{
			str = module + '.' + RZ.nextseq.modules[nextseqKey].field + '=' + RZ.nextseq.modules[nextseqKey].seq;
			if (set) set += ',';
			set += str;
		}

		RZsetEditParameters(module,field,set)

		recordidParameter = RZsetEditRecordParameter(recordid)
		if (recordidParameter == '*ERROR*') return void(0)

		//----- Page Permissions processing (non-link manager)
		if (RZ.permissions_module != '')
		{
			if (action == 'new' || action == 'newitem'
			|| action == 'edit' || action == 'edititem')
			{
				msg = RZpermissionWarning(action,template,module)
				if (msg != '')
					if (!RZconfirm(msg)) return

				if (template == '')
					if (typeof RZ.linktemplates[module] != 'undefined')
						template = RZ.linktemplates[module];

				// When template passed on url, RZsave will include template & parent page_key
				// in the save record XML request (template defined by new & edit buttons).
				if (template != '' && template != '*none*')
					RZaddUrlParameter( 'permissions_template=' + template )
			}
			else if (action == 'editform' || action == 'editpage' || action == 'editglobal')
			{
				// edit this page button(s) do not define parents because the edited recordid
				// is usually not the dependent record module.  Another issue is parent passed
				// below is the current page when links are added and would not be correct for
				// this dependent page.
				//RZaddUrlParameter( 'permissions_template=' + RZ.pagetemplatename )
			}

			//----- Always pass parent_key in case the edit form adds links via the RTE.
			//		NOTE: Don't add parent if already on url but this is a very specific scenario.
			if (RZ.pagetype == 'template' && url.indexOf("permissions_parent=") == -1)
				RZaddUrlParameter( 'permissions_parent=' + RZ.page_key )
			else	//editlist page
				RZaddUrlParameter( 'permissions_parent=' + RZ.permissions_parent )

			//----- Pass caller page key to determine workflowname
			if (RZ.page_key != '')
				RZaddUrlParameter( 'page_key=' + RZ.page_key )
		}

		if (url.indexOf('?') != -1 && RZ.parameters.substr(0,1) == '?')
			RZ.parameters = '&' + RZ.parameters.substring(1);
		url += RZ.parameters + recordidParameter
		RZtrace('Edit Form url parameters',RZ.message)
	}

	//----- Check for link manager parameters
	else
	{
		if (typeof RZ.link[linkname] != 'object')
			msg = 'Specified Link Name ('+linkname+') Does Not Exist or is Not\n'
				+ 'Properly Defined (make sure the ' + linkname + ' link exists).\n'
				+ 'The link tag defines required options used by Link Manager\n\n'
				+ 'If the list is not displaying a message when empty,\n'
				+ '(i.e. noemptylistmessage option set) a copy of the\n'
				+ 'link tag must be inside the list header.\n\n'
				+ 'If link tag exists make sure its name matches the name specified\n'
				+ 'specified on this button.'

		if (msg == '' && module == '')
			msg = 'Link Name ('+linkname+') associated with this action has\n'
				+ 'not specified a module.\n\n'
				+ 'Link Manager can not be called without knowing the module\n'
				+ '(check associated link and make sure a module is specified).'

		//----- If errors display message and return
		if (msg != '' )
		{
			RZalert(msg);
			return void(0);
		}

		//----- Set all link manager properties including window size and url
		//		(RZsetLinkManagerProperties calls RZsetEditParameters)
		//
		RZsetLinkManagerProperties(linkname,module,field,recordid,set,url)
		recordidParameter = RZsetEditRecordParameter(recordid)
		if (recordidParameter == '*ERROR*') return void(0)

		//----- Pass user popup window values to link manager on url
		RZ.link[linkname].popupwidth = popupwidth
		RZ.link[linkname].popupheight = popupheight
		RZ.link[linkname].popupscroll = popupscroll
		RZ.link[linkname].nexturl = RZabsoluteUrl( url )

		//----- Get link manager popup window properties
		popupwidth  = RZ.link[linkname].linkwidth
		popupheight = RZ.link[linkname].linkheight
		popupscroll = RZ.link[linkname].linkscroll;
		url    = RZ.link[linkname].linkurl + recordidParameter
			   + (RZ.linkmanagertest ? '#test' : '');

		//----- Pass linkparent
		var parent = ''
		if (level == '')
		{
			if (typeof RZ.link[linkname].linkparent != 'undefined')
				parent = RZ.link[linkname].linkparent
			if (parent == '')
				parent = RZ.page_key;
		}
		else	//multi-level processing
		{
			if (parentkey != '')	//if passed as argument
				parent = parentkey;
			else if ( isNaN(level) )
			{
				msg = 'Non-numberic level specified for this button.\n\n'
				    + 'Multi-level menu relationships can not be maintained\n'
				    + '(check button and specify a numeric level).'
				if (!RZconfirm(msg)) return
			}
			else if (action == 'new' || action == 'newitem')
			{
				// for existing level, linkparentnew should be defined
				if(typeof RZ.linkparentnew[linkname] != 'undefined'
				&& typeof RZ.linkparentnew[linkname][level] != 'undefined')
					parent = RZ.linkparentnew[linkname][level]

				// new level; use last item recordid at prior level for parent
				else if (eval(level) != 0)	//TODO: should be min level (not 0)
					parent = RZ.linkpagekey[level-1];	//undefined caught below
				else
					parent = RZ.permissions_parent
			}
			else if (action == 'edit' || action == 'edititem')
			{
				if (eval(level) == 0)
				{
					if(typeof RZ.linkparentnew[linkname] != 'undefined'
					&& typeof RZ.linkparentnew[linkname][level] != 'undefined')
						parent = RZ.linkparentnew[linkname][level]
				}
				else	//level > 0
					parent = parentkey;		//undefined caught below
			}
		}		// end of multi-level processing

		//----- Must have a parent when page permissions are enabled
		if (RZ.permissions_module != ''
		&& (typeof parent == 'undefined' || parent == 'undefined' || parent == ''))
		{
			msg = 'this'
			if (action.indexOf('new') == 0) msg = 'new'
			msg = 'This button is not configured for the '+msg+' page to properly INHERIT\n'
			    + 'page permissions because the parent is unknown'
			if (level != '') msg += ' for level ' + level
			msg +='.\n\n'
			    + 'Permissions may need to be explicitly defined on the page\n'
			    + 'associated with this link.'
			//if ( !RZconfirm(msg) ) return
		}

		if (parent != '' && parent != 'undefined')
			RZ.link[linkname].linkparent = parent

		if (!RZ.link[linkname].linkseq && RZ.nextseq.linknames[linkname])
			RZ.link[linkname].linkseq = RZ.nextseq.linknames[linkname].seq;
	}

	RZtrace("Calling Edit Form", "URL: " + url )

	//----- Suppress empty url parameters
	if (url.indexOf('/revize/util/linkmanager') == 0)
	{
		var urlFull = url;
		url = url.replace(/\&[^\&]*=(?=\&)/g,'');
		if (urlFull != url)
			RZtrace("Calling linkmanager (empty parameters deleted)", "URL: " + url )
	}

	//----- Call popup window if requested else goto Edit Page URL
	RZ.editWindow = RZpopupUrl(windowname, url, popupwidth, popupheight, popupscroll)
	if (RZ.editWindow == null)	//no popup properties
	{
		RZsaveReturnUrl( 'RZeditFormReturnUrl' )
		var pathfilename = RZisPopupCall() ? RZgetfileinfo(RZabsoluteUrl(url)).pathfilename : '';
		RZsetcookie('RZnotPopup', pathfilename, RZ.webspace);
		document.location = url
	}
	//----- If popup call, clear RZeditFormReturnUrl cookie //DCO 10-20-2014
	else
		RZsaveReturnUrl( 'RZeditFormReturnUrl', '' );

	//----- Suspend processing if called as submit
	return void(0);
}
/*---------------------------------------------------------------------------
(Internal Function) Display page permission warning
Internal: Diagnostics Support
----------------------------------------------------------------------------*/
function RZlinkWithoutParent(module,recordid,code)
{
	if (typeof RZ.noparent[module] == 'undefined')
		RZ.noparent[module] = new Object();
	RZ.noparent[module][recordid] = code

	code = "'" + code + "'"
	var html = '<a href="javascript:RZpagemessage(' + code + ')">'
	         + '<img src="/revize/images/warning-parent.gif" border="0"></a>'
	RZlogin(html)
}
/*---------------------------------------------------------------------------
(Internal Function) Display message regarding button configuration issue
Internal: Diagnostics Support
----------------------------------------------------------------------------*/
function RZiconMessage(action,index)
{
	module = RZ.icons[index]
	var msg = RZpermissionWarning(action,'',module)
	if (msg != '')
		if (!RZconfirm(msg)) return
}
/*---------------------------------------------------------------------------
(Internal Function) Display warning if button not configured correctly
Internal: Diagnostics Support
----------------------------------------------------------------------------*/
function RZpermissionWarning(action,template,module)
{
	var msg = '';
	var buttonName = ''
	if (RZsubstring(action,0,3).toLowerCase() == 'new')
		buttonName = 'NEW '
	else if (RZsubstring(action,0,4).toLowerCase() == 'edit')
		buttonName = 'EDIT '

	// Get dependent template for page permissions
	if (template == '')
	{
		if (module == '')	//test by clearing RZ.template and RZ.module on button
		{
			msg = 'The template used to create the new page could not be \n'
				+ 'determined because no module was specified on the '
				+ buttonName + 'button.'
			}

		// Get template processed from the list associated with the specified module
		else if (typeof RZ.linktemplates[module] != 'undefined')
			template = RZ.linktemplates[module];

		else				//test by specifing incorrect module on button
			msg = 'The template used to create new pages can not be determined\n'
				+ 'because there does not appear to be any lists associated with\n'
				+ 'with the currently specified module: ' + module + '.'
	}
	if (msg == '' && template == '')	//test by clearing RZ.template on button
		msg = 'The template used to create new pages can not be determined\n'
			+ 'because there are no links in the list associated with the\n'
			+ 'currently specified module: ' + module + '\n\n'
			+ 'The developer may need to specify the template on the ' + buttonName + 'button\n'
			+ 'If pages are not created when list items are added, a template of none\n'
			+ 'should be specified.'

	// template not required for single record edits
	if (template == '*none*'
	|| action == 'editform' || action == 'editpage' || action == 'editglobal')
		msg = ''

	// Warn content editor about potential permissions inheritance issues
	if (msg != '')
	{
		if (buttonName == 'NEW ')
		{
			msg = 'If this NEW button creates a new page, that page will NOT\n'
				+ 'inherit permissions for the following reason:\n\n'
				+ msg
			msg=''
		}
		else if ( !RZcheckoptions(RZ.permissions_options,"warnings") )
			msg = ''	//no warning if migration option not enabled
		else
			msg = 'The EDIT button is not configured to properly pass page permissions\n'
				+ 'to the page created when this item was added to the associated list.\n\n'
				+ 'The template must be known to assign a parent to child pages.\n\n'
				+ msg
	}
	return msg
}
/*---------------------------------------------------------------------------
(Internal Function) Sets general edit url parameters used with or w/o link manager.
Internal: Update Record Support
----------------------------------------------------------------------------*/
function RZsetEditParameters(module,field,set)
{
	RZ.parameters = ''

	//----- Append webspace parameter
	RZaddUrlParameter( 'webspace=' + RZ.webspace )

	/* Was considered for page navigation variables
	//----- Template name used to create pageid
	if (RZ.pagetemplatename	!= '')
		RZaddUrlParameter( 'template=' + RZ.pagetemplatename )
	*/

	//----- Append module & field
	if (module!='')
		RZaddUrlParameter( 'module=' + module )	//used by link manager
	if (field!='')
		RZaddUrlParameter( 'field=' + field )		//future


	RZsetParameter(set);	//Append set parameters
}
/*---------------------------------------------------------------------------
(Internal Function) Adds the RZ.set values to the url
Called by RZsetEditParameters() & RZcalleditlist()
Internal: Update Record Support
----------------------------------------------------------------------------*/
function RZsetParameter(set)
{
	RZaddUrlParameter( 'pagetemplateid=' + RZ.pagetemplateid );
	RZaddUrlParameter( 'linkedmoduleid=' + RZ.pagemoduleid );
	RZaddUrlParameter( 'linkedrecordid=' + RZ.pagerecordid );
	//----- Append set parameters
	if (set != '')
	{
		set = set.split('pagerecord._recordid').join( RZ.editrecordid )
		RZaddUrlParameter( 'set=' + escape(set) )
	}
}
/*---------------------------------------------------------------------------
(Internal Function) Sets recordid parameter used with or w/o link manager.
Internal: Update Record Support
----------------------------------------------------------------------------*/
function RZsetEditRecordParameter(recordid)
{
	var recordidParameter = '*ERROR*'

	if (recordid == 'new')
		recordidParameter = '&new'

	//----- Calculated value
	else if (recordid.length>0 && recordid.substring(recordid.length-1)==';')
		recordidParameter = '&recordid=' + eval(recordid)

	//----- If rz.fetch returned an error message as text
	//		(use alert because it may not be design flaw)
	else if (recordid != '' && isNaN(recordid))
		alert( 'Revize Button specifies Invalid Record Id: \n' + recordid )

	else if (recordid != '')
		recordidParameter = '&recordid=' + recordid

	else
		recordidParameter = ''

	return recordidParameter
}
/*---------------------------------------------------------------------------
(Internal Function) Called from above and also from snippet_helper_editform.js
before calling RTE.

Computed window size just fits 800 X 600 for all options.
Create link object if undefined and use default options if undefined.

Internal: Link Manager Support
----------------------------------------------------------------------------*/
function RZsetLinkManagerProperties(linkname,module,field,recordid,set,url)
{
	//----- Set general edit Url paramters
	RZ.message = ''
	RZsetEditParameters(module,field,set)

	//----- If link object not yet defined, define it
	if (typeof RZ.link[linkname] == 'undefined') RZ.link[linkname] = new Object()

	//----- Get current options (use default values if undefined)
	var options = RZ.link[linkname].options
	if (typeof options == 'undefined') options = 'url,template,file'
	RZ.link[linkname].options = options

	if (typeof RZ.linkoptions != 'undefined' && RZ.linkoptions != '')
	RZ.link[linkname].options = RZ.linkoptions

	//----- Following properties are used by jsp code and must be passed on url
	RZaddUrlParameter( "linkname=" + linkname )
	RZsetLinkUrlParameter(linkname,'options')
	RZaddUrlParameter( "nexturl=" + RZabsoluteUrl(url) )

	//----- Template specfic properties (DW only defines template property)
	RZdefaultLinkParameter(linkname,'template')			//blank for all templates
	RZdefaultLinkParameter(linkname,'editform')			//template specific editforms
	RZdefaultLinkParameter(linkname,'modulelinkfield')	//back link from dependent module

	//----- TODO: Following properties are now passed on url (but should NOT)
	//		(they are not used by jsp code except to retrieve values for js)
	RZdefaultLinkParameter(linkname,'filelocation')		//file manager location (supported by RTE)
	RZdefaultLinkParameter(linkname,'fileextension')	//file manager extensions

	//----- TODO: Following properties are now passed on url (but probably NOT even used)
	RZdefaultLinkParameter(linkname,'imagelocation')	//image manager location
	RZdefaultLinkParameter(linkname,'imageextension')	//image manager extensions

	//----- Following properties NOT used by jsp code are accessed from the opener window
	//		They can be set on RZ.link.<linkname>.<property_below>
	RZdefaultLinkOption(linkname,'linkpathname')		//prepended pathname (supported by RTE)
	RZdefaultLinkOption(linkname,'linknewsection')		//list of templates that can start new sections

	RZdefaultLinkOption(linkname,'linkdisplaydefault')	//default linkdisplay
	RZdefaultLinkOption(linkname,'linktemplatedefault')	//default template
	RZdefaultLinkOption(linkname,'linkfilenamedefault')	//default path/filename
	RZdefaultLinkOption(linkname,'linkautocontinue')	//Auto click Continue button
	RZdefaultLinkOption(linkname,'nexturl')				//next editform for all templates
	RZdefaultLinkOption(linkname,'set')					//Set passed to dependent module
	RZdefaultLinkOption(linkname,'linkparent')			//parent that added link
	RZdefaultLinkOption(linkname,'linkmodule')			//list module

	//----- Determine link parent (defined by new or edit button - single level menu)
	var linkparent = RZ.link[linkname].linkparent
	if (linkparent == '')
	{
		if (RZ.permissions_parent != '')	//this page is surogate parent (e.g. editlist)
			linkparent = RZ.permissions_parent
		else
			linkparent = RZ.page_key
	}
	RZ.link[linkname].linkparent = linkparent

	//----- Convert nexturl to absolute url (some RTE calls have property defined at this time)
	var nexturl = RZ.link[linkname].nexturl
	if (nexturl != '')
		RZ.link[linkname].nexturl = RZabsoluteUrl(nexturl)

	//----- Compute link manager window size
	var width = 600
	var height = 240 		// base height IE or NS (includes target)
	var testopt = ',' + options + ','
	if (testopt.indexOf(',none,') != -1) height += 25
	if (testopt.indexOf(',url,') != -1) height += 40
	if (testopt.indexOf(',file,') != -1) height += 45
	if (testopt.indexOf(',template,') != -1)
	{
		height += 220 + 40;		//add 40 for section prompt
		if (RZ.isnavigator) height += 25
	}

	//----- Store computed values in the link object itself
	RZ.link[linkname].linkwidth   = width
	RZ.link[linkname].linkheight  = height
	RZ.link[linkname].linkscroll  = 'yes'

	//----- Store link manager url with parameters
	RZ.link[linkname].linkurl = '/revize/util/linkmanager_frame.html' + RZ.parameters

	//----- Display all link manager properties on trace
	RZtrace('Link Manager linkname (' + linkname + ') url parameters',RZ.message)
	var msg = ''
	for (var i in RZ.link[linkname])
		msg += i + '  =  ' + RZ.link[linkname][i] + '\n'
	RZtrace('RZsetLinkManagerProperties() linkname (' + linkname + ')',msg)
}
/*---------------------------------------------------------------------------
(Internal Function)Save all link manager information for this link in a new
object that is referenced at run time by new and edit buttons.

This function is called by the link object to define link properties for use by
new and edit buttons.  A separate link object is defined for each linkname so
these properties are available when the new or edit button is clicked. The new
and edit buttons can then simply supply the linkname to access these properties.

See RZTagSupport.java for more information on the link manager calling process.

**IMPORTANT**
When changing functionality, please update Dreamweaver help file:
	RevizePermissionsWorks-Help.htm (contains high level description)

Internal: Link Manager / Page Permissions Support
----------------------------------------------------------------------------*/
function RZlinkmanager( linkname, linkmodule, linkrecordid, linklevel,
	                    linkpagekey, linkparent )
{
	if (typeof linkname == 'undefined') linkname = RZ.linkname
	if (typeof linkmodule == 'undefined') linkmodule = ''
	if (typeof recordid == 'undefined') recordid = ''
	if (typeof linklevel == 'undefined') linklevel = ''
	if (typeof linkpagekey == 'undefined') linkpagekey = ''
	if (typeof linkparent == 'undefined') linkparent = ''
	if (linkparent.indexOf('This is a STANDARD text field:') == 0) linkparent = '';

	//----- For multi-level link manager lists...
	if (linkmodule != '' && linklevel != '')
	{
		//----- Save first non-blank linkparent for this level
		if (typeof RZ.linkparentnew[linkname] == 'undefined')
			RZ.linkparentnew[linkname] = new Object();

		if (typeof RZ.linkparentreset[linklevel] == 'undefined')
			RZ.linkparentreset[linklevel] = 'reset'

		if (typeof RZ.linkparentnew[linkname][linklevel] == 'undefined'
		|| RZ.linkparentreset[linklevel] == 'reset')
		{
			if (linkparent == '') linkparent = RZ.permissions_parent
			RZ.linkparentnew[linkname][linklevel] = linkparent
			RZ.linkparentreset[linklevel] = ''
		}

		//----- Indicate new next higher level linkparent can be reset
		var nextlevel = RZinteger(linklevel) + 1
		RZ.linkparentreset[nextlevel] = 'reset'

		//----- Save most recent pagekey (used to get parent for new level button)
		RZ.linkpagekey[linklevel] = linkpagekey
		if (typeof RZ.linkpagekey[linklevel+1] != 'undefined')
			RZ.linkpagekey[linklevel+1] = 'undefined';	//clear lower level value
	}

	//----- Create link object if not defined to hold module and parent
	if (typeof RZ.link[linkname] == 'undefined')
	{
		RZ.link[linkname] = new Object()
		RZ.link[linkname].linkparent = ''
		RZ.link[linkname].linkmodule = ''
	}

	//----- Set linkparent to 1st non-blank parent encountered (used for single level links)
	//		When no linkparent is set, the page_key is used when new or edit button clicked.
	if (linkparent != '' && RZ.link[linkname].linkparent == '')
		RZ.link[linkname].linkparent = linkparent

	//----- Save additional link properties
	if(RZ.linkname != '')
	{

		if (RZ.link[linkname].linkmodule == '' && linkmodule != '')
			RZ.link[linkname].linkmodule = linkmodule;

		RZ.link[RZ.linkname].options = RZ.linkoptions
		RZ.link[RZ.linkname].filelocation = RZ.linkfilelocation
		RZ.link[RZ.linkname].fileextension = RZ.linkfileextension
		RZ.link[RZ.linkname].imagelocation = RZ.linkimagelocation
		RZ.link[RZ.linkname].imageextension = RZ.linkimageextension

		RZ.link[RZ.linkname].template = RZ.linktemplate
		RZ.link[RZ.linkname].editform = RZ.linkeditform
		RZ.link[RZ.linkname].modulelinkfield = RZ.linkmodulelinkfield

		//----- Properties not passed on url
		//		TODO: automatically pick up all options starting with link
		RZ.link[RZ.linkname].linkpathname = RZ.linkpathname
		RZ.link[RZ.linkname].linknewsection = RZ.linknewsection
		RZ.link[RZ.linkname].linkdisplaydefault = RZ.linkdisplaydefault
		RZ.link[RZ.linkname].linktemplatedefault = RZ.linktemplatedefault
		RZ.link[RZ.linkname].linkfilenamedefault = RZ.linkfilenamedefault
		RZ.link[RZ.linkname].linkautocontinue = RZ.linkautocontinue
	}

	//----- clear RZ.* action arguments
	RZactionReset();
}
/*---------------------------------------------------------------------------
(Internal Function) Call RZdefaultLinkOption then add to RZ.parameters
Internal: Link Manager Support
----------------------------------------------------------------------------*/
function RZdefaultLinkParameter(linkname,property)
{
	RZdefaultLinkOption(linkname,property)
	RZsetLinkUrlParameter(linkname,property)
}
/*---------------------------------------------------------------------------
(Internal Function) If property is undefined, set to blank
Internal: Link Manager Support
----------------------------------------------------------------------------*/
function RZdefaultLinkOption(linkname,property)
{
	if (typeof RZ.link[linkname][property] == 'undefined')
		RZ.link[linkname][property] = ''

	//RZtrace('RZdefaultLinkOption('+linkname+'):' + property
	//       + '<br>-->' +(RZ.link[linkname][property])+ '<--')
}
/*---------------------------------------------------------------------------
(Internal Function) Build link manager url parameters using link properties
presumably defined elsewhere on the page if property is defined and not blank.

Internal: Link Manager Support
----------------------------------------------------------------------------*/
function RZsetLinkUrlParameter(linkname,property)
{
	if (typeof RZ.link[linkname][property] != 'undefined')
	{
		var value = RZ.link[linkname][property]
		if (value != '')
			RZaddUrlParameter( 'link' + property + '=' + value )
	}
}
/*---------------------------------------------------------------------------
Adds jsp parameter to url
* parameter appended RZ.parameters with preceeding ? or & character
* parameter appended to RZ.message for output by RZtrace()

Parameters:
	parameter-	url parameter of the form key = value
----------------------------------------------------------------------------*/
function RZaddUrlParameter(parameter)
{
	//----- Build url parameter
	if (RZ.parameters.indexOf('?') == -1)
		RZ.parameters += '?' + parameter
	else
		RZ.parameters += '&' + parameter

	//----- Build trace message
	RZ.message += unescape(parameter) + '\n'
}

/* Same as: RZback (retained for backward compatibility) */
function RZpriorPage(returnUrlKey) { RZback(returnUrlKey) }
/*-------------------------------------------------------------------------
  Return to calling page (normally called by cancel button)

  If popupcall, close window and refresh if not an editform

  If returnUrlKey ends with a semicolon, assume it is an expression for url

  Otherwise, return to PRIOR PAGE using the following steps
  * If URL defined in cookie, use it (returnUrlKey specifies cookie name)
  * If not edit list page, use history
  * If RZ.page.home is not blank, use it
  * Make trace entry and stay on current page

  Parameters:
  returnUrlKey-	if specified, one of the following:
                1) expression containing url of page to get control
                2) if expression, must end with semicolon
                3) Cookie name containing calling page url
  win-			Optional specifies the current window (default is window)
  Returns:
  There is currently no value returned
-------------------------------------------------------------------------*/
function RZback(returnUrlKey,win)
{
	if (typeof win == 'undefined') win = window;
	if (!returnUrlKey)
		returnUrlKey = (RZ.pagetype == 'editlist' ? 'RZeditListReturnUrl' : 'RZeditFormReturnUrl');

	//----- If opener and access to opener
	if ( RZisPopupCall(win) )
	{
		//----- Added for LinkManager RTE interface (but never refresh editform)
		if(RZ.parent.opener.RZ != 'undefined'
		&& RZ.parent.opener.RZ != null
		&& RZ.parent.opener.RZ.pagetype != 'editform')
			win.opener.location.reload(true);
		win.close()
		return;
	}

	//----- Not a popup call
	var returnUrl = ''
	if (RZright(returnUrlKey,1) == ';')		//url passed as variable / equation
		returnUrl = eval( returnUrlKey )
	else									//url read from cookie
	{
		returnUrl = RZgetCookieValue(returnUrlKey)
		if (returnUrl != "")
		{	// if cookie defined
			RZsetCookieValue(returnUrlKey,"")
		}else
		{	// when cookie not defined
			if (RZ.pagetype == 'editform')
			{
				returnUrl = ''
				history.go(-1); // use history if not edit list
			}
			else
			{
				returnUrl = RZ.page.home // use home if edit list
			}
		}
	}

	if (returnUrl != null && returnUrl != '')
		RZ.parent.location = returnUrl
	else
		RZtrace('snipper_helper: RZback('+returnUrlKey+')',
				'No Prior URL could be determined')
}
/*--------------------------------------------------------------------------
(Internal Function) Determine if this page was called as a popup.

Internal: Used by Save & Cancel functions to return to calling window.

Returns: true if opener with RZ.pagetype variable defined; otherwise false
--------------------------------------------------------------------------*/
function RZisPopupCall(win, isStrict)
{
	if (typeof win == 'undefined') win = window

	if (win.parent.opener
	&& RZwinaccess(win.parent.opener)
	&& typeof win.parent.opener != 'undefined'
	&& typeof win.parent.opener != 'undefined'
	&& typeof win.parent.opener.RZ != 'undefined'	//opener is a Revize page
	&& win.parent.opener.RZ != null
	&& typeof RZ.parent.opener.RZ.pagetype != 'undefined'
	&& typeof RZ.parent.opener.RZ.editWindow != 'undefined'
	&& win.parent.opener.RZ.editWindow == win.parent
	&& RZisPopupCallStrict())
	{
		return true;
	}
	//----- If opened from workflow task window
	//		TODO: probably should always assume popup if opener exists but too risky w/o
	//		more analysis and serious regression testing.
	else if (win.parent.name == 'Revize_Edit_Record' && typeof win.opener != 'undefined')
		return true;

	// DCO 10-20-2014:
	// Below code can cause js error in RZback() because this is the wrong place to test
	// for callback function in RZnextsavereturn; RZsave() should test. Moot point when
	// RZ.callback used because RZ.nextsavereturn never contains paraenthesis and RZsave()
	// does not rely solely on isPopup() to post save to itself.

	//----- If callback function specified after save
	else if(RZ.nextsavereturn
	&& RZ.nextsavereturn.indexOf('(') > 0 && RZ.nextsavereturn.indexOf(')') > 0)
		return true;

	else
		return false;
	//______________________________________________________________________
	/**
	 *	(Internal function) originally added for email notify
	 *
	 *	Check if opener and referrer pathnames match -- Prevents editform
	 *	from closing popup editlist when editform is not called as popup.
	 *
	 *	Probably always valid test but as safety, only checks if isStrict
	 *	specified and EZ feature active otherwise returns true.
	 */
	function RZisPopupCallStrict()
	{
		if (!isStrict || !EZ.isFeature("EZ")) return true;
		if (window.dialogArguments) return true;

		return RZgetFileInfo(location.href).pathfilename != RZgetcookie('RZnotPopup',RZ.webspace)
	}
}
/*---------------------------------------------------------------------------
Following function is called by the DELETE ITEM button
Deleted specified recordid after prompting
----------------------------------------------------------------------------*/
/* Same as RZdelete (retained for backward compatibility) */
function RZrecordDelete( recordid, module ) { RZdelete( recordid, module ) }
/**
 *	DCO 03-07-2012: Can now be called with single object argument whose
 *					element names match RZ.??? names passed to RZaction()
 *	Example call:
 *		RZdelete( {recordid: recordid, module: module, ...} );
 *
 *	DO NOT add new named arguments; below retained for backward compatibility.
 **/
function RZdelete(recordid, module, nexturl, win)
{
	//----- Internal work variables
	var msg = '';

	//----- If first argument is an object, it contains all input arguments as elements.
	//		Local variable names & args element names match RZ.??? passed to RZaction()
	var args = recordid;	//1st argument

	// If first argument not object, create args object containing legacy named arguments
	if (typeof(args) != 'object')
	{
		args = {};
		args.recordid = recordid ? recordid : '';
		args.module   = module   ? module   : '';
		args.nexturl  = nexturl  ? nexturl  : '';
		args.win      = win      ? win      : '';
	}

	//----- Initialize legacy local variables originally passed as named arguments
	recordid = args.recordid ? args.recordid : '';
	module   = args.module   ? args.module   : '';
	win      = args.win      ? args.win      : window;
	nexturl  = args.nexturl  ? args.nexturl  : win.location.href;

	//----- New input arguments never passed as named arguments
	var samplearg = args.samplearg ? args.samplearg : '';	//default '' is in the example

	//----- Processing...
	RZ.message = "WebSpace: " + RZ.webspace + "\n"
			 + "Module: " + module + "\n"
			 + "Record Id: (" + recordid + ")\n"
			 + "Redirect Url: " + nexturl + "\n"
	RZtrace( "Delete Item Clicked", RZ.message );

	if (isNaN(recordid))
	{
		win.alert( 'Invalid Record Id: ' + recordid )
		return void(0)
	}
	else if (recordid=='')
	{
		win.alert( 'Record Not Specified (Id is Blank)' )
		return void(0)
	}
	var deletemsg='Are you sure you want to delete this link?\n\n'
	+'Keep in mind that if this link or page is not being referenced from any other page from your website'
	+' then DELETE will physically delete the page record from the database and there would be no way to restore'
	+' it if you change your mind. You want to proceed?'
	//if (!win.confirm("Ok to Delete This Item?")) return
	if (!win.confirm(deletemsg)) return

	//----- Call Developer defined ondelete handler and quit if it returns false
	if (typeof win.ondelete == 'function')
	{
		// update args with default values and pass to ondelete handler
		// returns false to cancel delete, or object with below values;
		var returnValues = win.ondelete(args);
		if (typeof returnValues == 'undefined' || returnValues == false)
		{
			win.status = 'Delete Canceled'
			return void(0)
		}
		else if (typeof returnValues == 'object')
		{
			if (typeof returnValues.nexturl != 'undefined')
				nexturl = returnValues.nexturl
		}

	}

	if (EZ.isFeature("EZ"))
		RZsetcookie('RZlastedit', (RZ.pagetype + ':delete:' + module + ':' +recordid), RZ.webspace);

	// Use the XML translator servlet instead of the old XML form method.
	nexturl = RZgetEditPageUrl(nexturl);
	var deleteUrl =	"/revize/HTTPTranslatorServlet" +
					"?resourcetype=record" +
					"&action=delete" +
					"&webspace=" + RZ.webspace +
					"&id=" + recordid +
					"&pagetemplateid=" + RZ.pagetemplateid +
					"&linkedmoduleid=" + RZ.linkedmoduleid +
					"&linkedrecordid=" + RZ.linkedrecordid +
					"&modulename=" + module +
					"&pagekey=" + RZ.page_key +
					"&redirect=" + escape(RZabsoluteUrl(nexturl));
	RZtrace( "Delete Item Request", deleteUrl );
	RZactionReset();
	win.location = deleteUrl;
}
/*---------------------------------------------------------------------------
Bring up page permissions window.

The options argument can contain one of the following:
	nexturl, linkname, module, object

The AdminPanel uses adminpanel option to specify additional url parameters.
----------------------------------------------------------------------------*/
function RZpermissions(set,options)
{
	var pos;
	if (typeof set == 'object') set = '';	//called from admin panel
	if (typeof set == 'undefined') set = ''
	if (typeof options == 'undefined') options = ''

	var adminpanel = RZgetoption(options, 'adminpanel');
	var linkname = RZgetoption(options, 'linkname');
	var module = RZgetoption(options, 'module');
	var nexturl = RZgetoption(options, 'nexturl');
	if (nexturl == '')
	{
		var fileInfo = RZgetfileinfo('/revize/util/permissions-editform.jsp')
		nexturl = RZbuildurl(fileInfo)
	}

	RZ.message = ''
	RZ.parameters = nexturl
	RZaddUrlParameter( 'webspace=' + RZ.webspace )
	RZaddUrlParameter( 'page_key=' + RZ.page_key )
	RZaddUrlParameter( 'parent_key=' + RZ.parent_key  )
	if(RZ.workflowmodule != '' && RZ.workflowmodule != undefined)
		RZaddUrlParameter('workflowmodule=' + RZ.workflowmodule);
	if (adminpanel)
		RZaddUrlParameter(adminpanel)

	if (set == '')
	{
		set = RZ.permissions_module + '.page_key=' + RZ.page_key
		if (linkname != '')
			set += linkname
		else if (module != '')
			set += module
	}
	RZaddUrlParameter('set='+escape(set))

	RZtrace('Page Permissions Call',RZ.message)
	RZ.editWindow = RZpopupUrl( 'EditWindow', RZ.parameters, 600, 500, 'yes')
}
/*---------------------------------------------------------------------------------------
Find all tagName elements with className
---------------------------------------------------------------------------------------*/
function RZgetTagsByClassName(tagName,className)
{
	var tags = [];
	var elements = document.getElementsByTagName(tagName);
	if (elements.length)
		for (var i=0;i<elements.length;i++)
			if ( (elements[i].className+' ').indexOf(className+' ') != -1)
				tags.push(elements[i]);
	return tags;
}
/*---------------------------------------------------*/
/*BOOKMARK ----- String minupulation functions -----*/
/*-------------------------------------------------*/
/*---------------------------------------------------------------------------------------
Return number occurances of chars (default char is dash)
---------------------------------------------------------------------------------------*/
function RZdup(number,char)
{
	var value = ''
	if (!char) char = '-';
	for (var i=0;i<number;i++)
		value += char;
	return value;
}
/*-----------------------------------------------------------------------------------------------
Append th, st, nd or rd to number specified by n.
Credit: http://uk.answers.yahoo.com/question/index?qid=20100902055222AAr3Bt6
-----------------------------------------------------------------------------------------------*/
function RZnth(n)
{
	n=n+'';
	if (!n) return 0;
	var l=n.length, r=parseInt(n.substring(l-2,l)), i = n % 10;
	var suffix = ((r < 11 || r > 19) && (i < 4)) ? ['th','st','nd','rd'][i] : 'th';
	return n + suffix;
}
/*-----------------------------------------------------------------------------
Return "s" if count > 1 otherwise return empty string
-----------------------------------------------------------------------------*/
function RZs(count)
{
		if (count.constructor == Array)
			count = count.length;
		else if (typeof(count) == 'string')
			count = count.split(',').length;
		else if (isNaN(count))
			count = 0;

	if (count != 1)
			return 's';
	else
	return '';
}
/*------------------------------------------------------------------------------
Remove any leading and ending blank spaces from string (trim)

Parameters:
	tmpStr - Input string

Returns:
	String with leading and trailing spaces removed
------------------------------------------------------------------------------*/
function RZtrim(tmpStr)
{
	if (typeof(tmpStr) == 'undefined' || tmpStr == null || tmpStr == '')
		return tmpStr;

	//----- need to strip \t besides ' '
	//while(tmpStr.substring(0,1) == ' ')
	while (/^\s/.test(tmpStr))
		tmpStr = tmpStr.substring(1, tmpStr.length);

	//while(tmpStr.substring(tmpStr.length-1,tmpStr.length) == ' ')
	while (/\s$/.test(tmpStr))
		tmpStr = tmpStr.substring(0, tmpStr.length - 1);

	return tmpStr;
}
/*------------------------------------------------------------------------------
RZreplace(inStr, fromString, toString)

Replace all occurances of fromString with toString

Created before javascript string.replace was available
(retain RZreplaceAll & RZreplacesubstring for backward compatibility)

Parameters:
	inStr - Input String
	fromString - String to replace
	toString - Replacement String

Returns:
	String with replacements
------------------------------------------------------------------------------*/
function RZreplace( inStr, fromString, toString )
{ return RZreplacesubstring( inStr, fromString, toString ) }
function RZreplaceAll( inStr, fromString, toString )
{ return RZreplacesubstring( inStr, fromString, toString ) }
function RZreplacesubstring( inStr, fromString, toString )
{
	var pos = 0
	if (inStr == null
	|| typeof inStr.length == 'undefined' //true or false
	|| inStr.length == 0) return '';

	var fromLen = fromString.length
	if (fromLen == 0) return inStr

	while (true)
	{
		pos = inStr.indexOf(fromString,pos)
		if (pos == -1) break
		inStr = RZsubstring( inStr, 0, pos )
		      + toString
		      + RZsubstring( inStr, pos + fromLen )
		pos += toString.length
	}
	return inStr
}
/*------------------------------------------------------------------------------
Subsitute for substring method (does not produce javascript errors)

A null or empty input string returns empty string

Start and end positions outside boundries intrepreted as follows:

	if end position not specified or greater than string length,
	adjust to input string length

	if end position before 1st character,
	return empty string

	if start position greater than ending position,
	return empty string

	if start position less than 0,
	assume 0

Parameters:
----------
	str-		Input string
	startpos-	Starting position
	endpos-		Ending position (optional)

Returns:
	substring as described above.

------------------------------------------------------------------------------*/
function RZsubstring(str, startpos, endpos)
{
	if (typeof endpos == 'undefined') endpos = str.length + 1

	//----- Validate input string
	if (str == null || str.length == 0)	//if null or empty string
		return "";						//...return empty string

	//----- Validate end position
	if (endpos > str.length )			//greater than string length
		endpos = str.length;			//...set to length

	else if( endpos <= 0 )				//if end position before 1st character
		return "";						//...return empty string

	//----- Validate start position
	if( startpos >= endpos )  			//if start position greater than ending position
		return "";						//...return empty string

	else if (startpos < 0) 				//if start position less than 0
		startpos = 0;					//...assume 0

	//----- Return the substring
	return str.substring(startpos,endpos);
}
/*---------------------------------------------------------------------------
returns rightmost number of characters specified

Parameters:
	str - Input String
	noChars - number of rightmost characters desired

Example:
	* right("1234",2) returns "34"
    * right("1234",0) returns ""
    * right("0",4) returns "0"

Returns:
	Rightmost substring possible; does not throw exception if string too short
----------------------------------------------------------------------------*/
function RZright( str, noChars )
{
	if (!str) return '';
	var len = str.length;
	if (len == 0) return "";

	if (noChars > len) noChars = len;
	return str.substring(len-noChars);
}
/*---------------------------------------------------------------------------------------------
Converts number to the nearest integer
0 is returned if not a valid number unless a defaultValue is supplied

Parameters:
	number - string or number to be converted to an integer (whole number)
	defaultValue - number returned in number parameter is not a valid number

Returns:
	Nearest whole number of input number; if input number or string is undefined or not
	a number, the defaultValue is returned
---------------------------------------------------------------------------------------------*/
function RZinteger(number,defaultValue)
{
	if (typeof defaultValue == 'undefined') defaultValue = 0

	if (isNaN(number))
		return defaultValue

	return parseInt( parseFloat(number)+.5 )	//convert number to number then round up
}

/* Same as RZcheckoptions (retained for backward compatibility) */
function RZcheckOptions( pOptions, pChoices )
{ return RZcheckoptions( pOptions, pChoices ) }
/*---------------------------------------------------------------------------
Look for specific option choice(s) in the options string.  Both options and
choices use commas to seperate multiple individual options.

Parameters:
        pOptions - Caller supplied options (e.g. "filter,editsingle,alt")
        pChoices - specific option choices to look for (e.g. alt,url,image)

Returns:
        True if at least one choice is contained in options
        False if none of the choice(s) are found

Example: RZcheckOptions('cristy,pam,sandy','cristy') returns true
----------------------------------------------------------------------------*/
function RZcheckoptions( optionsArg, pChoices )
{
	if (typeof(optionsArg) == 'object' && typeof(optionsArg.length) != 'undefined')
		pOptions = optionsArg.join(',');
	else
		pOptions = optionsArg

	if (pOptions == null || pChoices == null
	|| typeof pOptions == 'undefined' || typeof  pChoices == 'undefined')
		return false;

	var str, pos;
	var inputSep = pOptions.indexOf('|') != -1 ? '|' : ',';
	var inputOpts = inputSep + pOptions + inputSep;
	inputOpts = inputOpts.toLowerCase();

	var searchSep = pChoices.indexOf('|') != -1 ? '|' : ',';
	var searchOpts = pChoices.toLowerCase();

	//----- For each desired choice ...
	while ( !searchOpts == "" )
	{
		str = searchOpts;
		pos = str.indexOf(searchSep);
		if (pos == 0)
		{
			searchOpts = str.substring(pos+1);	//strip comma
			continue;
		} else if (pos > 0)
		{
			searchOpts = str.substring(pos+1);
			str = str.substring(0,pos);
		} else
		{// no commaa
			searchOpts = "";
		}
		// check for this choice
		if (inputOpts.indexOf(inputSep + str + inputSep) >= 0) return true;
		if (inputOpts.indexOf(inputSep + str + "=") >= 0) return true;
	}
	return false;
}
/*---------------------------------------------------------------------------
Looks for a key=value in the options string and returns the value portion.
(clone of getValue in RZTabSupport)

Parameters:
	options - String searched for key=value
	key - Key to find in options string

Returns:
	Associated value when key is found, otherwise returns blank string
----------------------------------------------------------------------------*/
function RZcheckoptionvalue(pOptions,pKey)
{ return RZgetoption(pOptions,pKey) }

function RZgetKeyValue(pOptions,pKey)
{ return RZgetoption(pOptions,pKey) }

function RZgetoptionvalue(pOptions,pKey)
{ return RZgetoption(pOptions,pKey) }

function RZgetoption(pOptions, pKey, defaultValue)
{
	var pos, str, keyEqual;
	if (!pOptions) pOptions = '';
	if (typeof defaultValue == 'undefined') defaultValue = '';

	//----- Search for key=
	keyEqual = pKey + "=";
	str = "," + pOptions;
	pos = str.toLowerCase().indexOf( keyEqual.toLowerCase() );

	if (pos == -1) 	// key not found
		str = defaultValue;
	else
	{
		//----- Keep everything after = up to ,
		str = pOptions.substring(pos + keyEqual.length - 1);
		pos = str.indexOf(",");
		if (pos >= 0) str = str.substring( 0, pos );	// value
	}
	//----- For backward compatibility: only map to true or false
	//		if defaultValue specified as boolean type
	if (typeof defaultValue == 'boolean')
		str = RZistrue(str)
	return str;
}
/*---------------------------------------------------------------------------
Return following as false: 'off', 'no', 'false', false, NaN, null, undefined
otherwise any other true value as true
----------------------------------------------------------------------------*/
function RZistrue(str)
{
	if (str == 0 || str == false
	|| str === 'off' || str === 'no' || str === 'false')
		str = false;
	else
		str = true;
	return str;
}
/*---------------------------------------------------------------------------
Call Next URL (popup or forward link)
----------------------------------------------------------------------------*/
function RZcallNextUrl( name,url, width,height,scroll)
{
	if ( RZpopupUrl(name,url, width,height,scroll) == null )
	{
		RZtrace("Calling Next URL Form", "URL: " + url )
		document.location = url
	}
}
/*---------------------------------------------------------------------------
RZeditor(): See RZeditorsetup in snippet_helper_rte.
Stub kept here for backward compatibility and warning message.
----------------------------------------------------------------------------*/
function RZeditor()
{
	if( RZ.pagetype == 'editform' )
		RZeditorsetup()
	else
		RZalert('Rich Text Editor Must be Opened on Form Page')
}
/*---------------------------------------------------------------------------
Set Link Property value in link object passed to RTE (NOT yet used or tested)
Might be useful on edit forms to set link manager properties.
----------------------------------------------------------------------------*/
function RZsetLinkProperty( linkObj, property )
{
	if (typeof RZ.link[linkname] != 'object')
		if (typeof RZ.link[property] == 'undefined')
			linkObj[property] = ''
		else
			linkObj[property] = RZ[property]
}
/*---------------------------------------------------------------------------
Append key=value to end of set if key not already in set and value not blank.

Optional argument options argument
	if not an object and true, replace existing key with specified value.
	if object then
		options.replace contains replaceFlag true to override a prior value
		options.update set true if value changed (replaceFlag must be true)

Returns true if prior value for key was changed.
----------------------------------------------------------------------------*/
function RZaddset(key, value, options)
{
	var replaceFlag = false;
	if (typeof options == 'object')
		replaceFlag = options.replace;
	else if (options)
		replaceFlag = options;

    // will property be updated (i.e. over-ridden)
	var status = false;			//default return status
	if (typeof value == 'undefined' || value == '') return status;

	var setCheck = ','+ RZ.set;
	var start = setCheck.indexOf(','+key);
	if (start == -1)
	{
		if (RZ.set != '') RZ.set += ','
		RZ.set += key + '=' + value;
	}
	else if (replaceFlag)
	{
		var end = RZ.set.indexOf(',',start);
		if (end == -1) end = RZ.set.length;
		var oldStr = RZ.set.substring(start,end);
		var newStr = key + '=' + value;
		if (oldStr != newStr)  status = true;
		RZ.set = RZreplace( RZ.set, oldStr , newStr );
	}

	if (typeof options == 'object')
	 	options.update = (options.update || status);

	return status;
}
/*---------------------------------------------------------------------------
Set or update RZ property
	options.replace contains replaceFlag true to override a prior value
	options.update set true if value changed (replaceFlag must be true)
----------------------------------------------------------------------------*/
function RZupdate(key,value,options)
{
	if (!options.replace && RZ[key] != '') return;
	if (!value == 'undefined' || value == '') return;

    // will property be updated (i.e. over-ridden)
	if (RZ[key] != '' && RZ[key] != value)
		options.update = true;

	RZ[key] = value;
}
/*---------------------------------------------------------------------------
Set or update form property (probably won't work for Firefox).
	options.replace contains replaceFlag true to override a prior value
	options.update set true if value changed (replaceFlag must be true)
----------------------------------------------------------------------------*/
function RZupdateFormProperty(field,key,value,options)
{
	if (!options.replace && typeof field[key] != 'undefined') return;
    if (!field || typeof value == 'undefined') return;

    if (typeof value == 'string' && value == '')
    	return;

    else if (typeof value == 'object')
    {
		if (typeof value.length == 'undefined'
		|| value.length < 1
		|| value[0] == '')
    		return;
	}

    // will property be updated (i.e. over-ridden)
    if (typeof field[key] != 'undefined' && field[key] != '' && field[key] != value)
		options.update = true;

    field[key] = value;
}
/*-----------------------------------------------------------------------------
get innerHTML of el with leading and trailing spaces and &nbsp; removed.
return blank if el not valid element or id of valid element or innerHTML is not
valid element property.
-----------------------------------------------------------------------------*/
function RZgetInnerHTML(el)
{
	if (typeof el == 'string')
		el = document.getElementById(el);

	var html = '';
	if (el && typeof(el.innerHTML) != 'undefined')
	{
		html = el.innerHTML
		html = html.toString();
		html = html.replace(/^(<br[^>]*>)*([\s\S]*?)(<br[^>]*>)*$/, '$2');
		html = html.replace(/^(\s|&nbsp;)*([\s\S]*?)(\s|&nbsp;)*$/, '$2');
	}
	return html;
}
/*-----------------------------------------------------------------------------
set innerHTML if el is valid element or id of valid element and innerHTML is
valid element property.
-----------------------------------------------------------------------------*/
function RZsetInnerHTML(id,html,doc)
{
	var el = id;
	if (!doc) doc = document;
	if (typeof el == 'string')
		el = doc.getElementById(id);

	if (el && typeof(el.innerHTML) != 'undefined')
	{
		el.innerHTML = html.toString().replace(/\n/g,'<br>');
		return true;
	}
	//RZwarn('id=' + id + ' html element NOT found','level=info');
	return false;
}
/*---------------------------------------------------------------------------
Open Trace Window and Display Message
DCO 10-20-2014: Save trace for admin panel if RZ.trace not enabled
----------------------------------------------------------------------------*/
function RZtrace(heading,text)
{
	//console.log({TRACE:heading, message:text})
	if (!RZ.trace && !RZtrace.show) return
	if (!text) text = ''

	text = text.toString();
	text = text.split('--').join('\n')

	var MSIE = true;
	if (navigator.appVersion.indexOf('MSIE') == -1) MSIE = false;

	//----- Always open using browser specific options
	//		(if already open, it reconnects to existing window)
	while (true)
	{
		if(!MSIE) //Navigator
		{
			RZ.tracewin = window.open('', 'RevizeTrace',
			'width=420,height=580,location=no,menubar=no,resizable=yes,screenX='
			+ (screen.availWidth-430)
			+ ',screenY=20,directories=no,status=no,scrollbars=yes');
		}
		else  //IE
		{
			RZ.tracewin = window.open('', 'RevizeTrace',
			'width=420,height=580,location=no,menubar=no,resizable=yes,left='
			+ (screen.availWidth-430)
			+ ',top=20,directories=no,status=no,scrollbars=yes');
		}
		//----- Close trace window if no access and open again
		if (MSIE && !RZwinaccess(RZ.tracewin))
			RZ.tracewin.close()
		else
			break
	}

	//----- Convert special characters
	text = text.split('<').join('&lt;');
	text = text.split('>').join('&gt;');

	//----- Display message.
	if (heading != '')
		RZ.tracewin.document.writeln(
			'</pre>',
			'<html><title>Trace</title><body>\n',
			'<b>',heading,'</b><br>\n',
			'<font size="-2" face="Arial">',location.href,'</font>\n',
			'<pre>\n',
			text)
	else if (text != '')
		RZ.tracewin.document.writeln( text )
	else
		RZ.tracewin.document.writeln( '</pre>' )

	//----- Give focus, if trace window already open and accessible
	if (!MSIE || RZwinaccess(RZ.tracewin)) RZ.tracewin.scrollBy(0,600)
}

/*---------------------------------------------------------------------------
POPUP EDITOR CAN NO LONGER BE CALLED FROM PUBLISHED PAGES

***** Editor Support Code *****

Open Html Editor in popup window
If specified field exists in XMLForm, use that value.
Otherwise Revize editor will read and store data from content database.
----------------------------------------------------------------------------*/
function RZcallEditor( moduleName, fieldName, width, height, options, recordid )
{
	if (typeof moduleName == 'undefined') moduleName = '';
	if (typeof fieldName == 'undefined') fieldName = '';
	if (typeof width == 'undefined' || width=='' ) width = '600';
	if (typeof height == 'undefined' || height=='') height = '400';
	if (typeof options == 'undefined') options = '';
	if (typeof recordid == 'undefined') recordid = '';

	//----- Make sure field and image elements are supplied
	var msg = '';
	var useDatabase = false;
	if (moduleName == '')
		msg = "Module Name Not Specified"
	else
	{
		if (fieldName == '')
			msg = "Editable Field Name Not Specified"
		else
		{
		if (typeof document.XMLForm == 'undefined')
			useDatabase = true;
		else
			if (typeof document.XMLForm[fieldName] == 'undefined')
			useDatabase = true;
		}
	}


	//----- Report any problems with arguments before using
	if (msg != '')
	{
		RZalert( 'Invalid Revize Editor Request\n\n'
			   + 'Function: snippet_helper.js:RZcallEditor()\n\n'
			   + 'Problem: ' + msg + '\n' )
		return;
	}

	//----- Make trace entry
	RZ.message = '';
	RZmsgAdd( "module"  , '\t' + moduleName )
	RZmsgAdd( "field"   , '\t' + fieldName )
	RZmsgAdd( "width"   , '\t' + width )
	RZmsgAdd( "height"  , '\t' + height )
	RZmsgAdd( "recordid", '\t' + recordid )
	RZmsgAdd( "options" , '\t' + options )
	RZtrace( "Revize Editor Request", RZ.message )

	//----- Call Editor screen, passing parameters via Url
	var url;
	var editorDir = '/revize/'

	if (!RZ.MSIE || RZ.browserversion < 5.5)
	{
		editorDir += 'javaeditor'

		// Convert any rich edit options to applet editor Url parameters syntax
		options = RZ.options.split(';').join('&')
		if (options.substring(1,3) == '&&') options = options.substring(1)
	}else
	{
		editorDir += 'htmleditor'
		options = RZeditorOptions(options);		//convert to rich edit format
		options = 'options=' + escape(options)	//passed as a single parameter
	}
	url = editorDir + '/editor-editform.jsp?webspace=' + RZ.webspace;
	if (useDatabase != '') url += '&module=' + moduleName;
	url += '&field=' + fieldName
	if (recordid != '') url += '&recordid=' + recordid
	url += '&width=' + width + '&height=' + height + '&' + options
	RZpopupUrl('revize_editor',url,width,height,'no')
}
/*---------------------------------------------------------------------------
Open Url in Popup Window (return true if popup)

Originally used popup window if either width, height or SCROLL was not blank;
with advent of RZaction() and use of RZ object arguments, do not assume popup
based on scroll value or if both width and height are set to 0.

Since scroll is last feature, it can specify other features after the scroll
value. For example:
	yes,location=yes,menubar=yes,toolbar=yes,directories=yes'

If niether width, heigth or scroll are specified assume popup window with no
features specified.

Returns:
	window object of popup window or null if popup window not used
----------------------------------------------------------------------------*/
function RZpopupUrl(name,url,width,height,scroll)
{
	var useFeatures = true;
	if(typeof width == 'undefined'
	&& typeof height == 'undefined'
	&& typeof scroll == 'undefined')
		useFeatures = false;
	else
	{
		var popup = false;
		if (typeof width != 'undefined' && width != '' && width != 0 && width != '0')
			popup = true;
		if (typeof height != 'undefined' && height != ''	&& height != 0 && height!= '0')
			popup = true;
		if (!popup) return null;

		// DCO 03-26-2014: for IE11+, remove RZ.baseurlprefix
		if (RZ.isIEw3c && RZ.baseurlprefix && url.indexOf(RZ.baseurlprefix) == 0)
			url = url.substr(RZ.baseurlprefix.length);
	}

	RZ.message = "Name: " + name + "\n"
		 + "Url:  " + url + "\n"
		 + "Width:  " + width + "\n"
		 + "Heigth: " + height + "\n"
		 + "Scroll: " + scroll + "\n"
	RZtrace("Opening Popup Window", RZ.message)

	//----- Determine popup properties
	if(typeof url == 'undefined') url = ''
	if(typeof name == 'undefined') name = 'RevizeWindow'
	if(typeof width == 'undefined' || width=='') width = 400
	if(typeof height == 'undefined' || height=='') height = 400
	if(typeof scroll == 'undefined' || scroll=='') scroll = 'yes'

	var menubar = 'no'
	var location = 'no'
	var toolbar = 'no'
	var directories = 'no'
	var status = 'yes'
	if( RZ.trace || RZ.debug )
	{
		scroll = 'yes'
		menubar = 'yes'
		location = 'yes'
		toolbar = 'yes'
		directories = 'yes'
		status = 'yes'
		width = parseInt(width) + 15
		height = parseInt(height) + 50
	}
	else if (name == 'admin')
	{
		menubar = 'yes'
		location = 'yes'
	}

	var features = 'width=' + width + ',height=' + height
			   + ',location='+location
			   + ',menubar='+menubar
			   + ',resizable=yes'
			   + ',toolbar=' + toolbar
			   + ',directories=' + directories
			   + ',status=' + status
			   + ',scrollbars=' + scroll	//must be last to allow specify features

	var x = (screen.availWidth - width) / 2 - 10
	if (RZ.browserdev) x=0;

	var y = (screen.availHeight - height) / 2 - 30
	if (y < 50) y = 0

	if(navigator.appVersion.indexOf('MSIE') == -1 && !RZ.isIEw3c )  // Netscape
		features += ',screenX=' + x.toString()
				 +  ',screenY=' + y.toString()
	else                                            // IE browser
		features += ',left=' + x.toString()
				 +  ',top=' + y.toString()
	if (!useFeatures) features = ''	//do not specify features

	/*****
	First open the popup window and give it focus in case it was already open.
	It is possible that the popup window has been left open by another instance
	of the browser.  When this occurs on IE, the popup window will NOT have
	access to window.opener property.  To avoid this problem, we wait a second
	and then call RZpopupAccess() to close and reopen the popup if the popup
	window does not have proper access to this window.  We did not want to
	always close and reopen the window because it can be distracting for
	content editors.
	*****/

	//TODO:	This statement gets 1075 error on IE when opening publishing window
	//		if popup edit form was left open from another edit (calendar_app)
	RZ.popupwin = window.open( url, name, features );

	//----- On Netscape, RZ.popupwin sometimes not defined
	if (RZ.popupwin == null || typeof RZ.popupwin == 'undefined')
		RZ.popupwin = window.open( url, name, features );

	//----- Give popup window focus
	RZ.timeoutfocus = window.setTimeout('RZfocus(RZ.popupwin)', 500);

	//----- Check for access after page loads
	var str = 'RZpopupAccess("' + url + '","' + name+ '","' + features + '")'
	RZ.timeoutaccess = window.setTimeout(str, 1000)

	return RZ.popupwin;
}
/*---------------------------------------------------------------------------
Cancel focus and access timeout events.
----------------------------------------------------------------------------*/
function RZcancelPopupEvents()
{
	window.clearTimeout(RZ.timeoutfocus)
	window.clearTimeout(RZ.timeoutaccess)
}
/*---------------------------------------------------------------------------
Sets focus in case the specified window was left open from a previous call
----------------------------------------------------------------------------*/
function RZfocus(win)
{
    if (RZwinaccess(win))
        if (win.name != 'rzrte' && win.name != 'RZpublishing') win.focus();
}
/*---------------------------------------------------------------------------
See above description in RZpopupUrl
----------------------------------------------------------------------------*/
function RZpopupAccess(url,name,features)
{
	var str = ''
	if (!RZwinaccess(RZ.popupwin))
	{
		str = 'popup window closed'
	}else
	{
		str = 'opener: '
		if (RZwinaccess(RZ.popupwin.opener))
		{
			if (typeof RZ.popupwin.opener.location == 'undefined')
				str += '*no url*'
			else
				str += RZ.popupwin.opener.location.href
		}
		else if (typeof RZ.popupwin.opener != 'undefined')
			str += 'no access to opener'
		else
			str += 'opener not defined'
	}

	var msg = 'name: ' + name + '\n'
            + 'url: ' + url + '\n'
            + str + '\n'
	//alert('Popup Properties\n\n' + msg)
	RZtrace( 'Popup Properties', msg)

	//----- Quit if popup window has been closed
	if (!RZwinaccess(RZ.popupwin)) return

	//----- If no access to opener, close window and reopen
	if ( !RZwinaccess(RZ.popupwin.opener))
	{
		RZ.popupwin.close();
		RZ.popupwin = window.open( url, name, features );
		return
	}

	/*
	//----- If Revize Control Panel... (future)
	if ( name == 'revizecontrol' )
	{
		if (typeof RZ.popupwin.RZ == 'undefined')
		{
			window.focus()
			RZ.popupwin.document.write('<title>Revize Control Panel</title>')
		}
	}
	*/
  	RZ.popupwin = null		//indicate popup processing complete
}
/*---------------------------------------------------------------------------------------------
Wait for access to "win" to perform "waitCommand" displaying "waitMsg" while waiting;
Only wait "maxSeconds" (default 30); check every "msInterval" (default 1000) milliseconds.
---------------------------------------------------------------------------------------------*/
function RZwait(win, waitCommand, waitMsg, maxSeconds, msInterval)
{
	if (typeof waitMsg == 'undefined') waitMsg = 'Waiting for access'
	if (typeof maxSeconds == 'undefined') maxSeconds = 30
	if (typeof msInterval == 'undefined') msInterval = 1000

	RZcancelPopupEvents()	//RZwait overrides automatic popup events

	//----- Validate arguments
	var msg = ''
	if (typeof win != 'string')
		msg = '1st Argument is type ' + typeof win;
	else if(typeof waitCommand != 'string')
		msg = '2nd Argument is type ' + typeof win;

	if (msg != '')
	{
		msg = 'RZwait must be called with string variables\n\n' + msg;
		RZalert(msg)
		return;
	}

	//----- Setup call to RZwaitCheck...
	var now = new Date()
	RZ.waitstart = now.getTime()	//start of wait
	RZ.waitaccess = 0

	waitCommand = RZreplacesubstring( waitCommand, '"', '\\"' )

	RZ.waitcall = 'RZwaitCheck( ' + win
	                          + ', "' + waitCommand + '" '
	                          + ', "' + waitMsg  + '" '
	                          + ', ' + maxSeconds
	                          + ', ' + msInterval
	                          + ' )'

	RZtrace('Setup Wait', RZ.waitcall )
	//eval( RZ.waitcall )		//call RZwaitCheck() immediately
	setTimeout( RZ.waitcall, msInterval );	//give the url a chance to load
}
/*---------------------------------------------------------------------------
----------------------------------------------------------------------------*/
function RZwaitError(message)
{
	return true
}
/*---------------------------------------------------------------------------------------------
If access to "win" or "maxSeconds" have passed since "RZ.waitstart", perform "waitCommand";
otherwise wait another "msInterval" milliseconds.

Access means permisison to access window, RZ not null and...
either window name is not blank (works for most non-Revize enabled pages)
--or-- RZ.loaded is not undefined nor null

Notes:
It is possible that access to "win" is lost after checking access but prior to actually
accessing "win" variables which can cause one of the following JavaScript errors:
	RZ is null or not an object
	object does not support this property or method

Checking the page access before the new url starts to load is believed to be one cause.
An alternative onerror handler is set to catch these potential javascript errors.
This function stops running after a javascript error but unfortunately when MS studio is
installed and IE script debugging is not disabled, the currently defined onerror handler
does not run either and therefore can't be used to restore the original onerror handler
or schedule RZwaitCheck() to run again.

In order to restart RZwaitCheck in all cases is therefore rescheduled before the any
javascript error can occur and canceled if no more waiting is required.
---------------------------------------------------------------------------------------------*/
function RZwaitCheck (win, waitCommand, waitMsg, maxSeconds, msInterval)
{
	if (window.onerror == RZwaitError)
		window.onerror = RZ.waitonerror		//restore original handler

	var now = new Date()
	var seconds = (now.getTime() - RZ.waitstart).toString() / 1000
	waitcallId = setTimeout( RZ.waitcall, msInterval)

	var waitMore = ''
	if( !RZwinaccess(win) )
	{
		waitMore = 'no access'
		RZ.waitaccess = 0
	}
	else
	{	// see debugger notes this function description for onerror handling
		if (window.onerror != RZwaitError)
			RZ.waitonerror = window.onerror
		window.onerror = RZwaitError

		//simulate race error one time as described in debugger notes above
		RZ.waitaccess++
		//if (RZ.waitaccess <= 1 && RZ.error.force) RZ.waitaccess = 99

		// if window reloading, RZ.loaded first set to null
		if (typeof win.RZ != 'undefined' && win.RZ != null
		&& typeof win.RZ.loaded != 'undefined' && win.RZ.loaded != true)
			waitMore = 'refresh pending'

		// window name undefined until window loaded (at least on IE)
		else if (typeof win.name == 'undefined')
			waitMore = 'window loading'

		// if window name is not blank, assume window loaded
		// (recognizes non-revize enabled pages especially frames)
		else if (win.name != '')
			waitMore = ''

		// RZ.loaded not defined until onload handler complete
		else if (typeof win.RZ == 'undefined' || win.RZ == null
		|| typeof win.RZ.loaded == 'undefined' || win.RZ.loaded != true)
			waitMore = 'onload pending'

		window.onerror = RZ.waitonerror		//restore original handler
	}

	var waitDone = false
	if (waitMore != '')
	{
		var waitedMsg = ' waited ' + parseInt(seconds) + ' seconds'
		RZtrace(waitMsg, waitedMsg )
		RZ.parent.status = waitMsg + ': ' +  waitedMsg + ' (' + waitMore + ')'
		if (seconds > maxSeconds )	//don't wait too long
			waitDone = true;		//waited long enough
	}
	if (waitMore=='' || waitDone)
	{
		RZ.waitcall = ''			//clear in case scheduled timeout starts
		clearTimeout( waitcallId )	//cancel scheduled waitCheck
		waitedMsg = 'waited ' + seconds + ' total seconds'
		RZtrace('RZwaitCheck(): ' + waitMsg, waitedMsg )
		if (!waitDone) RZ.parent.status = ''
		eval( waitCommand )
	}
}

/*---------------------------------------------------------------------------
Determine if opener properties are still accessible
(they will not be if window closed or moved to another url)

TODO: check access on NS (unknown)

The following is always false on Netscape:

if ( typeof RZ.popupwin.opener.document == 'unknown' )
----------------------------------------------------------------------------*/
function RZwinaccess(win)
{
	//default to opener for backward compatibility but all calls
	//now probably pass an argument.
	if (!win) win = RZ.parent.opener

	try
	{
		//TODO: gets interface error (IE?) if calling window is closed
		//		(inside try/catch so should not cause issues)

		// chrome (and probably FF), throw exception if invalid window
		// e.g. parent.opener when it does not exist
		if (typeof win == 'undefined' || win == 'undefined') return false

		if(win != null
		&& typeof win != 'undefined'
		&& win.closed != true

		// chrome (and probably FF), throw exception if invalid window
		// e.g. parent.opener when it does not exist
		&& win !='undefined')
		{
			if (RZ.MSIE && typeof win.document == 'unknown')
				return false;
			//force error if access denied
			else if (!RZ.MSIE && win.location.href == '')
				return false;
			else
				return true;
		}
	}
	catch (ex)
	{
		return false;
	}
	return false
}

/*---------------------------------------------------------------------------
Give focus to opener if still accessible.
----------------------------------------------------------------------------*/
function RZopenerFocus(win)
{
	if (RZ.refresh)
		RZ.refresh = false
	else
	{
      if (typeof win == 'undefined') win = RZ.parent.opener
		if (RZwinaccess(win)) win.focus()
	}
}

/*---------------------------------------------------------------------------
Display page permission warning defined by code.
----------------------------------------------------------------------------*/
function RZpagemessage(code,linkname,linkparent,linklevel)
{
	if (typeof linkname == 'undefined') linkname = ''
	if (typeof linkparent == 'undefined') linkparent = ''
	if (typeof linklevel == 'undefined') linklevel = ''

	var msg = ''
	var hash = '';

	switch ( code )
	{
		// button warning
		case "":
			break;

		// page permission icon appearing in upper left corner of page is clicked.
		case "noparent":
			msg += 'No parent defined for this PAGE'
			break;

		// link manager
		case "nolinkparentfield":
			msg += 'No linkparent field defined for this LINK'
			break;

		// link manager
		case "nolinkparent":
			msg += 'No parent defined for this LINK'
			break;

		// button warning
		case "nomodule":
			msg += 'Revize module not defined on button'
			break;

		// button warning
		case "parent_itself":
			msg += 'Page can not be a parent of itself \n(no longer true)'
			break;

		// unknown warning
		default:
			msg += 'Page permission incongruency'
			code = RZreplace(code,'--','\n')
			if (code.length > 25)
				msg += ':\n\n' + code
			else
				msg += ' (reason:' + code + ')'
			break;
	}

	RZ.message = ''
	RZ.parameters = ''
	if (linkname != '')
	{
		RZ.message += 'Link Information:\n\n'
		RZaddUrlParameter('Link Name: ' + linkname )
		RZaddUrlParameter('Link Module: ' + RZ.link[linkname].linkmodule )
		RZ.message += '\n'

		if (linkparent == '*nofield*')
			RZ.message += 'No linkparent field in linkmodule\n'
		else if (RZ.link[linkname].linkmodule != '')
			RZaddUrlParameter(RZ.link[linkname].linkmodule+'.linkparent: '+ linkparent)
		RZaddUrlParameter('First List Item Parent: '+ RZ.link[linkname].linkparent)

		if (linklevel != '')
		{
			RZ.message += '\n'
			RZaddUrlParameter('Link Level: '+ linklevel)
			if (typeof RZ.linkparentnew[linkname] != 'undefined')
				RZaddUrlParameter('Level '+linklevel+' new parent_key: '
				                 + RZ.linkparentnew[linkname][linklevel])
		}
	}
	else
	{
		RZ.message += 'Page Information:\n\n'
		var templateType = '(unique)'
		if (RZ.pagemodule != '') templateType = '(dependent)'
		RZaddUrlParameter('Template: ' + RZ.pagetemplatename + '  ' + templateType )
		if (RZ.pagemodule != '')
		{
			RZaddUrlParameter('Module: '    + RZ.pagemodule )
			RZaddUrlParameter('Record Id: ' + RZ.editrecordid )
			hash = '#' + RZ.pagemodule + "_" + RZ.editrecordid;
		}
		RZ.message += '\n'
		RZaddUrlParameter('page_key:     '   + RZ.page_key )
		RZaddUrlParameter('parent_key:  '   + RZ.parent_key )
		RZ.message += '\n'
		RZaddUrlParameter('Permitted roles: ' + RZ.page_roles )
		RZaddUrlParameter('Permitted users: ' + RZ.page_users )
		if (RZ.inherit_key != '')
			RZaddUrlParameter('Inherited from: ' + RZ.inherit_key )
	}
	RZ.message += '\n'
	RZaddUrlParameter('permissions_options: ' + RZ.permissions_options )

	if (msg != '')
	{
		msg =  '---------------------------------------------------\n' + msg + '\n'
		msg += '---------------------------------------------------\n\n'
	}
	msg += RZ.message + '\n'
	msg += '---------------------------------------------------\n'
	msg += 'Click Ok to find pages that link to this page      \n'
	msg += '---------------------------------------------------\n'

	if (confirm(msg))
		location.href = RZ.webspacelinksurl + hash
	return void(0)
}

/*---------------------------------------------------------------------------
Display and clear warning from jsp code
----------------------------------------------------------------------------*/
function RZwarning()
{
	if (RZ.warning != '')
	{
		window.status = RZreplaceAll( RZ.warning, '-- --', '; ')
		RZtrace( 'Warning from JSP code', RZ.warning )
		RZ.warning = ''
	}
}
/*---------------------------------------------------------------------------
Display alert or confirm dialog using RZalert (with prepended issue message)
Only displayed if RZ.debug is true;

By using RZalert, the javascript debugger can be started if in debug mode.

Parameters:
	message	- Message describing problem encounted with page
	isConfirm - Optional If true, confirm dialog is used (default is false)
----------------------------------------------------------------------------*/
function RZwarn(message,isConfirm) { return RZnote(message,isConfirm) }
function RZnote(message,isConfirm)
{
	var isNote = true
	return RZalert(message,isConfirm,isNote)
}
/*---------------------------------------------------------------------------
Display alert using confirm dialog

Parameters:
	message	- Message describing problem encounted with page
----------------------------------------------------------------------------*/
function RZconfirm(message)
{
	return RZalert(message,true)
}
/*---------------------------------------------------------------------------
Add message to trace window (including call stack)

Display message in alert with prepended with notation that page has a problem

DCO 10-20-2014: Stop using alert() -- RZtrace() saves messages for AdminPanel

If RZ.debug is true, a confirm dialog is used with option to start the
JavaScript debugger.

----------
Parameters:
----------
message	 	Message describing problem encounted with page

isConfirm 	(Optional) If true, confirm dialog is used (default is false)
				As of 07-22-2012, always prompt for debugger in Debug Mode
			09-14-2012: was deprecated probably 07-22; reactivated so can be used as
			extended confirm() with option to start debugger in debug mode.
			e.g. RZsave() uses as extended confirm() when Revize form wizard deleted.

isNote 		(Optional) If true and not RZ.Debug, only display message in status bar
			Otherwise use RZalert() to display message.
----------------------------------------------------------------------------*/
function RZalert(message,isConfirm,isNote)
{
  	if (typeof isNote == 'undefined') isNote = false;
  	if (typeof isConfirm == 'undefined') isConfirm = false;

	if (typeof message == 'undefined' || typeof message == 'object')
  		message = 'Message is ' + typeof message;

  	else if (message == '')
  		message = 'No Reason Given';

	message = message.split('--').join('\n\n');
	if (isConfirm || RZ.debug)
	{
		if (RZ.debug)
		{
			var msg = 'DEBUG mode is active; debugger starts if Ok clicked\n\n' + message
			message = RZdisplayCaller(msg);
		}
		if (confirm(message))
		{
			if (RZ.debug) debugger;
			return true;
		}
	}
	else if (isNote)
		window.status = message;
	else
		RZtrace('RZalert',message);	//DCO 10-20-2014
		//alert(message);			//		 ''

	return '';	//can be used to clear message
}
/*---------------------------------------------------------------------------
Convenience function for determining if administrator logged in
----------------------------------------------------------------------------*/
function RZisadmin()
{
	return RZcheckoptions(RZ.roles,'superuser,administrator');
}
/*---------------------------------------------------------------------------
Write html if user is authenticated for current webspace (RZ.webspace).
During page initialization RZ.login is set to the RZlogin cookie defined by
the login function.
TODO: Do not write any html for production channels.

Parameters:
	html -			html code to be written if logged in and proper permission
	module -		Module requiring permissions
	permits -		Permissions required on module
	action -		Button action
----------------------------------------------------------------------------*/
function RZlogin( html, module, permits, action )
{
	// 2nd parameter was webspace way back and there was not a 3rd parameter
	// so defaulting permits to blank retains backward compatibility.
	if (typeof module == 'undefined') module = '';
	if (typeof permits == 'undefined') permits = '';
	if (typeof action == 'undefined') action = '';

	// backward compatibility
	if(typeof RZ.webspace == 'undefined'
	&& typeof RZ.webSpaceName != 'undefined')
		RZ.webspace = RZ.webSpaceName

	// if login webspace does not match page webspace, return false
	if(RZ.login != RZ.webspace && RZ.login != '*ALL')
		return false

	// if pointbasedemo webspace and NOT preview directory, return false
	if(RZ.webspace.indexOf('pointbasedemo') >= 0
	&& RZ.page.pathname.indexOf('-preview') == -1)
		return false;

	// if demosite webspace and production directory, return false
	if(RZ.webspace.indexOf('demosite') >= 0
	&& RZ.page.pathname.indexOf('-prod') != -1)
		return false;

	// if atwatercounty webspace and production directory, return false
	if(RZ.webspace.indexOf('atwatercounty') == 0
	&& RZ.page.pathname.indexOf('-prod') != -1)
		return false;

	// if paradigm webspace and production directory, return false
	if(RZ.webspace.indexOf('paradigm') == 0
	&& RZ.page.pathname.indexOf('-prod') != -1)
		return false;

	// show the help button before the permissions button
	if(module == 'webspace_page_permissions')
		document.write('<a href="http://cms4.revize.com/revize/supportrevize/revize_faq.php" target="_new"><img src="../images/edit/help.jpg" alt="Help" border="0" /></a>');

	//----- If called with a module and required permits, check them.
	//		If no access, return false and do not write any html.
	if ( module != '' && permits != ''
	&& RZpermits(module , permits) != true )
		return false;


	//----- Hide button if no page permissions (TODO: hides what? seq?)
	if ( action != 'save' && action != 'cancel' && action != 'history')
		if ( !RZ.pagepermission && module != '' ) return false;


	if ( typeof html != 'undefined' && html != '')
		document.write(html);

	return true;
}
/*---------------------------------------------------------------------------
Display rendered width of element
----------------------------------------------------------------------------*/
function RZrte(id)
{
	if (!id)
	{
		id=prompt('Enter element id',RZgetcookie('RZrte'));
		if (!id) return;
		RZsetcookie('RZrte',id);
	}
	var msg = '';
	var el = document.getElementById(id);
	if (!el)
		msg = 'id='+id+' not found';
	else
	{
		msg += '\n    font-family=' + currentStyle('font-family') + ';';
		msg += '\n    font-size=' + currentStyle('font-size') + ';';
		while (el.clientWidth == 0 && el.parentNode)
			el = el.parentNode;
		var padding = parseInt(currentStyle('padding-left'))
		            + parseInt(currentStyle('padding-right'));
		msg = '.rte-format {' + msg + '\n}'
			+ '\n\nwidth=' + el.clientWidth;
		if (padding > 0)
			msg += '\n\nwidth=' + (el.clientWidth - padding) + ' (less padding for RTE)';
	}
	alert(msg);
	return;

	function currentStyle(style)	//style is css format (e.g. font-size)
	{
		if (!document.defaultView)
		{
			style = style.replace(/(-)(\w)/, function (all,dash,word){
				return word.toUpperCase();
			})
			return el.currentStyle[style];
		}
		else
		{
			var renderedStyle = document.defaultView.getComputedStyle(el,'');
			return renderedStyle.getPropertyValue(style);
		}
	}
}
/*---------------------------------------------------------------------------
Toggle debug mode with prompt that includes optional notes argument.
----------------------------------------------------------------------------*/
function RZdebug(notes,win)
{
	if (typeof win == 'undefined') win = window;

	if (typeof notes == 'undefined')
		notes = '';
	else if (typeof notes == 'object')
	{
		win = notes;
		notes = '';
	}

	var debugState = !RZ.debug
	var msg = 'Set debug ' + debugState + '?'
	if (typeof notes != 'undefined')
		msg = notes + '\n\n' + msg

	//dont need confirm with new adminpanel
	if (!notes || win.confirm(msg))
	{
		RZ.debug = debugState;
		RZsetcookie('RZdebug', (RZ.debug ? RZ.webspace : '') ,RZ.page.domain);
	}
	return void(0)
}
/*---------------------------------------------------------------------------
Prompt to start debugger with optional notes argument.
----------------------------------------------------------------------------*/
function RZdebugger(notes)
{
	var msg = 'Start Debugger?'
	if (typeof notes != 'undefined')
		msg = notes + '\n\n' + msg

	if (confirm(msg))
	{
		//RZ.debug = true;
		debugger;
	}

	return void(0)
}
/*---------------------------------------------------------------------------
Ask to start IE or Netscript Javascript debugger.
----------------------------------------------------------------------------*/
function RZstartDebugger()
{
	debugger;
	return;
}
/*---------------------------------------------------------------------------
return function name of caller at depth
----------------------------------------------------------------------------*/
function RZgetcaller(depth)
{
	if (!depth) depth = 2;	//caller of this func caller
	var patternFunction = /function\s*(\w*)\s*\((.*?)\)[^{]*{([\s\S]*)}/
	//                                 1         2           3
	//								   name      args        body
	var funcName = '';
	for (var func = RZgetcaller.caller; func != null; func = func.caller)
	{
		var script = func.toString();
		var results = funcName = script.match(patternFunction);
		if (!results)
			funcName = '*unknown*';
		else
		{
			funcName = results[1];
			if (!results[1])
				funcName = "anonymous";
		}
		if (--depth <= 0) return funcName;
	}
	return '-main-';
}
/*---------------------------------------------------------------------------------------
Display caller stack

---------
Arguments:
---------
msg			(Optional) String contain message to display before caller stack
options		(Optional) String contains the following seperated by commas
			debug		pause in debug mode (used in calendar_app)
			debug=???	only pause if RZdebugoption[???] is true
			force		pause even if not in debug mode
			yes			assume yes rather using comfirm
---------------------------------------------------------------------------------------*/
RZdisplayCaller.MAX_FUNCTIONS_SHOW_ARGS = 3;
RZdisplayCaller.MAX_FUNCTIONS = 15;
function RZdisplayCaller(msg,options)
{
    if (!msg) msg = '';
	if (msg) msg += '\n\n';
	if (!options) options = '';

	var isDebug = RZcheckOptions(options,'debug')
	var isDebugForce = RZcheckOptions(options,'force')
	if (isDebugForce) isDebug = true;

	var e = '';
	var funcName = '';
	var indentFunc = isDebug ? 0 : 4;
	var indentArgs = indentFunc + 4;
	var trace = msg;
	try											//don't want js error for users
	{
		if (isDebug)
		{
			if (!RZ.debug && !isDebugForce)		//RZ.debug can be typeof unknown
				return false;
			var isDebugYes = RZcheckOptions(options,'yes');
			var debugOption = RZgetOption(options,'debug');	//debug=
			if (!debugOption || !RZisDebugOption(debugOption)) return false;
		}

		var i, count = 0;
		var patternFunction = /function\s*(\w*)\s*\((.*?)\)[^{]*{([\s\S]*)}/
		//                                 1         2           3
		//								   name      args        body
		for (var func = RZdisplayCaller.caller; func != null; func = func.caller)
		{
			var script = func.toString();
			var results = funcName = script.match(patternFunction);
			if (!results)
				funcName = '*unknown*';
			else
			{
				funcName = results[1] + '(' + results[2] + ')';
				if (!results[1])
					funcName = "anonymous" + funcName;
			}

			// display args for 1st few functions
			if (++count <= RZdisplayCaller.MAX_FUNCTIONS_SHOW_ARGS)
			{
				msg = funcName + '\n';

				// display args and current values
				var args = results[2];
				if (args)
				{
					args = args.split(',');
					for (i=0;i<args.length;i++)
					{
						var value = 'undefined';
						if (i < func.arguments.length) 	//value supplied
						{
							var indentValue = indentArgs + args[i].length + 1;
							value = func.arguments[i] + '';
							value = value.replace(/\t/g,'    ');
							if (value.length > 20)
								value = RZtrim(value.substr(0,20)) + '...';
							value = value.replace(/\n/g,'\n' + RZdup(indentValue,' '));
						}
						msg += RZdup(indentArgs,' ') + args[i] + '='
							   + value
							   + '\n';
					}
				}
				funcName = msg;
			}
			// for anonymous, display first non-blank line of function body
			if (funcName.indexOf('anonymous(') != -1)
			{
				results = results[3].match(/\s*(\w+.*)/);
				if (results)
				{
					funcName += RZdup(indentArgs,' ') + '{' + results[1] + '...}\n';
				}
			}
			if (count == 1)
			{
				if (isDebug)
					trace += 'DEBUG MODE pause in: ' + funcName + 'CALLED FROM...\n';
				else
					trace += 'CALLED FROM...\n' + RZdup(indentFunc,' ') + funcName;
			}
			else
				trace += '    ' + funcName + "";

			if (func.caller == func) break;		//NS 4.0 bug workaround
			if (count > RZdisplayCaller.MAX_FUNCTIONS) break;	//probably in recursive loop (e.g. calendar setup())
		}	// end trace stack

		// append main html file
		RZdisplayCaller.fn = funcName;
		var filepath = location.pathname;
		filepath = filepath.replace(/\\/g,'/');
		RZdisplayCaller.filename = filepath;
		filepath = filepath.substr(filepath.lastIndexOf('/')+1)
		trace += '    ' + filepath;

		if (isDebug)
			return isDebugYes || confirm(trace + '\n\nStart Debugger?');
	}
	catch (e) {}	//ignore js errors

	return trace;
}
/*---------------------------------------------------------------------------------------
Display all object values and expand object children down to OBJECT_DEPTH

Can also be used to return display value for other types (i.e. boolean, number or string) OR
	*undefined*, *empty*, *null*, *true*, *false*

TODO: typeof undefined is not displayed properly
	  html elements have el.contructor == Element is true
---------------------------------------------------------------------------------------*/
function RZdisplayObject(obj,name)
{
	try
	{
		return RZdisplayObjectProcess(obj,name);
	}
	catch (e)
	{
		RZdisplayObject.display += '\nException Displaying Object:\n' + e.description;
		return RZdisplayObject.display;
	}
}
function RZdisplayObjectProcess(obj,name,indent,isArray)
{
	var i, e, results;

	//assume top level starting point, initialize variables
	if (typeof(indent) == 'undefined')
	{
		indent = 0;
		RZdisplayObject.objectCount = 0;
		RZdisplayObject.quit = false;
		RZdisplayObject.lastTypeObject = false;
		RZdisplayObject.firstObject = true;
		RZdisplayObject.display = '';			//build as processed in case exception
	}
	//----- Initialize any undefined RZdisplayObject settings
	if (!RZdisplayObject.OBJECT_LIMIT)
		RZdisplayObject.OBJECT_LIMIT = 100;		//max number of object displayed without prompt
	if (!RZdisplayObject.OBJECT_DEPTH)			//TODO:
		RZdisplayObject.OBJECT_DEPTH = 5;		//max depth for object display
	if (!RZdisplayObject.INDENT_SIZE)
		RZdisplayObject.INDENT_SIZE = 4;		//max depth for object display
	if (!RZdisplayObject.MAXLINE)
		RZdisplayObject.MAXLINE = 500;			//max characters displayed for any value
	if (typeof RZdisplayObject.SHOW_PROTOTYPE == 'undefined')
		RZdisplayObject.SHOW_PROTOTYPE = false;	//true to display prototype elements
	if (typeof RZdisplayObject.SHOW_TYPE == 'undefined')
		RZdisplayObject.SHOW_TYPE = true;		//true to display non-object data types
	if (!RZdisplayObject.MARKER)
		RZdisplayObject.MARKER = '&#8226;';		//used for null, empty, etc
	if (!RZdisplayObject.EOL_MARKER)
		RZdisplayObject.EOL_MARKER = '&#172;';	//end of non-object value
	if (!RZdisplayObject.OBJECT_SPACING)
		RZdisplayObject.OBJECT_SPACING = '\n';	//spacing before and after object

	//----- Set work variables for this depth
	var spaces = RZdup(indent * RZdisplayObject.INDENT_SIZE, "&nbsp;");
	var spacesPlus = spaces + RZdup(RZdisplayObject.INDENT_SIZE, "&nbsp;");
	var spacesPlusPlus = spacesPlus + RZdup(RZdisplayObject.INDENT_SIZE, "&nbsp;");

	var type = '';
	var isEmpty = true;
	var isObject = true;
	var isArrayElement = false;
	if (isArray && !isNaN(name))
		isArrayElement = true;
	var objAdjust = obj;

	//----- Determine type
	if (obj && obj.constructor == Array)
	{
		type = 'array';
		isArray = true;
		//objAdjust = {length: obj.length}
		//for (i in obj) {objAdjust[i] = i};
	}

	else if (obj && obj.constructor == Function)
		type = 'function';

	//----- Not called with object, display value of obj argument
	else if (typeof(obj) != 'object' || (indent==0 && obj === null))
		return getValue(obj);

	//----- Headings
	if (type) type += ' ';
	if (indent == 0)	//display for top level
	{
		if (isObject)
		{
			if (!name) name = '[' + type + 'object]: ';
			RZdisplayObject.display += name + '\n';
			indent = 1;
		}
	}
	else
	{
		RZdisplayObject.display += spaces;
		if (isArrayElement)
			RZdisplayObject.display += '[' + name + ']: (' + type + 'object)\n';
		else
			RZdisplayObject.display += '(' + type + 'object): ' + name + '\n';
		//RZdisplayObject.display += spaces + '[object' + type + ']: ' + name + '\n';
	}

	//----- Iterate through the elements in obj; NOTE: when typeof(obj)==function, no iteration takes place
	//		Use objAdjust defined above since for (i in obj) does not find array length property
	for (i in objAdjust)
	{
		// process OBJECT within obj (including functions)
		if (typeof(obj[i]) == 'object' || typeof(obj[i]) == 'function')		//expand nested object
		{
			if (overLimit()) continue;
			if (typeof(obj[i]) == 'function' && skipPrototype(Function)) continue;

			var prefix = '';
			if (RZdisplayObject.firstObject && !RZdisplayObject.lastTypeObject)
				prefix = RZdisplayObject.OBJECT_SPACING;

			// move down another level
			RZdisplayObject.display += prefix + spaces + RZdisplayObjectProcess(obj[i],i,indent,isArray);
			if (RZdisplayObject.display.substr(RZdisplayObject.display.length-2,1) != '\n')		//don't need newline if returned from nested call
				RZdisplayObject.display += RZdisplayObject.OBJECT_SPACING;

			RZdisplayObject.firstObject = false;
			RZdisplayObject.lastTypeObject = true;
			isEmpty = false;
		}
		// process NON-OBJECT element within obj
		else
		{
			if (skipPrototype()) continue;		// if not displaying prototype variables
			if (isArray && isArrayElement) RZdisplayObject.display += spaces;		// extra indentation for array objects

			var value = getValue(obj[i]) 		// determine non-object value


			value = value.replace(/\n/gm,'\n'+spacesPlusPlus);	//apply indent to all lines
			value = RZdisplayObject.display += spacesPlus + i + ': ' + value + '\n';

			RZdisplayObject.lastTypeObject = false;
			isEmpty = false;
		}
	}

	//----- Done iterating through elements, if nothing displayed, indicate why
	if (isEmpty)
	{
		// extra indentation for array objects
		if (isArray) RZdisplayObject.display += spaces;

		// special values: null, function, empty
		if (obj === null)							//null object
			RZdisplayObject.display += spacesPlus + RZdisplayObject.MARKER + 'null' + RZdisplayObject.MARKER + '\n';

		else if (obj.constructor == Function)		//function (just show name and paramters)
		{
			results = obj.toString().match(/function\s*(\w*)\s*\(([^\)]*)\)/);
			if (results)
				RZdisplayObject.display += spacesPlus + results[0] + '...\n'
			else									//name not found (should not get here)
				RZdisplayObject.display += spacesPlus  + RZdisplayObject.MARKER+ 'unknown function' + RZdisplayObject.MARKER;
			RZdisplayObject.lastTypeObject = false;
		}
		else if (isEmpty)							//empty object (must test after function test above)
			RZdisplayObject.display += spacesPlus + RZdisplayObject.MARKER + 'no elements' + RZdisplayObject.MARKER + '\n';
	}
	// remove last newline (it gets added by caller)
	RZdisplayObject.display = RZdisplayObject.display.substring(0,RZdisplayObject.display.length-1);
	//-----------------------------
	return RZdisplayObject.display;
	//-----------------------------

	/*
	*	Return true if not displaying any more nested objects.
	*/
	function overLimit()
	{
		if (RZdisplayObject.quit || indent >= RZdisplayObject.OBJECT_LIMIT) return true;
		if (++RZdisplayObject.objectCount > RZdisplayObject.OBJECT_LIMIT)
		{
			if ( confirm(RZdisplayObject.OBJECT_LIMIT + ' objects expanded\n'
			   + 'Display ' + RZdisplayObject.OBJECT_LIMIT + ' more?'))
				RZdisplayObject.objectCount = 0;
			else
				RZdisplayObject.quit = true;
		}
		return false;
	}
	/*
	*	Return true if not displaying prototype functions or variables.
	*	type (optional: Function if checking for Function constructor
	*/
	function skipPrototype(type)
	{
		var status = false;
		/* was throwing exceptions (replaced with code below)
		if (!RZdisplayObject.SHOW_PROTOTYPE
		|| !obj[i].hasOwnProperty(obj))
			status = true;
		else
			status = false;
		*/

		//js error from RZupdateFieldList trace after RZclearlist(...)
		if (!RZdisplayObject.SHOW_PROTOTYPE
		&& obj && i && obj[i]
		&& obj[i].constructor
		&& obj[i].constructor.prototype)
		{
			if (type && type == Function
			&& obj[i].constructor.prototype.constructor == type)
				status = true;

			//else if (!type && obj[i].constructor.prototype == i)
			else if (!type
			&& (obj.constructor != Array || isNaN(i))	//added so array[0] displays
			&& obj[i].constructor.prototype == i)
				status = true;
		}
		return status;

		if (!RZdisplayObject.SHOW_PROTOTYPE
		|| !obj[i].hasOwnProperty(obj))
			status = true;
		else
			status = false;
	}
	/*
	*	determine non-object value
	*/
	function getValue(value)
	{
		var type = typeof(value);

		if (type === 'undefined')
			value = RZdisplayObject.MARKER + 'undefined' + RZdisplayObject.MARKER;

		else if (value === '')
			value = RZdisplayObject.MARKER + 'empty string' + RZdisplayObject.MARKER;

		else if (value === null)
			value = RZdisplayObject.MARKER + 'null' + RZdisplayObject.MARKER;

		else if (value === true)
			value = RZdisplayObject.MARKER + 'true' + RZdisplayObject.MARKER;

		else if (value === false)
			value = RZdisplayObject.MARKER + 'false' + RZdisplayObject.MARKER;

		else if (value.length > RZdisplayObject.MAXLINE)
			value = value.substr(0,RZdisplayObject.MAXLINE) + '...' + RZdisplayObject.EOL_MARKER;

		else
			value += RZdisplayObject.EOL_MARKER;

		if (RZdisplayObject.SHOW_TYPE && type !== 'undefined'
		&& value.indexOf(RZdisplayObject.MARKER + 'empty') != 0
		&& value.indexOf(RZdisplayObject.MARKER + 'null') != 0)
			value = '(' + type + '): ' + value;

		return value;
	}
}
/*-----------------------------------------------------------------------------
-----------------------------------------------------------------------------*/
function RZdisplayMessage(msg)
{
	if (!msg) msg = '';
	var el = document.getElementById('errorMessage');
	if (!el)
		el = document.getElementById('message');
	if (!el)
		el = document.getElementById('msg');

	if (el)
		el.innerHTML = msg == '' ? '&nbsp;' : msg;
	else if (msg)
		alert(msg);
	if (msg)
		return false;
	return true;
}
/*---------------------------------------------------------------------------
Load Color Picker.
----------------------------------------------------------------------------*/
function RZcolorpicker(field)
{
	RZ.colorfield = field;
	while (RZ.colorfield.tagName != 'INPUT')
	{
		RZ.colorfield = RZ.colorfield.previousSibling
		if (RZ.colorfield == null || typeof RZ.colorfield == 'undefined')
		{
			RZalert('Input field does not preceed Color Picker Icon')
			return false;
		}
	}
	features = 'width=320,height=160,scroll=auto,status=no,titlebar=no,resizable=yes';
	var x = (screen.availWidth - 320) / 2 - 10;
	var y = (screen.availHeight - 160) / 2 - 30;
	if (y < 50)
		y = 0;

	if(navigator.appVersion.indexOf('MSIE') == -1)  // Netscape
	{
		features += ',screenX=' + x.toString()
				 +  ',screenY=' + y.toString();
	}
	else                                            // IE browser
	{
		features += ',left=' + x.toString()
				 +  ',top=' + y.toString();
	}
	colorPicker = window.open('/revize/util/snippet_helper_colorpicker.html','',features);
	return true;
}
/*---------------------------------------------------------------------------
Spellcheck input or textarea field proceeding specified field.
----------------------------------------------------------------------------*/
function RZspellcheck(field)
{
	RZ.spellcheckfield = field;
	while (RZ.spellcheckfield.tagName != 'INPUT'
	&& RZ.spellcheckfield.tagName != 'TEXTAREA')
	{
		RZ.spellcheckfield = RZ.spellcheckfield.previousSibling
		if (RZ.spellcheckfield == null || typeof RZ.spellcheckfield == 'undefined')
		{
			RZalert('Input field does not preceed Spell Check Icon')
			return false;
		}
	}

	var sURL = "/revize/spellcheck/spellingchecker.html";

	features = 'width=490,height=400,scroll=auto,status=yes,resizable=yes,'
	         + 'titlebar=yes,menubar=no,location=no,'
	         + 'channelmode=0,directories=0,fullscreen=0,center=1'

	RZspellcheckwin = window.open(sURL,'_blank',features);
	return true;
}
/*-----------------------------------------------------------------------------
Indicate script loaded for RZloadjscss()
-----------------------------------------------------------------------------*/
if (RZ.scriptLoaded)
	RZ.scriptLoaded.snippet_helper = true;
/************************* End of snippet_helper.js *************************/


/*--------------------------------------------*/
/*BOOKMARK **snippet_helper_fieldvalues.js****/
/*------------------------------------------*/
/*
#############################################################################
##
## 	file: .../util/snippet_helper_fieldvalues.js
##
##	File automatically included on Revize Edit List and Edit Form
##
##	Can be included on template however it must be included as jsp if needed on production server.
##
##	For Example:
##
##		< script language="JavaScript" type="text/JavaScript">
##		< @include file="/util/snippet_helper_fieldvalues.js">
##		< /script>
##
##		NOTE: space after < above so jsp & script code does not incorrectly process
##
##	Doc-O-Matic Notes:
##	-----------------
##		Blank line needed after this comment block
##		See snippet_helper.js for documentation conventions
*/

if (typeof RZ == 'undefined') var RZ = new Object();
RZ.snippet_helper_fieldvalues_version = '10-20-2014';

if (!window.EZ) EZ = {};
if (!EZ.isFeature) EZ.isFeature = function() {return false};

/*---------------------------------------------------------------------------------------------
Validate arguments
Internal: called by RZgetFieldValue & RZgetFieldValue
---------------------------------------------------------------------------------------------*/
function RZfieldValueProperties( prefix, field, value, options )
{
	var i,j;
	var message = '';
	var notFormElement = false;
	var fieldInfo = {prefix: prefix, field: null, options: options};

	//----- Find field argument
	if (typeof field == 'string')
	{
		fieldInfo.name = field;
		fieldInfo.nameType = 'string';
		if (document.forms.XMLForm && document.XMLForm[field])
			field = document.XMLForm[field];

		else if (document.forms.length > 0)
		{
			for (i=0;i<document.forms.length;i++)
			{
				if (document.forms[i] && document.forms[i][field])
				{
					field = document.forms[i][field];
					break;
				}
			}
		}
	}
	if (typeof(field) == 'object')
		fieldInfo.field = field;
	else if (typeof field == "string")
		notFormElement = true;

	//----- Make sure field argument is valid
	if ( typeof field == 'undefined' )
		message = 'field argument is undefined;\n'
	else if (field == null)
		message = 'field argument is null;\n'
	else if( typeof field == "string" )
		message = 'field argument not found in any form on page;\n'
	else if( typeof field != "object" )
		message = 'field argument is not valid form field;\n';

	//----- Validate field name and field type
	else
	{
		//----- Check field name
		if( typeof field.name != 'undefined')
			fieldInfo.name = field.name

		else if (typeof field[0] != 'undefined' && typeof field[0].name != 'undefined')
			fieldInfo.name = field[0].name

		else if (field.id)
		{
			field.name = field.id;
			fieldInfo.name = field.name
		}

		else
		{
			message += 'field argument does not have or name property;\n'
			notFormElement = true;
		}

		//----- Check field type
		if( typeof field.type != 'undefined')
			fieldInfo.type = field.type

		else
		{
			if ( typeof field[0] != 'undefined' && typeof field[0].type != 'undefined')
			{
				fieldInfo.type = field[field.length-1].type
				if (fieldInfo.type != 'radio')
					message += 'multiple form fields have same name\n'
			}
			else
			{
				notFormElement = true;
				message += 'field argument does missing type property\n'
			}
		}
	}

	//----- Check value argument
	if (prefix == 'RZsetfieldvalue')
	{
		if (typeof value == 'undefined' || value == null)
			message += 'value argument is invalid';
	}
	/* this could be options
	else if (prefix == 'RZgetfieldvalue')
	{
		if (typeof value != 'undefined')
			message += 'RZgetfieldvalue called with value argument\n'
					 + '(probably should be calling RZsetfieldvalue).';
		else
			fieldInfo.value = 'N/A';
	}
	*/

	//----- If error report via RZalert
	if (notFormElement)
		message += '(probably not a valid form element)'

	else if (field)
	{
		if (!fieldInfo.nameType)
			fieldInfo.nameType = 'field';

		fieldInfo.formName = '...';
		if (field.parentElement && field.parentElement.name)
			fieldInfo.formName = field.parentElement.name;

		//parentElement used above is undefined for IE10- not sure about IE11
		else if (EZ.isFeature("EZ") && field.parentNode && field.parentNode.name)
			fieldInfo.formName = field.parentNode.name;
	}

	fieldInfo.message = message;
	if (fieldInfo.message)
		RZfieldValueAlert(fieldInfo);

	//----- Make a trace log entry of successfull call
	if (RZ.trace)
	{
	//	RZtrace(' ', RZalert(fieldInfo,true))
	}

	//----- Return field properties
	RZfieldValueProperties.info = fieldInfo;
	return fieldInfo;
}
/*---------------------------------------------------------------------------------------------
Display error message via RZalert

Internal: called by other fieldvalidate functions
---------------------------------------------------------------------------------------------*/
function RZfieldValueAlert(fieldInfo,isTrace)
{
	var name = fieldInfo.name;
	if (fieldInfo.nameType == 'string')
		name = '"' + name + '"';
	else if (fieldInfo.nameType == 'field')
		name + 'document.' + fieldInfo.formName + '.' + fieldInfo.name;
	else
		name = 'undefined';

	var message = fieldInfo.prefix + '(' + name;
//debugger;

	//set call has value argument
	if (fieldInfo.prefix.indexOf('RZsetfieldvalue') >= 0)
		message +=  ',' + fieldInfo.value;

	//get may have options
	else if (typeof (fieldInfo.options) != 'undefined')
		message += ',' + fieldInfo.options;

	message = message + ')\n';

	var more = ''
	if (fieldInfo.nameType == 'string' && fieldInfo.formName != '...')
		more += 'form name: ' + fieldInfo.formName;
	if (fieldInfo.type)
		more += '  field type: ' + fieldInfo.type;
	if (more)
		message += RZtrim(more).replace(/  /g,';&nbsp; ') + '\n';

	fieldInfo.message = message + fieldInfo.message;

	if (RZ.trace)
		RZtrace('-',fieldInfo.message);

	/*DCO 10-20-2014 replaced by above
	//----- If not testing and not trace call, display alert
	if (!RZfieldValueProperties.testing && !isTrace)
	{
		RZalert(fieldInfo.message,true,true);
	}
	*/
}

/*---------------------------------------------------------------------------------------------
##	SET Field value (exists in Dreamweaver...\RevizeCommon.js and \util\snippet_helper.js)


Set value of specified field object based on form field type.

TODO: expand description for each field type

Parameters:
	field-		Form Field Object (e.g. XMLForm.name)
	value-		value set in field object

NOTES:
	ADDITIONAL FIELD PROPERTIES
	if dropdown			field.initialized =undefined before the first RZsetfieldvalue call
					                      =-1 (true) after if existing option

---------------------------------------------------------------------------------------------*/
function RZsetFieldValue( field, value, options ) { return RZsetfieldvalue( field, value, options ) }
function RZsetfieldvalue( field, value, options )
{
	var i,j,message

	//TODO: true and false are cleared because (value == ' ') is true
	if (value === ' ') value = ''		// Revize cludge (uninitialized fields set to blank)
	if (typeof(value) == 'boolean') value = value.toString();

	//----- Check for valid arguments
	var fieldInfo = RZfieldValueProperties( 'RZsetfieldvalue', field, value );
	if (fieldInfo.message)
		return false;

	var field = fieldInfo.field;
	var fieldName = fieldInfo.name;
	var fieldType = fieldInfo.type;

	//********** text field **********
	if (fieldType == 'text'
	|| fieldType == 'password'
	|| fieldType == 'textarea'
	|| fieldType == 'hidden')
	{
		var disabled = null
		if (typeof field.disabled != 'undefined')
		{
			disabled = field.disabled
			field.disabled = false
			field.disabled = ''
			field.value = value
			field.disabled = disabled
		}
		else
			field.value = value
	}
	//********** checkbox field **********
	else if (fieldType == 'checkbox')
	{
		// check if any non blank passed value equals the field value
		// (even if passed value is false or 0)
		if ( (value != '') && (value.toLowerCase()==field.value.toLowerCase()) )
			field.checked = true;
		else if ( value == '' && !field.checked)	//if blank value & not default checked..
		//DCO 08-28-2012 TODO: replace above else with below else after testing
		//else if (value == null || value == 'null' || value == '')
		{							//if passed value if blank...
			//DCO 08-28-2012 TODO: activate after testing
			//if (!field.checked)		//...only set false if checked not set by default
				field.checked = false;
		}
		else
		{							// value is not blank...
			if(value.toLowerCase() != 'off'
			&& value.toLowerCase() != 'no'
			&& value.toLowerCase() != 'false'
			//DCO 08-28-2012 TODO: activate after testing
			//&& value.toLowerCase() != 'null'
			&& value != '0')		//...check if not a false value
				field.checked = true;
			else					//...otherwise uncheck
				field.checked = false;
		}
	}
	//********** radio button field **********
	else if (fieldType == 'radio')
	{
		var radioChecked = false

		// ***** single button field *****
		// (can not test length because Netscape does not reset unless it is > 0)
		if ( typeof field[0] == 'undefined' || typeof field[0].type == 'undefined')
		{
			// checked if any non blank passed value equals the field value
			// (even if passed value is false or 0)
			if ( (value != '') && (value.toLowerCase()==field.value.toLowerCase()) )
				field.checked = true;
			else if (value == '')
			{							//if passed value if blank...
				//DCO 08-28-2012 TODO: activate after properly tested
				//if (!field.checked)	//...only set false if checked not set by default
					field.checked = false;
			}
			else // value is not blank - check if not a false value
			{
				if(value.toLowerCase() != 'off'
				&& value.toLowerCase() != 'no'
				&& value.toLowerCase() != 'false'
				&& value != '0')
					field.checked = true;
				else
					field.checked = false;
			}
			radioChecked = field.checked
		}
		// ***** multiple button fields *****
		else
		{
			// determine true / false interpretation of value
			var radioBoolean = false
			if(value.toLowerCase() == 'on'
			|| value.toLowerCase() == 'yes'
			|| value.toLowerCase() == 'true' )
				radioBoolean = true

			for (i=0; i<field.length; i++)
			{
				// if passed value matches, check button
				if (field[i].value == value)
				{
					field[i].checked = true;
					radioChecked = true;
				}
				// if non false value and not blank, uncheck default selection
				// DCO 08-28-2012: tested with latest AdminPanel
				else if (value !== '' & field[i].checked && !radioBoolean)
					field[i].checked = false;
			}

			// if no radio button checked and non false value supplied, report error
			if ( !radioChecked && (value != '') && radioBoolean )
			{
				message = 'Radio button field can not be set to passed value'
				RZcheckFieldValueAlert( 'RZsetfieldvalue - Revize Data Error', message,
										fieldName, fieldType, value )
				return
			}
		}
	}

	/*************************************************/
	/*BOOKMARK ********** drop down field ***********/
	/***********************************************/
	else if (fieldType.indexOf('select-') == 0)	// select-one or select-multiple
	{
		value = value + '';
		var choices = [value];									// single value
		if (value.indexOf('|') != -1)
			choices = value.toString().split('|')				// array of values

		var selection = field.selectedIndex
		if (value != '' && typeof field.initialized == 'undefined')
			selection = -1

		//----- emailnotify feature: If set call from RZeditformsetup() . . .
		if (options == 'init' && EZ.isFeature("EZ"))
			selection = EZ.formfields.selectDefaultValue(field, value);

		//----- Clear unspecified values, set specified values
		//		(go in reverse order so top option selected last)
		var selected = false
		for (i=field.options.length-1; i>=0; i--)
		{
			// when value is '' it also equals false so we define and use an initialize
			// property to preserve the initial selections for the first call if needed
			if (value == '|' || (value == '' && typeof field.initialized != 'undefined'))
			{
				selection = -1
				field.options[i].selected = false;
			}
			// for non blank values or after the first RZsetfieldvalue call
			else
			{
				for (j=0; j<choices.length; j++)
				{
					if( field.options[i].value == choices[j] )
					{
						selected = true
						selection = i
						field.options[i].selected = true;
						if (!EZ.isFeature("EZ")) break;	// keep selecting
					}
				}
			}
		}
		field.initialized = -1

		//----- If select-one
		if (fieldType != 'select-multiple')
			field.selectedIndex = selection

		//----- If any selections set, then clear non matching items
		else if ( selected )
		{
			RZselectmulti: for (i=field.options.length-1; i>=0; i--)
			{
				for (j=0; j<choices.length; j++)
				{
					if( field.options[i].value == choices[j] ) continue RZselectmulti
				}
				field.options[i].selected = false;
			}
		}

		//----- If nothing selected using values, select based on text values
		//		(TODO: not sure this is a good assumption)
		if (!selected && value != '' && value != '|')
		{
			for (i=field.options.length-1; i>=0; i--)
			{
				selected = false
				for (j=0; j<choices.length; j++)
				{
					if( field.options[i].text == choices[j] )
					{
						selected = true
						field.options[i].selected = true;
						break;
					}
				}
				if (!selected) field.options[i].selected = false;
			}
		}

		//----- If no dropdown option selected, display " -- select --"
		//		code below add option for single item list not dropdown
		if (EZ.isFeature("EZ"))
			EZ.formfields.selectFinish(field, value);

		//----- If nothing selected, add new option and save index in initialized
		if (field.selectedIndex == -1 && field.size == 1)
		{
			field.initialized = field.options.length
			field.options[field.options.length] = new Option('-Select-','')
			field.selectedIndex = field.initialized
		}
	}
	//********** unknown type of field **********
	else
	{
		fieldInfo.message = 'Unsupported field type';
		RZfieldValueAlert(fieldInfo);
	}
	fieldInfo.value = value;

	//TODO: may want to report issues with radio or menu/list
	return fieldInfo.message == '';		//true if value updated
}
/*---------------------------------------------------------------------------------------------
## 	GET Field value (exists in Dreamweaver...\RevizeCommon.js and \util\snippet_helper.js)
##
##	TODO: before backfitting into Dreamweaver ...
##	      1. need to add boolean option for all checkbox calls
##	      2. test all types (lower and uppercase) Text may be valid

Get value of specified field based on form field type.

Parameters:
	field-		Form Field Object (e.g. XMLForm.name)
	options-	optional options as specified below

Parameters Format:
	<table 20c%>
	options          Available Arguments
	---------------  -----------------------------------------------
	text             If drop down, return text rather than value
	state            If checkbox, return true if checked; else false
	</table>

TODO: Complete returns documentation


Returns:
  For text fields, always returns the field value

  For drop down fields, return value of currently selected item or empty string

  For checkbox, ???

  For radio buttons, ???

NOTES:
	ADDITIONAL FIELD PROPERTIES

	checkbox			field.state = true if returning true/false rather than value

						(not tested or intregrated into setfieldvalue)

	checkbox,dropdown	field.unchecked = value to return when unchecked (tested)

	dropdown			field.text = true to return text rather than value when selected
---------------------------------------------------------------------------------------------*/
function RZgetFieldValue(field,options) { return RZgetfieldvalue(field,options) }
function RZgetfieldvalue(field,options)
{
	var i,j;

	//----- Check for valid arguments
	var fieldInfo = RZfieldValueProperties( 'RZgetfieldvalue', field, value, options );
	if (fieldInfo.message)
		return;

	var field = fieldInfo.field;
	var fieldName = fieldInfo.name;
	var fieldType = fieldInfo.type;
	var value = ''	// default value as empty
	if (typeof options == 'undefined') options = '';

	//********** text field **********
	if (fieldType == 'text'
	|| fieldType == 'password'
	|| fieldType == 'textarea'
	|| fieldType == 'hidden')
	{
		value = field.value
	}
	//********** checkbox field **********
	else if (fieldType == 'checkbox')
	{
		//----- If returning boolean value, just return true / false
		if (options.toLowerCase().indexOf('state') >= 0
		|| typeof field.state != 'undefined')
			value = field.checked

		//----- returning non-boolean value
		else
		{
			if (field.checked)
			{
				if (field.value != '')
					value = field.value
				else
					value = 'on'
			}

			// can't use blank for not checked in order to support initial state
			else
			{
				if (typeof field.unchecked != 'undefined')	// user defined uncheck value
					value = field.unchecked
				else
					if (field.value == 'true')		//DCO 10-20-2014
						value = 'false';			//		 ''
					else if (field.value != 'off')
						value = 'off'
					else
						value = 'false'		//less likely to be used as value than no
			}
		}
	}

	//********** radio button field **********
	else if (fieldType == 'radio')					// radio button
	{
		// check for single radio button
		// can't use length because Netscape does not reset unless its > 0
		if ( typeof field[0] == 'undefined' || typeof field[0].type == 'undefined')
		{
			// value defaults to 'on' if no value defined but not if value set to empty string
			// must store non-blank value in database to differenciate values
			if (field.checked)
			{
				value = field.value
				if (value == '') value = 'on'
			}
		}else
		{
			for (i=0; i<field.length; i++)
			{
				if (field[i].checked)
				{
					value = field[i].value
					break;
				}
			}
		}
	}

	//********** drop down field **********
	else if (fieldType.indexOf('select-') == 0)	// select-one or select-multiple
	{
		if (field.selectedIndex < 0)
		{
			//return empty string for no selection: related update in RZeditformsetup()
			if (EZ.isFeature("EZ"))
				value = '';
			else if (typeof field.unchecked == 'undefined')
				value = '|'
			else
				value = field.unchecked
		}
		else
		{
			for (i=0; i<field.options.length; i++)
			{
				if (field.options[i].selected)
				{
					if (options.indexOf('text') >= 0 || field.text)
						value += '|' + field.options[i].text
					else
						value += '|' + field.options[i].value
				}
			}
			if (value.substring(0,1) == '|') value = value.substring(1)
		}
	}

	//********** unknown type of field **********
	else
	{
		fieldInfo.message = 'Unsupported field type';
		RZfieldValueAlert(fieldInfo);
	}

	//RZtrace( '', 'field value: ' + value )
	fieldInfo.value = value;		//updated unless unknown fieldType
	return value;
}
/*---------------------------------------------------------------------------------------------
Clear a list by setting all options to null.  Setting length does not do the job.
---------------------------------------------------------------------------------------------*/
function RZclearList(theList)
{
	if (typeof theList != 'object') return

	for(var i=theList.options.length-1;i>-1;i--)
		theList.options[i] = null;
	theList.options.length = 0
}
/*---------------------------------------------------------------------------------------------
Remove a drop down or list option

Parameters:
listObject-		Down down or list object
opt-			Index of select option to be removed
---------------------------------------------------------------------------------------------*/
function RZselectOptionRemove(listObject, opt)
{
	if (typeof listObject != 'object') return

	var len = listObject.options.length
	if (opt < 0 || opt >= len) return

	if (opt < len-1)
	{
		for(var i=opt;i<len-1;i++)
		{
			text = listObject.options[i+1].text
			value = listObject.options[i+1].value
			listObject.options[i] = new Option(text,value)
		}
	}

	listObject.options[len-1] = null
	listObject.options.length --
}

/*---------------------------------------------------------------------------------------------
Set dropdown or list option

Parameters:
listObject-		Down down or list object
text-			Text displayed for option
value-			option value
selected-		=true always select new option; =false never select
				='noselection' select if nothing yet selected

---------------------------------------------------------------------------------------------*/
function RZselectOptionAdd( listObject, text, value, selected )
{
	if (typeof listObject != 'object' || listObject == null) return

	var opt = listObject.options.length		//add and select record id

	//----- Don't know why but setting value at same time as defining option causes
	//		dropdown box to be hidden therefore DO NOT use the following form
	//		listObject.options[opt] = new Option(text,value);
	listObject.options[opt] = new Option(text);
	listObject.options[opt].value = value;

	if (selected == 'true' || selected == true)
		listObject.options[opt].selected = true;

	if (selected == 'noselection' && listObject.selectedIndex == -1)
		listObject.options[opt].selected = true;
}
/*---------------------------------------------------------------------------------------------
Adjust width & hieght propotionally if width attribute > maxWidth parameter
---------------------------------------------------------------------------------------------*/
function RZadjust_width_height(field,maxWidth)
{
	var results;
	var width = '';
	var height = '';
	var html = document.field.value;
	var patternWidth = /(width=")(\d*)(")/;
	var patternHeight = /(height=")(\d*)(")/;
	results = html.match(patternWidth);
	if (results != null)
		width = results[2];
	results = html.match(patternHeight);
	if (results != null)
		height = results[2];
	if (!width || !height)
	{
		if (!confirm('Could not determine if width is correct.\n\nContinue?'))
		return false;
	}
	else if (width > maxWidth)
	{
		height = parseInt(height * maxWidth / width);
		width = maxWidth;
		html = html.replace(patternWidth,'$1' + width + '$3');
		html = html.replace(patternHeight,'$1' + height + '$3');
		document.field.value = html;
	}
	return true;
}
/*---------------------------------------------------------------------------------------------
If field starts with 10 digits with or without ( ) - or spaces, convert to:
	248-555-1234 ext 24
---------------------------------------------------------------------------------------------*/
function RZformatphone(field)
{
	var value = RZgetfieldvalue(field);
	value = RZtrim(value);
	//                             1=248            2=555         3=1234    4=x24
	var results = value.match(/^\(?(\d{3})\)?[\-\s]?(\d{3})[\-\s]?(\d{4})\s*(.*)/);
	if (results)
	{
		value = results[1] + '-' + results[2] + '-' + results[3] + ' ' + results[4];
		value = RZtrim(value);
		RZsetfieldvalue(field,value);
	}
	return value;
}
/*-----------------------------------------------------------------------------
Simple phone number validation:
-must start with 10 digits: optionally formatted with: - ( ) and spaces
-non-digits must follow space and at least 10 digits
-----------------------------------------------------------------------------*/
function RZvalidatephone(field)
{
	var value = RZgetfieldvalue(field);
	if (value.length > 0)
	{
		var offset = value.indexOf(' ');
		if (offset == -1)
			offset = value.length;
		value = value.substr(0,offset);

		// Check for 10 digits at beginning after removing "(", ")", "-" and spaces
		if (value.replace(/[^\d]/g,'').length < 10)
			return 'At Least 10 Digits Required before Non Digits';

		// Check for invalid characters before 1st space
		if (value.search(/[^\(\)\d-\s]/) != -1)
			return 'Non Numeric Characters Only Allowed After Space';

		// Update field if value starts with 10 digits
		RZformatphone(field);
	}
	return '';
}
/*-----------------------------------------------------------------------------
-----------------------------------------------------------------------------*/
function RZvalidate_email(field)
{
	var value = RZgetfieldvalue(field);
	if (!value) return '';

	var emailRegEx = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i;
	if (value.search(emailRegEx) == -1)
		return 'Improper Email Address';
	return '';
}


/*------------------------------------------*/
/*BOOKMARK **calendar_app_view_common.js****/
/*----------------------------------------*/
RZ.calendar.javascript_version_common = '08-22-2015';

/*-----------------------------------------------------------------------------
Define RZ object and variables usually defined in jsp headers
-----------------------------------------------------------------------------*/
if (typeof RZ == 'undefined') var RZ = new Object();
if (typeof RZ.calendar == 'undefined') RZ.calendar = new Object();
if (typeof RZ.calendar.name == 'undefined') RZ.calendar.name = "";
if (typeof RZ.calendar.group == 'undefined') RZ.calendar.group = "";
if (typeof RZ.calendar.view == 'undefined') RZ.calendar.view = "";
if (typeof RZ.calendar.viewdate == 'undefined') RZ.calendar.viewdate = null;
if (typeof RZ.calendar.debug == 'undefined') RZ.calendar.debug = false;

/*-----------------------------------------------------------------------------
Define RZ authentication variables set/used in various files across application
-----------------------------------------------------------------------------*/
// credentials for all defined calendars
if (typeof RZ.calendar.credentials == 'undefined') RZ.calendar.credentials = new Array();

// credentials for current calendar being displayed
if (typeof RZ.calendar.user == 'undefined') RZ.calendar.user = "";
if (typeof RZ.calendar.roles == 'undefined') RZ.calendar.roles = "";
if (typeof RZ.calendar.administrators == 'undefined') RZ.calendar.administrators = "";
if (typeof RZ.calendar.editors == 'undefined') RZ.calendar.editors = "";
if (typeof RZ.calendar.rolluplist == 'undefined') RZ.calendar.rolluplist = "";
/*-----------------------------------------------------------------------------------
Global variables:
-----------------------------------------------------------------------------------*/

RZ.calendar.openaction = ''				//action to preform when page opens
RZ.calendar.config = false;				//not doing config operation
RZ.calendar.ids = new Object();			//indexed by lowercase calendar name
RZ.calendar.names = new Object();		//reverse lookup of mixed case calendar name
RZ.calendar.groupids = new Object();	//group ids indexed by calendarid
RZ.calendar.groupnames = new Object();	//group ids indexed by groupid
RZ.calendar.mappingLog = [];

/*BOOKMARK RZ.calendar.data*/
RZ.calendar.data = {};
RZ.calendar.data.globalDataLoading = false;
RZ.calendar.data.globalDataCurrent = false;
RZ.calendar.data.eventLoadingDeferred = false;
RZ.calendar.data.eventDataLoading = false;
RZ.calendar.data.eventDataCurrent = false;
RZ.calendar.data.homeRefreshEventActive = false;

/*-----------------------------------------------------------------------------
Define variables commonly used in Calendar Application
-----------------------------------------------------------------------------*/
/*BOOKMARK Calendar Constants*/
RZ.calendar.constants = {};
RZ.calendar.constants.deleteEvent = "delete_event=";
RZ.calendar.constants.deleteCalendar = "delete_calendar=";
RZ.calendar.constants.LOAD_WAIT_TIME = 10000;
RZ.calendar.constants.headerMinHeight = '15px';
RZ.calendar.constants.processWait = 2000;	//delay before processing updated properties

RZ.calendar.constants.nonBreakDash = String.fromCharCode(8209);
RZ.calendar.constants.eventContinuedAlt = 'Event continues from prior day';
RZ.calendar.constants.eventContinuedSrc = 'continued_icon.png';
RZ.calendar.constants.eventRepeatAlt = 'Recurring Event';
RZ.calendar.constants.eventRepeatSrc = 'recurring_icon.gif';
RZ.calendar.constants.eventSignupAlt = 'Signup Form';
RZ.calendar.constants.eventSignupSrc = 'sign_up_icon.gif';
RZ.calendar.nextsavereturn = 'refreshCalendarData()';

RZ.calendar.versionDisplay = RZ.calendar.version.replace(/-/g,RZ.calendar.constants.nonBreakDash);
RZ.calendar.version = RZ.calendar.version.replace(/-/g,RZ.calendar.constants.nonBreakDash);

RZ.calendar.now = new Date();
RZ.calendar.today = new Date(RZ.calendar.now.getFullYear,RZ.calendar.now.getMonth(),RZ.calendar.now.getDate());
RZ.calendar.dateMax = new Date(RZ.calendar.now.getFullYear() + 5, RZ.calendar.now.getMonth());
RZ.calendar.dateMin = new Date(RZ.calendar.now.getFullYear() - 2, RZ.calendar.now.getMonth());
RZ.calendar.repeatDateMax = new Date(RZ.calendar.now.getFullYear() + 2, RZ.calendar.now.getMonth());
RZ.calendar.repeatCountMax = 100;

RZ.calendar.minDurationMinutes = 15;
RZ.calendar.maxDurationMinutes = 180;
RZ.calendar.maxDurationHours = 12;
RZ.calendar.maxDurationDays = 7;

RZ.calendar.filenames = {};
RZ.calendar.filenames.globalData = 'calendar_db_data.xml';

RZ.calendar.msg = {};
RZ.calendar.msg.homeframeNA = 'Calendar closed or not accessible.';

RZ.calendar.openWins = {};
RZ.calendar.winNames = {};
RZ.calendar.winNames.home = 'RZcalendar_home';
RZ.calendar.winNames.eventDetail = 'RZcalendar_eventDetail';
RZ.calendar.winNames.eventDetailEditForm = 'RZcalendar_eventDetailEditForm';
RZ.calendar.winNames.signupForm  = 'RZcalendar_signupForm';
RZ.calendar.winNames.configMain = 'RZcalendar_configMain';
RZ.calendar.winNames.configForm = 'RZcalendar_configForm';


/*BOOKMARK TODO: Convert constants --> RZ.calendar...*/

//set for time not defined
var RZblankTime = 100;

//set for the time delay in the calendar heading

var RZtimeOut = 1000;

//set for the time delay for the notable event display
var RZtimeOut_notable = 1500;

//set for the time delay the display of the main bodies
var RZtimeOut_main = 1000;

var RZcount = 0;

//set to default start hour
var RZdefaultStartTimeHour = 8;

//month array used in HTML for all the views
var RZmonthNameArr = ["January", "February", "March", "April", "May", "June",
						"July", "August", "September", "October", "November", "December"];

var RZmonthArray = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

//time array to get the time in the day view
var RZtimeArr = ["12","1","2","3","4","5","6","7","8","9","10","11","12","1",
				"2","3","4","5","6","7","8","9","10","11"];

// day array to get the day name
var RZdayArr = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];

// variable which sets the summary length
var RZsummaryLength = 30;

//variable which represents a blank when entered in the url
var RZcharSpace = "%20";

//variable that specifies the minimum duration
var RZminDuration = 15;

/*-----------------------------------------------------------------------------
common entry point -- load calendar data and display or update html for page.
Created for detail iframe layer -- but main index.html code also copied.

All pages should ultimately call when they are updated.
-----------------------------------------------------------------------------*/
function calendarSetup(view, calendarId, displayDate, callback)
{
	RZ.calendar.view = view;
	RZ.calendar.id = calendarId;
	RZ.calendar.date = displayDate;

	RZ.calendar.displayWindow = this;
	RZ.calendar.displayCallback = callback;
	RZloadingDone.isCalled = false;

	var e;
	try
	{
	switch (view)
	{
		case 'detail':
		{
			RZ.calendar.viewloaded = '';
			setupView();
			break;
			//if (updateData())			//calls displayCalendar() after data loads
			//	displayCalendar();		//if data current, call displayCalendar()
		}
		default:
		{
			// look up parameters on hash: e.g. calendar name, date and default view
			RZcalendarParameters();

			// load global data, groups and calendar names / properties ...
			isGlobalDataCurrent(updateData);	//updateData() is callback

			//updateData() calls displayCalendar() after data loads which calls
			//	setupView() to update common grid html and load js & css files for
			//	specified view -- setupComplete() called after js/css files loaded.

			//setupComplete() updates codebase versions then
			//	calls displayPage() if defined (used by detail iframe) -OR-
			//	calls displayCalendarGrid() if defined -- mini & full views
			//	otherwise calls RZloadingDone() to hide loading layer.
		}
	}
	}
	catch (e)
	{
		RZloadingDone(e);
	}
}
/*-----------------------------------------------------------------------------
-----------------------------------------------------------------------------*/
function setInnerHTML(id,html)
{
	var el = id;
	if (typeof el == 'string')
		el = document.getElementById(id);
	if (el)
	{
		el.innerHTML = html;
		return true;
	}
	warn('id=' + id + ' html element NOT found','level=info');
	return false;
}
/*-----------------------------------------------------------------------------
-----------------------------------------------------------------------------*/
function isValidCalendarId(id)
{
	return typeof RZ.calendar.names[id] != 'undefined';
}
/*-----------------------------------------------------------------------------------
return current calendarId
-----------------------------------------------------------------------------------*/
function getCalendarId(calname)
{
	var id = ''
	if (calname)
	{
		if (calname.indexOf('*') == 0)
			calname = calname.substring(1);
		calname = calname.toLowerCase();
		if (RZ.calendar.ids[calname])
			id = RZ.calendar.ids[calname];
		return id;
	}
	return RZ.calendar.id;	//TODO: when called for revize action; phase out
}
/*-----------------------------------------------------------------------------
Return calendar name for specified calendarId
-----------------------------------------------------------------------------*/
function getCalendarName(id)
{
	var calname = 'Deleted Calendar';
	if (RZ.calendar.names[id])
		calname = RZ.calendar.names[id];
	return calname;
}
/*-----------------------------------------------------------------------------------
needed if RZ.calendar.ids had lowercase names
-----------------------------------------------------------------------------------*/
function getCalendarFull(calname)
{
	return getCalendarName( getCalendarId(calname) );
}
/*-----------------------------------------------------------------------------
Return Title case calendar name as stored in DB
-----------------------------------------------------------------------------*/
function RZcalendarName(calname) { return RZcalendarNameTitleCase(calname) }
function RZcalendarNameTitleCase(calname)
{
	if (typeof calname == 'undefined')
		calname = RZ.calendar.name;

	if (calname) getCalendarFull(calname)

	return calname;
}
/*-----------------------------------------------------------------------------------
Return groupId of specified calendarId
-----------------------------------------------------------------------------------*/
function getGroupId(calendarId)
{
	var id = '';
	if (calendarId >= 0)
	{
		id = RZ.calendar.groupids[calendarId];
		if (typeof id == 'undefined') id = '';
	}
	return id;
}
/*-----------------------------------------------------------------------------------
Return Group Name of specified groupId
-----------------------------------------------------------------------------------*/
function getGroupName(groupId)
{
	var name = '';
	if (groupId >= 0)
	{
		name = RZ.calendar.groupids[groupId];
		if (typeof name == 'undefined') name = '';
	}
	return name;
}
/*-----------------------------------------------------------------------------------
Return credentials of specified calendarId
-----------------------------------------------------------------------------------*/
function getCredentials(calendarId)
{
	var credentials = {
		administrators: '',
		editors: '',
		restrictedlist: '',
		rolluplist: '',
		show_all: '',
		show_in_all: ''
	}
	try
	{
		if (RZ.calendar.credentials[calendarId])
			credentials = RZ.calendar.credentials[calendarId];
	}
	catch (e)
	{
	}
	return credentials;
}

//*************************************//
/*BOOKMARK -----Refresh functions-----*/
//***********************************//

/*-----------------------------------------------------------------------------
-----------------------------------------------------------------------------*/
function isHomeframeAccess()
{
	if (RZwinaccess(homeframe))
		return true;
	else
		RZloadingDone(RZ.calendar.msg.homeframeNA);
	return false;
}
/*-----------------------------------------------------------------------------
state is true if refresh required i.e. isEventDataCurrent() = false
-----------------------------------------------------------------------------*/
function isHomeRefreshEventActive(state)
{
	return homeframe.RZ.calendar.data.homeRefreshEventActive;
}
/*-----------------------------------------------------------------------------
state is true if refresh required i.e. isEventDataCurrent() = false
-----------------------------------------------------------------------------*/
function setHomeRefreshEventActive(state)
{
	if (!homeframe.refreshHomePage) return true;	//detail view

	//----- If no access to homeframe assume data not current; caller should not proceed
	if (!isHomeframeAccess()) return false;

	//----- Activate onFocus event if not already active
	if (state && !homeframe.RZ.calendar.data.homeRefreshEventActive)
	{
		RZlog('activating homeRefreshEvent',RZdisplayCaller());
		homeframe.RZeventadd(homeframe, 'focus', homeframe.refreshHomePage);
		homeframe.refreshHomePage.isCalled = false;
		homeframe.RZ.calendar.data.homeRefreshEventActive = true;
	}
	//----- De-activate onFocus event if not already active
	else if (!state && homeframe.RZ.calendar.data.homeRefreshEventActive)
	{
		RZlog('deactivating homeRefreshEvent',RZdisplayCaller());
		homeframe.RZeventremove(homeframe, 'focus', homeframe.refreshHomePage);
		homeframe.RZ.calendar.data.homeRefreshEventActive = false;
	}

	/*	Code to refresh when "view full calendar" link updates events
	//----- If activating onFocus handler in popup and opener contains calendar, ALSO
	//		activate onFocus handler for every calendar instance on opener page.
	//		TODO: seems to be hang if next statement is true;
	//			  could be getting into endless recursive loop
	if (state && RZwinaccess(opener))
	{
		if (false && opener.name == RZ.calendar.winNames.home )
		{
			// iframe that opened this page (may only have access to this iframe)
			opener.setHomeRefreshEventActive(true);

			// check all iframes on opener if accessible (catch the 'view all' case)
			var iframeContainer = opener.top;
			if (RZwinaccess(iframeContainer))
			{
				for (var i=0;i<iframeContainer.frames.length;i++)
				{
					var frame = iframeContainer.frames[i];
					if (!RZwinaccess(frame)) continue;
					if (frame.RZ && frame.RZ.calendar && frame.RZ.calendar.home)
						frame.setHomeRefreshEventActive(true);
				}
			}
		}
	}
	*/
	return true;
}
/*-----------------------------------------------------------------------------
Mark global AND event data out-of-date; false indicates stale

both global and events arguments are optional.

If no arguments, both global and events default to false (data stale).
if global specified and events not, leave events as is
-----------------------------------------------------------------------------*/
function setDataStale(globalState,eventState)
{
	// assume data not current; caller should not proceed
	if (!isHomeframeAccess()) return false;

	if (typeof globalState == 'undefined' && typeof eventState == 'undefined')
	{
		globalState = false;
		eventState = false;
	}
	// if global specified and events not, leave events as is
	if (typeof globalState != 'undefined' && typeof eventState == 'undefined')
		events = isEventDataCurrent();

	// mark data appropriately
	if (globalState != null)
		setGlobalDataCurrent(globalState);
	if (eventState != null)
		setEventDataCurrent(eventState);
	if (eventState != null && !eventState)
		setHomeRefreshEventActive(true);

	return true;
}

//***************************************//
/*BOOKMARK Global Data Refresh Functions*/
//*************************************//

/*-----------------------------------------------------------------------------
Return true is data current and the calling function e.g. setup() continues.
Return false if data not current; callback function called after data loads;

if return from save on editform or delete on editlist AND with refreshdata
url parameter, mark global data stale.

	Since editforms return to another page after save, false is returned to
	stop any further processing and data usually gets loaded by caller.

	However for editlist pages, false is returned and the callback function
	is called after the data is loaded.
-----------------------------------------------------------------------------*/
function isGlobalDataCurrent(callback)
{
	// assume data not current; caller should not proceed
	if (!isHomeframeAccess()) return false;

	if (g.savereturn == RZ.calendar.nextsavereturn)	//if refreshdata url parameter
	{
		if (!refreshCalendarData()) return false;	//editforms quit after save return
	}												//editlist pages, continue or wait
													//for callback triggered below)
	if (homeframe.RZ.calendar.data.globalDataCurrent)
		return true;								//data current, let caller proceed

	if (callback)									//load data
		homeframe.refreshGlobalData(callback,window.name);

	return false;									//data not current
}
/*-----------------------------------------------------------------------------
Indicates is global data up-to-date
-----------------------------------------------------------------------------*/
function setGlobalDataCurrent(state)
{
	// assume data not current; caller should not proceed
	if (!isHomeframeAccess()) return false;

	homeframe.RZ.calendar.data.globalDataCurrent = state;

	//----- If data not current, activate homeframe onfocus event
	if (!state)
		setHomeRefreshEventActive(true);

	//----- kill home page onFocus event handler if event data also current
	else if (isEventDataCurrent())
		setHomeRefreshEventActive(false);
}
/*-----------------------------------------------------------------------------
Indicate global data being loaded
-----------------------------------------------------------------------------*/
function isGlobalDataLoading()
{
	if (!RZwinaccess(homeframe)) return;
	return homeframe.RZ.calendar.data.globalDataLoading;
}
/*-----------------------------------------------------------------------------
Indicate global data being loaded
-----------------------------------------------------------------------------*/
function setGlobalDataLoading(state)
{
	RZlog('setEventDataLoading: '+state,'');
	if (!RZwinaccess(homeframe)) return;

	homeframe.RZ.calendar.data.globalDataLoading = state;
}

//**************************************//
/*BOOKMARK Event Data Refresh Functions*/
//************************************//

/*-----------------------------------------------------------------------------
-----------------------------------------------------------------------------*/
function isEventDataCurrent()
{
	if (!isHomeframeAccess())
		return false;	//caller may quit waiting for callback that won't happen

	if (homeframe.RZ.calendar.data.eventDataCurrent)
		return true;	//data current

	return false;		//data not current
}
/*-----------------------------------------------------------------------------
Mark event data current or out-of-date; If out-of-date, activate home page
onFocus so page is refreshed if window gets focus sooner that expected.
If data is current, kill home page onFocus event.
-----------------------------------------------------------------------------*/
function setEventDataCurrent(state)
{
	RZlog('setEventDataCurrent: '+state,RZdisplayCaller());
	if (!RZwinaccess(homeframe)) return false;

	homeframe.RZ.calendar.data.eventDataCurrent = state;

	// if data current, mark not loading & kill homepage onfocus()
	if (state)		//only loading functions should
	{
		setEventDataLoading(false);
	}

	// activate home page onfocus
	setHomeRefreshEventActive(!state);

	return true;
}
/*-----------------------------------------------------------------------------
-----------------------------------------------------------------------------*/
function isEventDataLoading()
{
	if (!isHomeframeAccess())
		return false;	//caller may quit waiting for callback that won't happen

	return homeframe.RZ.calendar.data.eventDataLoading;
}
/*-----------------------------------------------------------------------------
Indicate event data being reloaded or is reloaded

In either case, kill homepage onfocus() handler; either loading and display
refresh started so not necessary to start again -OR- data is current for event.

Data may be current but display may not reflect.
-----------------------------------------------------------------------------*/
function setEventDataLoading(state,startOrStopEventLoading)
{
	RZlog('setEventDataLoading: '+state,RZdisplayCaller());
	if (!RZwinaccess(homeframe)) return;

	homeframe.RZ.calendar.data.eventDataLoading = state;

	// kill home page onFocus event handler if display is up-to-date
	// TODO: question the wisedom of always killing
	setHomeRefreshEventActive(false);
}
/*-----------------------------------------------------------------------------
Set by refreshGlobalData if returning to another window.
Cleared by updateData();
-----------------------------------------------------------------------------*/
function isEventLoadingDeferred()
{
	if (!RZwinaccess(homeframe)) return;

	return homeframe.RZ.calendar.data.eventLoadingDeferred;
}
/*-----------------------------------------------------------------------------
Set by refreshGlobalData if returning to another window.
Cleared by updateData();
-----------------------------------------------------------------------------*/
function setDeferEventLoading(state)
{
	RZlog('setEventLoadingDeferred: '+state, RZdisplayCaller());
	if (!RZwinaccess(homeframe)) return;

	RZ.calendar.data.deferEventLoading = state;

	if (state)
		setHomeRefreshEvent(true);
}
/*-----------------------------------------------------------------------------
Loads most data from config, groups and calendar names including credentials.

Must run in homeframe.

Can be called from multuple windows; only run once instance at a time.

Return true if data current otherwise false if caller must wait for callback.
-----------------------------------------------------------------------------*/
function refreshGlobalData(callback,options)
{
	var i, msg = '';
	var global;
	var calendars, calendar, calid, calname;
	var groups, group, groupid, groupname;
	var src = RZ.calendar.filenames.globalData;
	//------------------------------------------------------\\
	if (RZdisplayCaller('','debug=refresh') === true) debugger;
	//------------------------------------------------------//

	// return if already refreshed
	if (isGlobalDataCurrent()) 		//data loaded ok to continue
	{
		if (options != 'timeout')	//direct call
			return true;
		else						//had to wait for another instance to complete
			callback();				//...return via callback
		return false;				//anonmous return
	}

	// invalid call
	if (window.name != RZ.calendar.winNames.home)
		//return warn('refreshGlobalData not called from homeframe'
		//			 +'from other window, use: isGlobalDataCurrent(callback)' );

	// if refreshGlobalData already running, wait for it to complete
	if (isGlobalDataLoading())
	{
		setTimeout( function refreshGlobalDataWaiting()
		{
			refreshGlobalData(callback);
		}, 1000);
		return false;
	}

	// Mark and log update is running
	setGlobalDataLoading(true);

	//----- Get data from calendar_db_data.xml
	function processGlobalData(xmlDoc)
	{
		if (xmlDoc.msg)
		{
			displayUserMessage(xmlDoc.msg);

			/* DCO 01-20-2014
			msg = 'Load data xml request: ' + xmlDoc.msg
			RZdisplayMessage(msg, 'append');
			if (xmlDoc.msg.indexOf('404') != -1)	//if 404 error migration may be needed
			{
				if (migrateDatabase()) return;		//if migration requested, quit
			}
			*/
		}
		else
		{
			// clear prior data
			RZ.calendar.ids = {};
			RZ.calendar.names = {};
			RZ.calendar.groupids = {};
			RZ.calendar.groupnames = {};
			RZ.calendar.groupadmins = {};
			RZ.calendar.groupeditors = {};
			RZ.calendar.credentials = {};
			RZ.calendar.allcalendarids = "";

			/*BOOKMARK ----- load global data*/
			global = xmlDoc.getTags('global');

			/* DCO 01-20-2014
			if (global.length == 0)
				RZdisplayMessage(src + ' is missing &lt;global> data','append');
			else
			*/

			if (global.length > 0)		//no <global> tag in xml, cannot display calendar
			{
				global = global[0];
				RZ.calendar.default_id = xmlDoc.getAttribute(global,'masterid');
																								//DCO 08-22-2015\\
				RZ.calendar.deploy_date = new Date(xmlDoc.getAttribute(global,'deploy_date'));
				RZ.calendar.detail_iframe_template = xmlDoc.getAttribute(global,'detail_iframe_template');
																								//DCO 08-22-2015//
				RZ.calendar.dayview_showemptyhours = xmlDoc.getAttribute(global,'dayview_showemptyhours');
				RZ.calendar.dayview_starthour = xmlDoc.getAttribute(global,'dayview_starthour');
				RZ.calendar.thumbnail_showpriornextyear = xmlDoc.getAttribute(global,'thumbnail_showpriornextyear');
				RZ.calendar.welcome_text = xmlDoc.getAttribute(global,'welcome_text');
				RZ.calendar.location = xmlDoc.getAttribute(global,'location');
				RZ.calendar.logo_height = xmlDoc.getAttribute(global,'logo_height');
				RZ.calendar.icon = xmlDoc.getAttribute(global,'icon');
				RZ.calendar.roles = xmlDoc.getAttribute(global,'roles');
				RZ.calendar.users = xmlDoc.getAttribute(global,'users');
			}

			// load groups
			groups = xmlDoc.getTags('group');

			/* DCO 01-20-2014
			if (groups.length == 0)
			{
				//RZdisplayMessage(src + ' is missing &lt;groups> data','append');
				return RZloadingDone();;
			}
			else
			*/

			if (groups.length > 0)
			{
				for (i=0;i<groups.length;i++)
				{
					group = groups[i];
					groupid = xmlDoc.getAttribute(group,'id');
					groupname = xmlDoc.getAttribute(group,'name');
					RZ.calendar.groupids[groupname] = groupid;
					RZ.calendar.groupnames[groupid] = groupname;
					RZ.calendar.groupadmins[groupid] = xmlDoc.getAttribute(group,'administrators');
					RZ.calendar.groupeditors[groupid] = xmlDoc.getAttribute(group,'editors');
				}
			}

			// load calendars
			calendars = xmlDoc.getTags('calendar');

			/* DCO 01-20-2014
			if (calendars.length == 0)
				RZdisplayMessage(src + ' is missing &lt;calendars> data','append');
			else
			*/

			if (calendars.length > 0)
			{
				for (i=0;i<calendars.length;i++)
				{
					calendar = calendars[i];
					calid = xmlDoc.getAttribute(calendar,'id');
					calname = xmlDoc.getAttribute(calendar,'name');
					groupid = xmlDoc.getAttribute(calendar,'groupid');
					RZ.calendar.allcalendarids += '|' + calid;

					RZ.calendar.ids[calname.toLowerCase()] = calid;
					RZ.calendar.names[calid] = calname;
					RZ.calendar.groupids[calid] = calname;

					RZ.calendar.credentials[calid] = new Object();
					RZ.calendar.credentials[calid].administrators = xmlDoc.getAttribute(calendar,'administrators');
					RZ.calendar.credentials[calid].editors = xmlDoc.getAttribute(calendar,'editors');
					RZ.calendar.credentials[calid].rolluplist = xmlDoc.getAttribute(calendar,'rolluplist');
					RZ.calendar.credentials[calid].restrictedlist = xmlDoc.getAttribute(calendar,'restrictedlist');
					RZ.calendar.credentials[calid].show_all = xmlDoc.getAttribute(calendar,'show_all');
					RZ.calendar.credentials[calid].show_in_all = xmlDoc.getAttribute(calendar,'show_in_all');
				}
				RZ.calendar.allcalendarids = RZ.calendar.allcalendarids.substr(1);
			}
		}
/*BOOKMARK global data reloaded complete*/
		RZlog('global data reloaded');
		setVersion();

		// update logo and welcome text
		setInnerHTML('welcome_text',RZ.calendar.welcome_text);
		var logo = document.getElementById('logo');
		if (logo)	//detail view may not have logo
		{
			var headerContainer = document.getElementById('headerContainer');
			if (RZ.calendar.icon && RZ.calendar.icon.indexOf('noimage.gif') == -1)
			{
				var src = RZ.page.domain + RZ.page.pathname
						+ RZ.calendar.icon.replace(/.*\/images\//,'/images/');
				logo.src = src;
				headerContainer.style.height = RZ.calendar.logo_height + 'px';
			}
			else
			{
				logo.src = RZ.page.domain + RZ.page.pathname + '/images/calendar_app_noimage.gif';
				headerContainer.style.height = RZ.calendar.constants.headerMinHeight;
			}
		}
		//------------------------------------------------------\\
		if (RZdisplayCaller('','debug=refresh') === true) debugger;
		//------------------------------------------------------//

		// Defer eventData loading in progress, when callback not from homeframe
		// and currently has focus (refreshHomePageEvent to restart later).
		if (callback && callback != homeframe.updateData)
			setDeferEventLoading(false);

		setGlobalDataLoading(false);
		setDataStale(true,false)		//global data current; events data stale

		if (callback) callback();

		return false;
	}

	//----- ajax request with callback must follow callback function on FF & Chrome
	var fileinfo = RZgetfileinfo(homeframe.location.href);
	src = fileinfo.domain + fileinfo.pathname + '/db/' + src;
	RZajaxload(src, processGlobalData);
	return false;	//must wait for data
}
/*-----------------------------------------------------------------------------
-----------------------------------------------------------------------------*/
function migrateDatabase()
{
	var msg;
	if (migrateDatabase.isCalled) return;

	if (RZ.calendar.view != 'mini' && RZisadmin())
	{
		msg = 'No Calendar Data (' + RZ.calendar.filenames.globalData + ' not found)'
			+ '\n\n' + RZ.calendar.version + ' Uses XML files\n\n'
		//RZloadingDone(msg);

		//msg = 'Calendar Database Update Required\n\n'
		msg += 'Ok to Update?';
		if (confirm(msg))
		{
			migrateDatabase.isCalled = true;
			setDataStale()		//all data is stale
			RZloadingDone('Databased Updater','Updating Database...')
			var url = '/revize/admincenter/calendarmigrate.jsp';
			RZpopupUrl('RZcalendar_migrate',url,800,780);
			return true;
		}
	}
	return false;
}
/*--------------------------------------------------------------------------------
closeWindow

Primary purpose is give focus to calling window and refresh if data has changed.
Most config edit pages require calling page to be reloaded via location.replace().

Called directly by close button links and indirect by window unload event.
Disabled indirectly for Save but Edit & Delete explicitly disable this handler.

Returns true to support use as onSubmit handler although probably not used as one.

-----------
Parameters:
-----------
action (optional) can be any one of the following values:

	false 		disable processing; used by Edit & Delete actions
				(implied by Save by checking RZ.saveclicks)

	true, 'close', 'cancel', '' or undefined i.e. omitted
				called directed by javascript via button link, onClick
				or similar user initiated event except unload
				use nextWindowClose() to determine nextWindow

	'unload'	called by window unload handler and currently uses same
				logic as =true however if config window, consider letting
				window close and force close of all other config windows

	any other string
				use as URL and load over top current window via
				location.replace()

TODO:
 1)	indirectly disable for Edit & Delete
 2)	not sure what happens upon refresh from popup editform or return from
 	non-popup edit form
--------------------------------------------------------------------------------*/
function closeWindow(action)
{
	//DCO 04-10-2014: on IE7 and IE8 cause topnav links to act like back()
	if (action == 'unload' && RZ.MSIE && RZ.browserversion < 9 && !RZ.isIEw3c) return false;

	// only process unload action once to avoid loops
	if (action == 'unload' && closeWindow.isCalled) return true;
	closeWindow.isCalled = true;
	if (action === false) return true;	//if called to disable unload action

	// make sure homeframe still accessible (i.e. has not been refreshed)
	// e.g. Unable to evaluate the expression. The callee (server [not server application]) is
	// not available and disappeared; all connections are invalid. The call did not execute.
	var e;
	try
	{
		if (typeof RZ.calendar != 'object')
			throw '';
	}
	catch (e)
	{
		window.close();
		return true;
	}

	//------------------------------------------------------\\
	var msg = 'Closing window.name "' + window.name + '"';
	if (RZdisplayCaller(msg,'debug=closeWindow') === true) debugger;
	//------------------------------------------------------//

	// no code added to set RZ.isReloadEvent however seems to work just fine
	var isReloadEvent = RZ.isReloadEvent;	//set by beforeonunload handler
	RZ.isReloadEvent = false; 				//reset for next occurance
	if (isReloadEvent) return true;			//if reloading page, do nothing

	if (RZ.saveclicks) return true;			//save in process

	RZclearTimeout();						//kill click ahead handler(s)

	if (action == 'cancel' || action == 'close' || action == ''
	|| action === true || typeof(action) == 'undefined' || action == 'undefined')
		action = 'cancel';

	else if (action != 'unload')
	{
		//----- If url, load over current page
		if (typeof(action) != 'string')
			RZdisplayMessage('Invalid closeWindow action')
		else
			location.replace(action);
		return true;
	}

	if (!RZwinaccess(homeframe))
	{
		//------------------------------------------------------\\
		var msg = 'No access to homeframe when closing window';
		if (RZdisplayCaller(msg,'debug') === true) debugger;
		//------------------------------------------------------//
		return true;
	}

	//----- Let dispatcher determine window(s) and make it happen
	closeWindowDispatcher(action);

	return true;
	return false;	//for debugging
}
/*-----------------------------------------------------------------------------------
Determine next window to get focus

Returns nextWindow
	true if new window already given focus
	window object of window to get focus
	string under if error scenario
-----------------------------------------------------------------------------------*/
function closeWindowDispatcher(action)
{
	var nextWindow = '';
	var openWins = homeframe.RZ.calendar.openWins;
	switch (window.name)
	{
		//----- return to event detail if open; else calendar home page
		case RZ.calendar.winNames.signupForm:
		case RZ.calendar.winNames.eventDetailEditForm:	//cancel NOT save
			if (openWins[RZ.calendar.winNames.eventDetail])
				nextWindow = RZ.calendar.winNames.eventDetail;
			else if (openWins[RZ.calendar.winNames.mini])
				nextWindow = RZ.calendar.winNames.mini;
			else
				nextWindow = RZ.calendar.winNames.home;
			break;

		//----- pages that return to calendar home page
		case 'EditWindow':
		case 'EditWindowPopup':
			nextWindow = RZ.calendar.winNames.home;
			break;

		case RZ.calendar.winNames.configMain:
		case RZ.calendar.winNames.eventDetail:
			nextWindow = RZ.calendar.winNames.home;
			break;

		case  RZ.calendar.winNames.configForm:
			if (openWins[RZ.calendar.winNames.configMain])
				nextWindow = RZ.calendar.winNames.configMain;
			//break;	//TODO: fall thru or break??

		//----- closing calendar home page AND called from calendar window or iframe
		case RZ.calendar.winNames.home:
			if (opener && RZwinaccess(opener) && RZ && RZ.calendar && RZ.calendar.home)
			{
				if (opener.setDataStale)
					opener.setDataStale();		//all data is stale
				RZsetFocusAndClose(opener.top);
			}
			// if called from link, go back
			else if (document.referrer)
			{
				history.back();
			}
			return true;

		default:
			break;
	}

	// convert nextWindow name to nextWindow window
	if (typeof(nextWindow) == 'string' && openWins[nextWindow])
		nextWindow = openWins[nextWindow];

	// nextWindow undefined, null or empty
	if (!nextWindow && RZwinaccess(opener))
		nextWindow = opener;

	//----- Complete processing if window object returned
	if (typeof(nextWindow) == 'object')
	{
		//----- Check access to nextWindow
		if (!RZwinaccess(nextWindow))
		{
			if (action != 'unload')
				RZloadingDone(RZ.calendar.msg.homeframeNA,'Closing Window: ' + window.name);
			return false;
		}

		//----- If returning to home page and refresh required, don't wait for focus event
		if (nextWindow.name == RZ.calendar.winNames.home
		&& (!isGlobalDataCurrent() || !isEventDataCurrent()))
			homeframe.refreshHomePage('close');		//call onfocus handler directly

		//----- Mark current page closed if not returning and current page has different name
		if (window.name && openWins[window.name] && window.name != RZ.calendar.winNames.home)
			delete openWins[window.name];
		else
			nextWindow.top.focus();

		RZsetFocusAndClose(nextWindow);
	}
	if (action == 'cancel' && window.name == "RZcalendar_eventDetailEditForm")
		window.close();		//close editform

	return true;
	return false;	//for debugging
}
/*-----------------------------------------------------------------------------------
Display or update the calendar
Called by loadActiveData() after data loaded
-----------------------------------------------------------------------------------*/
function displayCalendar(msg)
{
	setEventDataCurrent(true);		//event data up-to-date
	RZlog('Event data refreshed');

	//----- Load selected calendar view
	switch (RZ.calendar.view)
	{
		case 'brief':
			RZ.calendar.view == 'mini'
			if (!RZ.calendar.css)
			break;

		case 'mini':
			//TODO: FULLYEAR ultimately whole year will be loaded
			if (!RZ.calendar.isNextMonthDataLoaded)
			{
				loadActiveData(true);	//load next month data
				return;
			}
			break;

		default:
			//TODO:FULLYEAR not sure how much data to load for full views
			break;
	}
	if (msg) RZdisplayMessage(msg);

	//----- Continue on with or w/o errors so Administrators can configure calendar
	setupView();
}
/*-----------------------------------------------------------------------------------
Setup layers for specified calendar / view / calendar / date

First time called the css files for either mini or full screen views are loaded.

Parameters:
	dayEvent & eventIndex passed by drawCalendarGrid()
-----------------------------------------------------------------------------------*/
function setupView(dayEvent,eventIndex)
{
	var js_load = '';
	var files = [];
	var e;
	try
	{
		//----- 1st call, save SHARED innerHTML grid code blocks (if they exist)
		//		TODO: RZ.calendar.viewloaded false for mini view for 2nd month
		//
		//		This code has id's so it can only exist in one place at a time.
		//		When needed for requested view, it is first deleted from all possible
		//		locations and loaded from the objects below.
		var isGrid = RZ.calendar.view != 'detail';
		if (!RZ.calendar.viewloaded && isGrid)
		{
			// ***** 1) see calendar homepage .../calendar_app/index.html (calendar_app template)
			//			day / week view right body column (thumbnail calendar & notable events)
			RZ.calendar.bodyRightHTML = document.createElement('div');
			RZ.calendar.bodyRightHTML.innerHTML = document.getElementById('dayBodyRight').innerHTML;

			// ***** 2) see calendar homepage .../calendar_app/index.html (calendar_app template)
			//			shell container for generated calendar grid (used by all views) full or thumbnail size
			RZ.calendar.calendarGridHTML = document.createElement('div');
			RZ.calendar.calendarGridHTML.innerHTML = document.getElementById('calendar_miniView').innerHTML;
		}

		//------ If 1st call or view has switched
		if (RZ.calendar.viewloaded != RZ.calendar.view)
		{
			//----- mini view: never switches
			if (RZ.calendar.view == 'mini')
			{
				cssfile = 'calendar_mini_style.css';	// mini view default css
				if (RZ.calendar.css)
					cssfile = RZ.calendar.css;			// specified css file
				RZ.calendar.css = 'calendar_mini/' + cssfile;
				document.getElementById('bodyMini').style.display = 'block';

				if (RZ.devmode)
					js_load = 'calendar_app_view_mini.js';
				else
					js_load = 'calendar_app_javascript_miniview.js';
			}

			//----- full screen mode: monthView, weekView or dayView -OR- detail
			else
			{
				// fullview or detail default css
				if (!RZ.calendar.css)
					RZ.calendar.css = "css/calendar_style.css";

				if (!RZ.calendar.viewloaded && RZ.calendar.view != 'detail')
				{
					if (RZ.devmode)
						js_load = 'calendar_app_view_full.js';
					else
						js_load = 'calendar_app_javascript_fullview.js';
				}
				if (isGrid)
				{
					var tempDiv = document.createElement('div');

					// turn on full screen top header up to dropdowns; clear calendar from miniView
					if (!RZ.calendar.viewloaded)
					{
						document.getElementById('fullview_header').style.display = 'block';
						document.getElementById('calendar_miniView').innerHTML = '';
					}
				}
				// copy shared calendar grid html from mini to month view
				if (RZ.calendar.view == 'month')
				{
					// turn off weekView & dayView top level divs; turn on monthView
					document.getElementById('calendar_weekView').style.display = 'none';
					document.getElementById('calendar_dayView').style.display = 'none';
					document.getElementById('calendar_monthView').style.display = 'block';

					// use dayView calendar control div; delete from day/week view
					document.getElementById('dayBodyRight').innerHTML = '';
					document.getElementById('weekBodyRight').innerHTML = '';
					/*
					tempDiv.innerHTML = RZ.calendar.calendarControlsHTML.innerHTML;
					document.getElementById('monthHeading').innerHTML = tempDiv.innerHTML;
					*/

					// use mini calendar grid html; ideally should just use from id=calendar down
					tempDiv.innerHTML = RZ.calendar.calendarGridHTML.innerHTML;
					document.getElementById('monthBody').innerHTML = tempDiv.innerHTML;
				}

				// copy shared right html from day to week view
				else if (RZ.calendar.view == 'week')
				{
					// turn off month & day divs
					document.getElementById('calendar_monthView').style.display = 'none';
					document.getElementById('calendar_dayView').style.display = 'none';
					document.getElementById('calendar_weekView').style.display = 'block';

					// delete calendar controls from monthView (added as part of bodyRight below)
					document.getElementById('monthHeading').innerHTML = '';

					// clear bodyRight from dayView and add to weekView
					document.getElementById('dayBodyRight').innerHTML = '';	//also kills calendarGrid
					tempDiv.innerHTML = RZ.calendar.bodyRightHTML.innerHTML;
					document.getElementById('weekBodyRight').innerHTML = tempDiv.innerHTML;
				}

				else if (RZ.calendar.view == 'day')
				{
					// turn off month & week divs
					document.getElementById('calendar_monthView').style.display = 'none';
					document.getElementById('calendar_weekView').style.display = 'none';
					document.getElementById('calendar_dayView').style.display = 'block';

					// delete calendar controls from monthView (added as part of bodyRight below)
					document.getElementById('monthHeading').innerHTML = '';

					// clear bodyRight from weekView and add to dayView
					document.getElementById('weekBodyRight').innerHTML = '';//also kills calendarGrid
					tempDiv.innerHTML = RZ.calendar.bodyRightHTML.innerHTML;
					document.getElementById('dayBodyRight').innerHTML = tempDiv.innerHTML;
				}

				// clear calendar grid from monthView; add to bodyRightTopCalendar
				if (RZ.calendar.view == 'week' || RZ.calendar.view == 'day')
				{
					document.getElementById('monthHeading').innerHTML = '';
					document.getElementById('monthBody').innerHTML = '';
					tempDiv.innerHTML = RZ.calendar.calendarGridHTML.innerHTML;
					document.getElementById('bodyRightTopCalendar').innerHTML = tempDiv.innerHTML;
				}
			}

			// load view css; once it loads RZloadingDone() is called to hide loading layer
			if (!RZ.calendar.viewloaded)
				files.push(RZ.calendar.css);
		}

		RZ.calendar.viewloaded = RZ.calendar.view;	//must update before loading js below

		//----- Load javascript and/or css if required
		if (js_load)
			files.push('js/' + js_load);

		if (files.length > 0)
		{
			var win = RZ.calendar.displayWindow || window;
			if (window.isDeployDate && isDeployDate('08-22-2015'))
				return RZloadjscssfile(win.document, files, setupComplete);
			else
				return RZloadjscssfile(files, setupComplete);
		}
		//----- Generate html for selected calendar (NOT true -- while css is loading)
		setupComplete();
	}
	catch (e)
	{
		RZloadingDone(e);
	}
}
/*-----------------------------------------------------------------------------------
 called by RZloadjscssfile after all files loaded.
-----------------------------------------------------------------------------------*/
function setupComplete()
{
	setVersion();		//update codebase versions

	var date = homeframe.RZdate(RZ.calendar.codebase.all);
	if (date && date >= new Date('08/22/2015').getTime())
	{
		RZ.calendar.version = "Version 3.3<br>(codebase: " +  date.formatted.shortDate + ")";
		var el = document.getElementById('VERSION')
		if (el) el.innerHTML = RZ.calendar.version;
	}

	if (RZ.calendar.displayCallback)
		RZ.calendar.displayCallback();

	else if (window.drawCalendarGrid)		//mini or full views
		drawCalendarGrid();

	else
		RZloadingDone();
}
/*-----------------------------------------------------------------------------------
Init RZ.calendar.version_javascript_* variables
-----------------------------------------------------------------------------------*/
function setVersion()
{
	if (!RZ.calendar.codebase)
		RZ.calendar.codebase = {all:new Date()};

	setVersionTime('html_version');		//calendar_app template (index.html)
	setVersionTime('javascript_version_loading');
	setVersionTime('javascript_version_common');
	setVersionTime('javascript_version_mini');
	setVersionTime('javascript_version_full');
	setVersionTime('javascript_version_edit');

	// update codebase if version defined
	function setVersionTime(version)
	{
		var time = 1;
		var date = RZ.calendar[version];
		if (typeof(date) == 'string')
			date = new Date(date.replace(/-/g, '/'));
		if (date == null) return;

		RZ.calendar.codebase[version] = date;
		if (date.getTime() < RZ.calendar.codebase.all.getTime())
		RZ.calendar.codebase.all = date;
	}
}
/*-----------------------------------------------------------------------------------
return true if current version date greater or equal to specified date.
-----------------------------------------------------------------------------------*/
function isCodebase(date, what)
{
	if (typeof(date) == 'string')
		date = new Date(date.replace(/-/g, '/'));

	var currentDate = RZ.calendar.codebase && RZ.calendar.codebase[what || 'all'];
	return currentDate && date
		&& currentDate >= date.getTime();
}
/*-----------------------------------------------------------------------------------
return true if deploy date greater or equal to specified date.
-----------------------------------------------------------------------------------*/
function isDeployDate(date)
{
	if (typeof(date) == 'string')
		date = new Date(date.replace(/-/g, '/'));

	return RZ.calendar.deploy_date && date && isCodebase(date)
		&& RZ.calendar.deploy_date.getTime() >= date.getTime();
}
/*-----------------------------------------------------------------------------------
Generate/update calendarGrid html for all views: month, week, day and mini

RZ.calendar.calDate represents data loaded
RZ.calendar.date	currently selected date

Parameters:
	dayEvent & eventIndex should only be passed from mini view links
-----------------------------------------------------------------------------------*/
function drawCalendarGrid(dayEvent,eventIndex)
{
	//DCO 08-22-2015: moved into loadGlobal
	//setVersion();		//can not setVersion until full or mini script loaded
	try
	{
		//----- Call setupView() if view changed; MUST wait for callback since data can
		//		potentially be reloaded; calling parameters are lost however they should
		//		only be used by mini view links in which case the view does not change.
		if (RZ.calendar.viewloaded != RZ.calendar.view)
			return setupView();

		//----- Firefox passes event object as 1st parameter if callBack from setupView()
		var day;
		if (dayEvent==null || typeof(dayEvent) != 'object')	//ajax callback values
			day = '';
		else
			day = dayEvent;

		//----- Populate calendar dropdown
		var opt;
		var calendarName = document.calendar_heading.calendarName;
		RZclearList(calendarName)
		for (opt in RZ.calendar.ids)
			RZselectOptionAdd(calendarName, getCalendarFull(opt), getCalendarId(opt), false)

		//----- If only single calendar allowed, remove others from dropdown list
		if (RZ.calendar.exclusive)
		{
			for (opt=calendarName.options.length-1;opt>=0;opt--)
			{
				if (calendarName.options[opt].text != RZ.calendar.exclusive)
					calendarName.remove(opt);
			}
		}
		if (RZ.calendar.view != 'mini' 	//only full screen views
		&& typeof placeDefaultCalendarAtTop)
			placeDefaultCalendarAtTop(document.calendar_heading.calendarName);

		//----- Initialize if 1st call
		if (!RZ.calendar.init)
		{
			RZ.calendar.init = true;
			RZ.calendar.now = homeframe.RZdate();
			RZ.calendar.today = RZ.calendar.now.getDatePart();
			RZ.calendar.calDateStr = topframe.RZ.calendar.date.toString();
			RZ.calendar.calDate = homeframe.RZdate(RZ.calendar.calDateStr);		//must be separate object
			if (!RZ.calendar.calDate)
				RZ.calendar.calDate = RZ.calendar.today;

			//selected day of month (does not change when advancing or backing up months)
			//this allowed the 31 to be retained if advance to 30 day month then backup
			RZ.calendar.calDaySelected = RZ.calendar.calDate.getDate();

			// update styles after calendar built if view requires
			/*BOOKMARK TODO: updateStyles() for fullview?? height etc*/
			if (RZ.calendar.view == 'mini' && typeof(updateStyles) != 'undefined')
				updateStyles();

			// pass window object to css config editform
			if (topframe.parent.RZ && topframe.parent.RZsetupMiniConfig)
				topframe.parent.RZsetupMiniConfig(window);
		}
		else
			RZ.calendar.calDate = homeframe.RZdate(RZ.calendar.date);

		//----- Create html for top controls and calendar weeks and days
		if (!RZ.calendar.isStandAlone && RZ.calendar.view == 'mini')
			RZ.calendar.calDate.setDate(1);		//reset to 1st day as safety

		var el,heading;
		switch (RZ.calendar.view)
		{
			//----- Generate detail html for mini view
			case 'mini':
				buildCalendarGrid();
				var detailContent = document.getElementById('detailContent');
				if (detailContent)
					detailContent.innerHTML = showDetail(day,eventIndex);

				//----- Update target of all links
				if (day) RZsetTarget(window,'RZcalendar_detail');
				break;

			//----- Generate calendar for month view
			case 'month':
				heading = RZ.calendar.calDate.getMonthName()
						+ "  "
						+ RZ.calendar.calDate.get('dayLong');
				el = RZ.calendar.view == 'day' ? 'calendarDayHeading' : 'calendarWeekHeading'
				document.getElementById(el).innerHTML = heading;
				buildCalendarGrid();
				break;

			case 'day':
				el = 'calendarDayHeading';
				heading = RZ.calendar.calDate.getMonthName() + " "
						+ RZ.calendar.calDate.get('dayLong') + ", "
						+ RZ.calendar.calDate.getFullYear();
				document.getElementById(el).innerHTML = heading;
				buildDayHtml(RZ.calendar.startHour);
				buildCalendarGrid('thumb');
				buildNotableHtml();
				break;

			case 'week':
				el = 'calendarWeekHeading';
				var weekDate = homeframe.RZdate(RZ.calendar.calDate);
				var dayOfWeek = weekDate.getDay();
				weekDate.addDays(-dayOfWeek);
				heading = 'Week Starting '
						+ ' ' + weekDate.get('smartDate')
						+ ' (week ' + RZ.calendar.calDate.getWeek() + ')';
				document.getElementById(el).innerHTML = heading;
				buildWeekHtml();
				buildCalendarGrid('thumb');
				buildNotableHtml();
				break;
		}

		//----- Update full view top header
		if (RZ.calendar.view != 'mini') updateHeader();
	}
	catch (e)
	{
		RZloadingDone(e);
		return;
	}
	RZloadingDone();

	//----- Set height on login button (must be after layer shows on IE7 not sure about IE > 7)
	document.getElementById('loginButton').height = document.getElementById('dayButton').height;

	return true;
}
/*-----------------------------------------------------------------------------------
Called when selected calendar, view and/or date changes -OR- data refresh required.

If already running, quit assuming when complete everyone (all callers) will be happy
only expectation should be thatbuildCalendarGrid() is called after data loads.
-----------------------------------------------------------------------------------*/
function updateData(name,view,date)
{
	var msg = ';'
	var now = homeframe.RZdate();

	if (!updateData.startTime)
		updateData.startTime = now;				//set time data loading started

	else										//loading already started
	{
		if (isEventLoadingDeferred())
		{
			setEventDataLoading(false);			//event data still needs loading
			return updateDataReturn(false);		//kill running flag & wait for callback
		}

		// been waiting too long for data
		if (now - updateData.startTime > RZ.calendar.constants.LOAD_WAIT_TIME)
		{
			msg = 'updateData() waited over ' + RZ.calendar.constants.LOAD_WAIT_TIME/1000 + ' seconds'
			RZlog(msg,RZdisplayCaller());
			//------------------------------------------------------\\
			if (RZdisplayCaller(msg,'debug') === true) debugger;
			//------------------------------------------------------//
			updateData.startTime = now;			//reset waited too long trigger
		}
		return;									//return w/o updating any status
	}
	//------------------------------------------------------\\
	if (RZdisplayCaller('','debug=refresh') === true) debugger;
	//------------------------------------------------------//

	if (!name) name = RZ.calendar.name;
	if (!view) view = RZ.calendar.view;
	if (!date) date = RZ.calendar.date;

	setEventDataLoading(true);	//indicate event loading started
	RZloadingContinue(false);	//clear errors but do not close loading div

	//----- if global data not current, load it and wait for callback
	if (!isGlobalDataCurrent(updateData))
	{
		RZlog('UpdateData() is waiting for global data to load');
		return updateDataReturn(false);
	}

	view = view.toLowerCase();
	date = homeframe.RZdate(date);
	var datatype = (view == 'week' ? 'week' : 'month');

	var currentName = RZ.calendar.name;
	var currentDate = homeframe.RZdate(RZ.calendar.calDate);

	RZ.calendar.name = name;
	RZ.calendar.view = view;
	RZ.calendar.date = date;

	//----- If calendar list needs updating
	if (!isEventDataCurrent()
	|| currentName != name
	|| RZ.calendar.datatype != datatype)
	{
		loadActiveList();
		return updateDataReturn(false);
	}

	//----- If date has changed, reload active data
	var isDataLoaded = true;
	switch (datatype)
	{
		case 'month':	//if month changed
			if (currentDate.getMonth() != date.getMonth() || currentDate.getYear() != date.getYear())
				isDataLoaded = false;
			break;
		case 'week':	//if week changed
			if (currentDate.getWeek() != date.getWeek() || currentDate.getYear() != date.getYear())
				isDataLoaded = false;
			break;
	}
	if (!isDataLoaded)
	{
		loadActiveData();
		return updateDataReturn(false);			//wait for data to load
	}
	else
		homeframe.setEventDataLoading(false);	//indicate loading started

	//----- Data is current, update calDate & return true
	RZ.calendar.calDate = date;
	return updateDataReturn(true);

	/**	Internal updateDate function
	 *	returns true if data current; otherwise false
	 *	if data is current, activates onFocus handlers on opener iframes containing calendar
	 **/
	function updateDataReturn(status)
	{
		//----- Clear loading start time & return status
		updateData.startTime = 0;
		return status;
	}
}
/*---------------------------------------------------------------------------------------------
Create html for calendar grid body and heading
---------------------------------------------------------------------------------------------*/
function buildCalendarGrid(options)
{
    if (!options) options = '';
	var headId = 'calendarMonthYear';
	var daysHeadId = 'daysHeader';
	var daysGridId = 'daysInnerTable';
	var containerId = 'calendar';

	//----- Heading (controls)
	document.getElementById(headId).innerHTML = buildMonthYearHtml();
	var topControls = document.getElementById('topControlHeader');
	if (topControls) topControls.innerHTML = buildMonthYearHtml();


	// if before calendar3.html_home.jsp
	if (document.getElementById(daysHeadId) == null)
	{
		gridId = 'calenderGridTable';
		containerId = 'calendar';

		//----- Body (grid)
		var tbodyNew = buildDaysHtml(options);
		var table = document.getElementById(gridId);
		var tbodyOld = table.getElementsByTagName('tbody')[0];
		table.replaceChild(tbodyNew,tbodyOld);
	}
	else
	{
	//----- Day header (S M T W T F S) and Day Grid
		var tbodyElements = buildDaysHtml(options + ',html_home_include');

	var table = document.getElementById(daysHeadId);
	var tbodyOld = table.getElementsByTagName('tbody')[0];
	table.replaceChild(tbodyElements.daysHead,tbodyOld);

	table = document.getElementById(daysGridId);
	tbodyOld = table.getElementsByTagName('tbody')[0];
	table.replaceChild(tbodyElements.daysGrid,tbodyOld);
	}

	// IE7 does not apply css when table html updated, so update the containing div with itself
	var container = document.getElementById(containerId);
	while (document.all && container)
	{
		// window.navigator.appVersion='4.0 (compatible; MSIE 7.0; Windows NT 6.0; WOW64; ...'
		var offset = window.navigator.appVersion.indexOf('MSIE');
		if (offset == -1) break;
		var ieVer = parseInt(window.navigator.appVersion.substr(offset+4));
		if (isNaN(ieVer) || ieVer <= 8)
			container.innerHTML = container.innerHTML;
		break;
	}
}
/*---------------------------------------------------------------------------------------------
Create html for heading with prior and next month links
---------------------------------------------------------------------------------------------*/
function buildMonthYearHtml()
{
    var html = getMonthSelect() + '&nbsp;' + RZ.calendar.calDate.getFullYear()
    return html;

	function getMonthSelect()
	{
		var monthArray = new Array('January', 'February', 'March', 'April', 'May', 'June',
								   'July', 'August', 'September', 'October', 'November', 'December');
		var activeMonth = RZ.calendar.calDate.getMonth();
		return monthArray[activeMonth];
	}
}
/*---------------------------------------------------------------------------------------------
Create html for each day of the month (i.e. calendar)
---------------------------------------------------------------------------------------------*/
function buildDaysHtml(options)
{
    if (!options) options = '';
	var i, thisDay;
    var daysNext = null;
	var htmlElements = {};
	var isHtmlHomeInclude = RZcheckoptions(options,'html_home_include');

	var displayDate = homeframe.RZdate(RZ.calendar.calDate)
	var month = displayDate.getMonth();
    var year = displayDate.getFullYear();
    var today = 0;		//today not shown unless current month
    if (month == RZ.calendar.today.getMonth())
		today = RZ.calendar.today.getDate();
    var totalDays = getDaysInMonth(month,year);

	// if selected day past end of month, change to last day of month
	var daySelected = homeframe.RZdate(RZ.calendar.date).getDate();

    // find out day of week month starts
    var firstOfMonth = new Date(year, month, 1);
    var monthFirstDateDay  = firstOfMonth.getDay();
    var millisecPerDay = 1000 * 60 * 60 * 24;
    var lastMonthStart = homeframe.RZdate(firstOfMonth.getTime()-monthFirstDateDay*millisecPerDay);
    var lastMonthStartDay = lastMonthStart.getDate();

    totalDays += monthFirstDateDay;

	var weekOfMonth = Math.floor((daySelected-1 + monthFirstDateDay) / 7);	//starting from 0

    // start row and set day and week indices to 0 (sunday)
    var dayIndex = 0;
	var weekIndex = 0;
	var dayOfWeek, td, tr;
	var tbody = document.createElement('tbody');
	var dayType, className;

	// used for fullview
    var isMini = (RZ.calendar.view == 'mini');
	var isThumb = isMini || RZcheckoptions(options,'thumb')

    var calendarId = RZ.calendar.id;

	// create header row
	tr = document.createElement('tr');
	tr.setAttribute('class','gridHeaderRow daysRow');
	for (i=0;i<7;i++)
	{
		td = document.createElement('td');
		td.setAttribute('class','topTD');
		if (i==6)
			td.setAttribute('class','topTD rightTD');
		td.innerHTML = RZdayOfWeekName(i,isThumb);
		tr.appendChild(td);
	}
	tbody.appendChild(tr);

	// save daysHead tbody then create and save daysGrid tbody
	if (isHtmlHomeInclude)
	{
		htmlElements.daysHead = tbody;
		tbody = document.createElement('tbody');
		htmlElements.daysGrid = tbody;
	}

	// create first grid row element
	tr = document.createElement('tr');
	tr.setAttribute('class','gridDataTop gridDays');
	tr.setAttribute('valign','top');
	if (weekOfMonth==weekIndex)
		tr.setAttribute('class','selectRow');

    // create prior months cells
    month = (month+11) % 12;	//prior month
    if (month == 11) year--;
    for (i = 0; i < monthFirstDateDay; i++)
	{
		thisDay = lastMonthStartDay + i;
		dayOfWeek = i % 7;
		//processDay(thisDay,(dayOfWeek==0 || dayOfWeek==6?'weekEnd':'weekDay') + ' otherMonth');
	    dayType = "weekDay";
		if (dayOfWeek==0 || dayOfWeek==6)
			dayType = 'weekEnd';
		dayType += ' otherMonth';

		//TODO: don't have prior months events; would be nice for future months
		classNames = dayType;
		processDay( thisDay, classNames, true );
    }


	// Create html for days of selected month
    month = (month+1) % 12;
    if (month == 0) year++;
 	for (i = monthFirstDateDay; i < totalDays; i++)
	{
		dayOfWeek = i % 7;
        thisDay = i-monthFirstDateDay+1;	//day being processed (starting at 1)
	    dayType = "weekDay";
		if (dayOfWeek==0 || dayOfWeek==6)
			dayType = 'weekEnd';
		if (daySelected == thisDay && topframe.RZ.calendar.selectDay)
			dayType = 'selectDay'
		if (i>=35)
			dayType += ' bottomTD';

		classNames = dayType
		           + (isEvent(thisDay)?' eventDay':'')
				   + (today==thisDay?' today':'');
		processDay( thisDay, classNames, false );
    }

    // finish next month cells
    month = (month+1) % 12;
    if (month == 0) year++;
	displayDate = homeframe.RZdate(year,month,1);
    for (i=totalDays; i<42; i++)
	{
		thisDay = i - totalDays + 1;
		dayOfWeek = i % 7;

		//processDay(thisDay,(dayOfWeek==0 || dayOfWeek==6?'weekEnd':'weekDay') + ' otherMonth');
	    dayType = "weekDay";
		if (dayOfWeek==0 || dayOfWeek==6)
			dayType = 'weekEnd';
		if (i>=35)
			dayType += ' bottomTD';
		dayType += ' otherMonth';

/*
		daysNext = topframe.RZ.calendar.daysNext;
		if (!topframe.RZ.calendar.daysNext)
			daysNext = null;
		classNames = dayType
		           + (isEvent(thisDay,daysNext)?' eventDay':'');
*/
		classNames = dayType
		           + (isEvent(thisDay) ? ' eventDay' : '');
		processDay( thisDay, classNames, true );
    }

	//----------------------------------------------
	if (isHtmlHomeInclude)
    	return htmlElements;
	else	//backward compatibility
	    return tbody;
	//----------------------------------------------

	/* Internal buildDaysHtml function
	 * Check for events on specified day of month
	 */
	function isEvent(day)
	{
		displayDate.setDate(day);
		return getEventsCount(displayDate);
		//return topframe.RZevent_count(day,days) > 0;
	}

	/* Internal buildDaysHtml function
	 * create td cell and append to tr
	 * append tr to tbody if end of row
	 * otherMonth true is not current month; otherwise false
	 */
	function processDay(thisDay,classNames,isOther)
	{
		dayIndex++;
		td = document.createElement('td')

		td.setAttribute('class',classNames);
		if (dayOfWeek == 0)
			addClass(td,'gridDataLeftTD');

		// Don't think this can happen (was probably before doing prior and next month)
		//if (!thisDay) debugger;

		//----- not a link if mini and not eventDay
		if (isMini && classNames.indexOf('eventDay') == -1)
			td.innerHTML = thisDay?thisDay:'&nbsp;';

		//----- either full view (day is always link) or event day
		else
		{
			var a = document.createElement('a');
			var eventDate = homeframe.RZdate(year,month,thisDay)
			var href = 'changeDate(' + formatEventClick(eventDate) + ')';
			if (!isMini)
			{
				view = (!isThumb ? "Day" : RZ.calendar.view);
				href = "changeView('','" + view + "','" + buildDate(eventDate) + "')";
			}
			a.setAttribute('href','javascript:' + href);
			addClass(a,'dateNumbers');

			// add name of the month if it is the 1st day of selected month, not mini and not small
			var thisDayText = thisDay;
			if (!isMini && !isThumb && !isOther && thisDay == 1)
				thisDayText = RZmonthNameArr[month] + ", " + thisDay;

			a.innerHTML = thisDayText;
			if (isOther)
				addClass(a,'other');
			td.appendChild(a)

			if (!isMini && !isThumb) 						//if not mini nor thumb view...
				fullviewProcessEvents(td,isOther,thisDay);	//...append events to td tag
		}
		tr.appendChild(td);

		// append row if saturday
		if (dayOfWeek == 6)
		{
			weekIndex++;

			//----- Is .otherMonthRow is hidden?
			var el = document.getElementById('otherMonthRow');
			var isOtherMonthRowHidden = (el && RZelementCurrentStyleValue(el,'display') == 'none')

			/*BOOKMARK -----when 5th week row is last for current month (e.g. 04-2013)*/
			// 5th week row becomes class gridDataBottom
			if (weekIndex == 5 && isOther && isOtherMonthRowHidden)
		    	addClass(tr,'gridDataBottom');

			addClass(td,'rightTD gridDataRightTD');	//add to last td already appended to tr
			tbody.appendChild(tr);

			tr = document.createElement('tr');
			if (weekOfMonth==weekIndex)
				tr.setAttribute('class','selectRow');
		    if (weekIndex == 5)
			{
				// if 6th week row not needed for current month (e.g. 04-2013)
				if (isOther)
				{
		    		addClass(tr,'otherMonthRow');
					if (isOtherMonthRowHidden)
			    		addClass(tr,'gridDataBottom');
				}
			}
			tr.setAttribute('valign','top');
			addClass(tr,'gridDays');
		}
	}
	/* Internal buildDaysHtml function
	 * add class to el
	 */
	function addClass(el,newClass)
	{
		var currentClass = el.getAttribute('class');
		if (currentClass)
			newClass = currentClass + ' ' + newClass;
		el.setAttribute('class',newClass);
	}
	/* Internal buildDaysHtml function
	 * process events if found for thisDay
	 */
	function fullviewProcessEvents(td,isOther,day)
	{
		if ( !(!isOther || daysNext != null) ) return;
		//if (isOther || daysNext == null) return;

		// build eventList: sorted list of all events on thisDay
		var eventList = new Array();
		displayDate.setDate(day);
		var events = getEvents(displayDate);
		for (var eventIdx=0;eventIdx<events.length;eventIdx++)
		{
			var eventItem = {};
			var tempeventHtml = "";
			var days = daysNext;
			if (!isOther) days = '';

			var e = getEvent(events[eventIdx]);
			if (!isShowEvent(RZ.calendar.id,e)) continue;

			eventItem.e = e;
			eventItem.time_begin = RZgetTimeInAmPmSpace(e.time_begin);

			if (calendarId != e.calendarid)		//rolled up event
			{
				if("yes" == e.notable)
					eventItem.className = "noteEvent";
				else
					eventItem.className = "foreignEventName";
			}
			else
			{
				if("yes" == e.notable)
					eventItem.className = "noteEvent";
				else
					eventItem.className = "eventName";
			}
			eventItem.recordid = e.recordid;
			eventItem.name = e.name;

			if ( e.signup_form == "yes" )
			{
				eventItem.signup_form = true;
				//DCO 02-15-2012
				//eventItem.event_coordinator_email = e.event_coordinator_email;
				eventItem.supervisor_email = e.supervisor_email;
			}

			// checking if the event repeats or not
			if (e.repeat == "daily" || e.repeat == "weekly" || e.repeat == "monthly")
				eventItem.repeat = true;

			/*
			eventList[eventIdx] = new Array();
			var firstSplit = (e.time_begin).split(":");
			firstSplit = firstSplit[0] + "." + firstSplit[1];
			if (firstSplit == ".") firstSplit = "0.0";

			eventList[eventIdx][0] = parseFloat(firstSplit);
			eventList[eventIdx][1] = eventItem;
			//eventIdx++;
			*/

			var timeFloat = e.time_begin ? (e.time_begin.split(":")) : '0.0';
			eventList.push( [parseFloat(timeFloat), eventItem] );
		}

		// append event html to td tag
		if (eventList.length > 0)
		{
			sortOnTime(eventList, 0 , eventList.length);
			for (var i=0;i<eventList.length;i++)
			{
				var div = document.createElement('div');
				//div.setAttribute('align','left');
				addClass(div,'calendarView calendarMonthDayEvent');
				fullviewEventHTML(eventList[i][1],div,displayDate);
				td.appendChild(div);
			}
		}
		return;
	}
	/* Internal buildDaysHtml function
	 * format fullview single event html
	 */
	function fullviewEventHTML(eventItem,div,displayDate)
	{
		var e = eventItem.e;
		var a = document.createElement('a');

		// define eventid passed to detail page
		var href = buildPopupEventDetailHref(displayDate,eventItem.recordid,'no');
		if (RZ.calendar.isRepeatContentOverride && eventItem.e.repeatid)			//DCO 09-02-2014
			href = buildPopupEventDetailHref(displayDate,eventItem.e.repeatid,'no');//		 ''

		a.setAttribute('href',href);
		addClass(a,eventItem.className);
		a.innerHTML = eventItem.time_begin + eventItem.name;
		div.appendChild(a);

		//----- Signup icon link
		if (eventItem.signup_form)
		{
			a = document.createElement('a');
			href = buildPopupEventSignupHref(eventItem.e,displayDate);
			a.setAttribute('href',href);
			a.innerHTML = '<img src="images/sign_up_icon.gif" title="Signup Form" border="0">';
			div.appendChild(a);
		}

		//----- Add either recurring & continued icon if event displayed on multiple dates
		if (e.dates && e.dates.length > 0)
		{
			var alt, src = '';
			var continuedDateStr = displayDate.get('shortDate') + '+';
			if (RZcheckoptions(e.dates.join(','),continuedDateStr))
			{
				alt = RZ.calendar.constants.eventContinuedAlt;
				src = RZ.calendar.constants.eventContinuedSrc;
			}
			else if (e.repeat)
			{
				alt = repeatDescAlt(e.repeatDesc);
				src = RZ.calendar.constants.eventRepeatSrc;
			}
			if (src)
			{
				var img = document.createElement('img');
				img.setAttribute('title',alt);
				img.setAttribute('src','images/' + src);
				div.appendChild(img);
			}
		}
	}
}
/*-----------------------------------------------------------------------------
return event detail href
-----------------------------------------------------------------------------*/
function buildPopupEventDetailHref(displayDate,eventId,showAll)
{
	if (typeof displayDate == 'string')
		displayDate = homeframe.RZdate(displayDate);
	var dateStr = displayDate.get('shortDate');
	if (!showAll) showAll = 'no';
	return "javascript:RZpopupEventDetail('" + dateStr + "','" + eventId + "','" + showAll + "')";
}
/*-----------------------------------------------------------------------------
return event signup href
-----------------------------------------------------------------------------*/
function buildPopupEventSignupHref(e,displayDate)
{
	if (typeof displayDate == 'string')
		displayDate = homeframe.RZdate(displayDate);
	var dateStr = displayDate.get('shortDate');
	var args = e.recordid +  ","
			 + e.calendarid + ",'"
			 + dateStr + "','"
			 + (e.supervisor_email ? 'yes' : 'no') + "'";
	return 'javascript:RZpopupSignupDetail(' + args + ')';
}
/*-----------------------------------------------------------------------------
DCO 08-22-2015: moved from ...full.js and updated for iframe layer

popup the signup form -or- open in detail iframe layer
-----------------------------------------------------------------------------*/
function RZpopupSignupDetail(eventId, calendarId, date, supervisor_approval)
{
	//-----	#eventId#calendarid#m/d/yyyy#supervisor_approval
	var url = "calendar_main_signup.html"
			+ '#' + eventId
			+ '#' + calendarId
			+ '#' + buildDate(date)
			+ '#' + supervisor_approval;

	if (!RZ.devmode)
		url = 'calendar_app/' + url;
	if (!popupDetailIframeLayer(url))	//open in detail iframe layer if avail...
	{													//...otherwise open in legacy popup window
		var winName = RZ.calendar.winNames.signupForm;
		homeframe.RZ.calendar.openWins[winName] = RZpopupUrl(winName, url, '520', '500', 'no');
	}
	return void(0);		//for href value
}
/*-----------------------------------------------------------------------------
DCO 08-22-2015: open in detail iframe layer
-----------------------------------------------------------------------------*/
function popupDetailIframeLayer(url, popupAnchorFrame)
{
	if (!isDeployDate('08-22-2015')) return false;

	var iframe = getDetaiIframe();
	if (!iframe) return false;

	var wrapper = iframe.parentNode
	if (!iframe) return false;

	var css = iframe.src.match(/#?css=(.*)/);
	url += (css && css[1]) ? '#css=' + css[1] : '#';

	url = url.replace(/((\??).*)(?=#)/, function(all,query)
	{										//add unique id to fool cache
		var uid = 'uid=' + EZgetRandomInt(0,10000);
		return !query
			 ? '?' + uid			//create query as uid
			 : query + ' ' + uid;	//append uid to query
	});

	wrapper.style.visibility = 'hidden';	//hide until size determined
	wrapper.style.display = 'block';		//sets body height/width onload

	RZ.calendar.popupAnchorFrame = popupAnchorFrame || RZ.calendar.popupAnchorFrame;
	if (iframe == window.frameElement)		//called from within iframe
		location.href = url;
	else
		iframe.src = url;
	//======================
	return true;
	//======================
	/**
	 *
	 */
	function getDetaiIframe()
	{
		var layer = window.top.document.getElementById('RZcalendar_detail');
		if (layer)
		{
			for (var i=0; i<layer.childNodes.length; i++)
			{
				var tag = layer.childNodes[i];
				if (tag.tagName && tag.tagName.toLowerCase() == 'iframe') return tag;
			}
		}
	}
}
/*-----------------------------------------------------------------------------
return detail layer iframe element
-----------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------
Return year,month,day,event string for use on calendar days javascript links
-----------------------------------------------------------------------------*/
function formatEventClick(date,eventIndex)
{
	var str = date.getFullYear() + ',' + (date.getMonth()+1) + ',' + date.getDate();
	if (typeof(eventIndex) != 'undefined') str += ',' + eventIndex;
	return str;
}
/*---------------------------------------------------------------------------------------------
return day/month/year from date
---------------------------------------------------------------------------------------------*/
function buildDate(date)
{
	date = homeframe.RZdate(date);
	return (date.getMonth()+1) + '/' + date.getDate() + '/' + date.getFullYear();
}
/*---------------------------------------------------------------------------------------------
return # of days in month
---------------------------------------------------------------------------------------------*/
function getDaysInMonth(month,year)
{
	var days;
	//                  1  2  3  4  5  6  7  8  9 10 11 12
	var daysInMonth = [31,28,31,30,31,30,31,31,30,31,30,31];
	var days = daysInMonth[month];
	if (month==1 && isLeapYear(year))
		days=29;
	return (days);
	function isLeapYear(Year)
	{
		if (((Year % 4)==0) && ((Year % 100)!=0) || ((Year % 400)==0))
			return true;
		else
			return false;
	}
}
/*-----------------------------------------------------------------------------------------------
Date clicked; update selectedDay and update calendar

eventIndex passed when an upcoming event clicked from mini view (assume data loaded)
-----------------------------------------------------------------------------------------------*/
function changeDate(year,month,day,eventIndex)
{
	RZclearTimeout();
	month--;
	RZ.calendar.date = homeframe.RZdate(year,month,day);
	RZ.calendar.calDaySelected = day;

	if (typeof eventIndex == 'undefined')
	{
		//if data loading drawCalendarGrid() called after data loads
		RZdisplayMessage();
		if (!updateData()) return;
	}

	if (RZ.calendar.view == 'detail')
		RZ.calendar.view = RZ.calendar.viewloaded = 'mini'

	drawCalendarGrid(RZ.calendar.date,eventIndex)
}
/*---------------------------------------------------------------------------------------------
Change month
---------------------------------------------------------------------------------------------*/
function changeMonth(year,month,day)
{
	RZclearTimeout();
	RZdisplayMessage();
	if (RZ.calendar.view != 'mini')
	{
		if (day > getDaysInMonth(month,year))
			day = getDaysInMonth(month,year);
		else if (day <= 0)
			day = 1;
		changeView('','',homeframe.RZdate(year,month,day));
		return;
	}

	//----- Mini view (from calendar_mini_base.html)
	day = 0;
	RZ.calendar.selectDay = false;
	if (!year)
	{
		year = topframe.RZ.calendar.date.getFullYear()
		month = topframe.RZ.calendar.date.getMonth()
		day = 0;
	}

	RZ.calendar.isCurrentMonth = false;
	if (year == RZ.calendar.today.getFullYear() && month == RZ.calendar.today.getMonth())
	{
		RZ.calendar.isCurrentMonth = true;
		RZ.calendar.selectDay = true;
		day = RZ.calendar.today.getDate();
	}
	else
		day = 1;

	RZ.calendar.date = homeframe.RZdate(year,month,day);

	//return if data loading; drawCalendarGrid() called when after data loads
	if (!updateData('','',RZ.calendar.date)) return;

	drawCalendarGrid();
}
/*---------------------------------------------------------------------------------------------
Advance to next month
---------------------------------------------------------------------------------------------*/
function setNextMonth()
{
	var day = RZ.calendar.calDate.getDate();
	var month = RZ.calendar.calDate.getMonth();
    var year = RZ.calendar.calDate.getFullYear();

	if (month < 11) //not december
		month++;
	else
	{
		year++;
		month = 0;
	}

	changeMonth(year,month,day);
}
/*---------------------------------------------------------------------------------------------
Backup to prior month
---------------------------------------------------------------------------------------------*/
function setPriorMonth()
{
	var day = RZ.calendar.calDate.getDate();
	var month = RZ.calendar.calDate.getMonth();
    var year = RZ.calendar.calDate.getFullYear();

	if (month > 0) //not jan
		month--;
	else
	{
		year--;
		month = 11;
	}
	changeMonth(year,month,day);
}
/*-----------------------------------------------------------------------------
Clear last scheduled timeout used by setNextPrev()
-----------------------------------------------------------------------------*/
function RZclearTimeout()
{
	if (RZ.calendar.timeout)
		clearTimeout(RZ.calendar.timeout);
	RZ.calendar.timeout = null

	if (RZdisplayMessage.timeout)
		clearTimeout(RZdisplayMessage.timeout);
	RZdisplayMessage.timeout = null
}
/*-----------------------------------------------------------------------------
Parses parameters after hash # see wiki for syntax
http://redmine.revize.com/projects/calendar/wiki/Wiki

Returns:
	RZ.calendar.name
	RZ.calendar.date
	RZ.calendar.view
	RZ.calendar.minihtml
	RZ.calendar.css
	updates cooresponding cookies (backward compatibility)

Note:
	Calendar cookies cleared if any parameters are specified.
-----------------------------------------------------------------------------*/
function RZcalendarParameters()
{
    var key, end;
    var calname = ''
    var caldate = new Date();	//default to today
    var calview = 'month'		//default if not iframe
	/* redmine ????
    if (parent.location.href != document.location.href)
    	calview = 'brief'		//default if called from iframe
	*/
    var calminihtml = 'calendar_mini.html';
 	var calcss = '';

	var hash = location.hash
	if (hash.length > 0)
	{
		hash = hash.substring(1);
		if (hash.indexOf('%') != -1) hash = unescape(hash);
		hash = hash.replace(/,{2,}/g,',');
	}
	if (hash.substr(0,1) == ',')
		hash = hash.substr(1);

	//----- check for css= (or new paramater; css depreciated)
	key = 'css=';
	pos = hash.indexOf(key);
	if (pos != -1)
	{
		calcss = hash.substr(pos+key.length);
		hash = hash.substring(0,pos);
		if (RZright(hash,1) == ',')
			hash = hash.substr(0,hash.length-1);
	}

	//----- check for -mini= if found remove and save specified filename
	key = '-mini=';
	pos = hash.indexOf(key);
	if (pos != -1)
	{
		end = hash.indexOf(',',pos);
		if (end < 0) end = hash.length;		//> fixes display
       	calminihtml = hash.substring(pos+key.length,end);
		if (calminihtml == '*')	calminihtml = 'calendar_mini_base.html';
		hash = hash.substring(0,pos+key.length-1) + hash.substring(end);
	}

	//----- Check for view
	RZ.calendar.selectDay = true;
	var pos = hash.lastIndexOf('-')
	if (pos != -1)
	{
		var opt = hash.substring(pos+1).toLowerCase()
		switch (opt)
		{
			case 'month':
			case 'week':
			case 'day':
			case 'brief':
			case 'mini':
				calview = opt;
				hash = hash.substring(0,pos)
				RZ.calendar.isCurrentMonth = true;
				break;
			default:
		}
	}

	//----- Strip trailing blanks and/or commas
	while (hash.length > 0
	&& (hash.substring(hash.length-1)==' '
	||  hash.substring(hash.length-1)==','))
		hash = hash.substring(0,hash.length-1)

	//----- Check for date in any format e.g.
	//dave, feb 2, 1999
	//10-22-1998
	//feb 28, 1999
    pos = hash.indexOf(',');
    if (pos == -1) pos = hash.lastIndexOf(' ');
    if (pos != -1)
    {
		// if 2nd comma or date is valid after 1st comma
		if ( hash.indexOf(',',pos+1) != -1
		|| !isNaN(Date.parse(replace(hash,'-','/').substring(pos))) )
		{
			calname = hash.substring(0,pos);
			caldate = hash.substring(pos+1);
		}
		// if hash is valid date using first comma
		else if ( !isNaN(Date.parse(replace(hash,'-','/'))) )
		{
			calname = ''		//no name
			caldate = hash;		//have date
			RZ.calendar.isCurrentMonth = false;
		}
		else
		{
			calname = hash
			caldate = new Date()
		}
	}
	else if ( !isNaN(Date.parse(replace(hash,'-','/'))) )
		caldate = hash;			//have date
	else
		calname = hash;			//have name

	//----- validate date
	if (caldate)				//found date
		caldate = homeframe.RZdate(caldate);
	else
		caldate = new Date();	//safari does not work with empty string
	if (!caldate)
		caldate = new Date();

	//----- See if only specified calendar is allowed
	if (calname.indexOf('*') == 0)
	{
		calname = calname.substring(1);
		RZ.calendar.exclusive = calname;
	}

	//----- Save specified calender name, date, view and minihtml
	RZ.calendar.name = RZrestoreName(calname);
	RZ.calendar.date = caldate;
	RZ.calendar.view = calview.toLowerCase();
	RZ.calendar.minihtml = calminihtml;	//not supported as of 08-20-2011
	RZ.calendar.css = calcss;

	//----- Possible name from parent hash (will be used if hash is valid calendar name)
	if (RZwinaccess(parent) && parent != window && parent.location.hash.substr(1))
		RZ.calendar.hash = RZrestoreName(parent.location.hash.substr(1));
}
/*-----------------------------------------------------------------------------
Restore calendar name after reading from cookie or url
-----------------------------------------------------------------------------*/
function RZrestoreName(filename)
{
	filename = replace(filename,'%20',' ')
	filename = replace(filename,'&sqout',"'")
	return filename;
}
/*-----------------------------------------------------------------------------
Restore calendar name after reading from cookie or url
-----------------------------------------------------------------------------*/
function replace( inStr, fromString, toString )
{
	var pos = 0
	if (inStr == null
	|| typeof inStr.length == 'undefined' //true or false
	|| inStr.length == 0) return '';

	var fromLen = fromString.length
	if (fromLen == 0) return inStr

	while (true)
	{
		pos = inStr.indexOf(fromString,pos)
		if (pos == -1) break
		inStr = RZsubstring( inStr, 0, pos )
		      + toString
		      + RZsubstring( inStr, pos + fromLen )
		pos += toString.length
	}
	return inStr
}
/*-----------------------------------------------------------------------------
Returns day of week
-----------------------------------------------------------------------------*/
function RZdayName(date)
{
	var days = new Array("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday");
	return days[ date.getDay() ];
}
/*-----------------------------------------------------------------------------
Returns month of year
-----------------------------------------------------------------------------*/
function RZmonthName(date)
{
	var months = new Array('January','February','March','April','May','June',
	                       'July','August','September','October','November','December');
	return months[ date.getMonth() ];
}
/*-----------------------------------------------------------------------------
Returns day of month with suffix: e.g. 1st, 2nd, 3rd, 4th, etc.
-----------------------------------------------------------------------------*/
function RZdaySuffix(date)
{
    var suffix = ''
    var day = date.getDate();
    if (day == 1 || day == 21 || day == 31)
    	suffix = 'st';
    else if (day == 2 || day == 22)
    	suffix = 'nd';
    else if (day == 3 || day == 23)
    	suffix = 'rd';
    else
    	suffix = 'th';
    return day + '<span class="eventDaySuffix">' + suffix + '</span>';
}
/*-----------------------------------------------------------------------------
method to convert the military time to am and pm, put space at end if not blank
-----------------------------------------------------------------------------*/
function RZgetTimeInAmPmSpace(time)
{
	var returnValue = RZgetTimeInAmPm(time);
	if (returnValue != '')
		returnValue += ' '
	return returnValue
}
/*-----------------------------------------------------------------------------
method to convert the military time to am and pm
-----------------------------------------------------------------------------*/
function RZgetTimeInAmPm(time)
{
	if (typeof(time) == 'undefined' || time == '' || time == ':')
		return '';

	var inParts = time.split(":");
	var am_pm;
	if(inParts[0] =='0')
	{
		am_pm = " am";
		inParts[0] = '12'
		return (inParts[0] + ":" + inParts[1] + am_pm);
	}
	if(inParts[0] =='1' || inParts[0] =='2' || inParts[0] =='3' || inParts[0] =='4' || inParts[0] =='5'
	|| inParts[0] =='6' || inParts[0] =='7' || inParts[0] =='8' || inParts[0] =='9' || inParts[0] =='10'
	|| inParts[0] =='11'||inParts[0] =='12' )
	{
		am_pm = " am";
		if(inParts[0] =='12')
			am_pm = " pm";
		return (inParts[0] + ":" + inParts[1] + am_pm);
	}
	else
	{
		am_pm = " pm";
	}
	if(inParts[0] =='13')
		inParts[0] = '1'
	if(inParts[0] =='14')
		inParts[0] = '2'
	if(inParts[0] =='15')
		inParts[0] = '3'
	if(inParts[0] =='16')
		inParts[0] = '4'
	if(inParts[0] =='17')
		inParts[0] = '5'
	if(inParts[0] =='18')
		inParts[0] = '6'
	if(inParts[0] =='19')
		inParts[0] = '7'
	if(inParts[0] =='20')
		inParts[0] = '8'
	if(inParts[0] =='21')
		inParts[0] = '9'
	if(inParts[0] =='22')
		inParts[0] = '10'
	if(inParts[0] =='23')
		inParts[0] = '11'

	return (inParts[0] + ":" + inParts[1] + am_pm);
}
/*-----------------------------------------------------------------------------
Set target for all links
-----------------------------------------------------------------------------*/
function RZsetTarget(win,targetName)
{
	if (!win) win = window;
	if (!targetName) targetName = '_new';
	var links = win.document.getElementsByTagName('a');
	if (links)
		for (i=0;i<links.length;i++)
			if (typeof links[i].href == 'string'
			&& links[i].href.toLowerCase().indexOf('javascript:') != 0)
				links[i].target = targetName;
}
/*-----------------------------------------------------------------------------
Function to retrieve the start time in minutes (input is X:XX)
-----------------------------------------------------------------------------*/
function RZgetTimeInMinutes(mvalue)
{
	var first=0;
	var second=0;
	var totalTime = 0;
	var timeIndex;

	if (mvalue != '')
	{
		timeIndex = mvalue.indexOf(":");
		first = mvalue.substring(0,timeIndex);
		second = mvalue.substring(timeIndex+1, mvalue.length);
		totalTime = (first * 60) + (second * 1);
	}
	else
		totalTime = 0;

	return totalTime;
}
/*-----------------------------------------------------------------------------
Function to replace the %20 string with blank
-----------------------------------------------------------------------------*/
function replaceSpace(filename)
{
	return replace(filename,'20%',' ');
}
/*-----------------------------------------------------------------------------
Function to remove starting "--"
-----------------------------------------------------------------------------*/
function removeStartHyphen( inStr )
{
	if ( 0 == inStr.indexOf("--") )
		inStr = inStr.substring(2);

	return(inStr);
}
/*-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------*/
function getHtmlOfDayEvents(arr)
{
	var toReturn = "";
	for (var i = 0; i < arr.length; i ++)
		toReturn += arr[i][1];
	return toReturn ;
}
/*-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------*/
function sortOnTime(arr, loB, hiB)
{
	if(loB == hiB || loB > hiB)
		return;

	var min = new Array();
	min[0] = arr[loB][0];
	min[1] = arr[loB][1];
	if (arr.length > 1)
		min[2] = arr[loB][2];
	var minIdx = loB;

	var min_temp = min[0];
	for(var i = loB; i < hiB; i++)
	{
		if(min_temp > arr[i][0])
		{
			minIdx = i;
			min_temp = arr[i][0];
		}
	}
	if(minIdx != loB)
	{
		arr[loB][0] = arr[minIdx][0];
		arr[loB][1] = arr[minIdx][1];
		if (arr.length > 1)
			arr[loB][2] = arr[minIdx][2];
		arr[minIdx][0] = min[0];
		arr[minIdx][1] = min[1];
		if (arr.length > 1)
			arr[minIdx][2] = min[2];
	}
	loB++;
	sortOnTime(arr, loB, hiB);
}
/*-----------------------------------------------------------------------------------
Make ajax call to load specified url; if callback function specified, call when url
loads or error reported.

-----------
PARAMETERS:
-----------
url			(required) url to be loaded
filetype	(optional) 'js', 'css', 'htm', 'html', 'xml', 'jsp', 'json'
					   (if omitted, file extension of the url is used)
callback	(optional) callback function
					   (last argument this filetype argument not required)

						Argument passed to callback function based on filetype
						For xml requests, new RZxmldoc() class passed
------------------
CAUTIONS / ISSUES:
------------------
1.	css filetype NOT supported; js filetype may not work especially in all browsers
2.	Ajax does not support cross browser url's; could perhaps load into script or other HTML
	object and use innerHTML or something; see strategy in RZloadjscssfile()

---------------------
REFERANCES / CREDITS:
---------------------
Original Ajax logic: w3schools.com

callback logic, status==304 and xmlhttp.send(null):
  http://ntt.cc/2008/02/10/4-ways-to-dynamically-load-external-javascriptwith-source.html

dhtml:
  http://stackoverflow.com/questions/3765364/javascript-how-to-inject-external-html-file-on-same-domain
  (did not provide callback strategy to wait for load to complete)

-----------------------------------------------------------------------------------*/
function RZajaxload()	//PARAMETERS: url[,filetype][,callBackFunction] SEE ABOVE
{
	var args = []; //create Array object from RZajaxload.arguments pseudo array
	for (var i=0;typeof(RZajaxload.arguments[i])!='undefined';i++)
		if (!isNaN(i)) args.push(RZajaxload.arguments[i]);

	var url = args.shift();			//always 1st argument
	var callBackFunction = null;	//last argument if supplied
	if (args.length > 0
	&& args[args.length-1].constructor == Function)
		callBackFunction = args.pop();
	var filetype = args.shift();	//may be undefined

	//----- Create ajax request object
	var xmlhttp;
	if (window.XMLHttpRequest) 	// code for IE7+, Firefox, Chrome, Opera, Safari
		xmlhttp=new XMLHttpRequest();
	else						// code for IE6, IE5
		xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");

	//----- Determine filetype
	filetype = filetype ? filetype : RZgetfileinfo(url).extension;

	//----- Create xmlDoc object if xml filetype
	var xmlDoc = null;
	if (filetype == 'xml')	//create RZxmlDoc object for xml requests
	{
		xmlDoc = new RZxmlDoc(url,RZajaxload.caller);
		if (!callBackFunction)
			xmlDoc.warn('No callback function for xml request');
	}

	// Define Ajax xmlhttp callback function which calls callbackFunction if specified
	xmlhttp.onreadystatechange=function()
	{
		var msg = '';
		if (xmlhttp.readyState == 4)
		{
			var callbackArg = null;
			var fileref = null;

			// if error display and continue
			if (xmlhttp.status != 200 && xmlhttp.status != 304)
			{
				msg = xmlhttp.statusText + ' (' + xmlhttp.status + ')';

				// if xml file request, put msg in xmlDoc object
				if (xmlDoc)
				{
					xmlDoc.msg = msg + '\nURL: ' + xmlDoc.url;
					msg = xmlDoc;	//xmlDoc is callback
				}
				callbackArg = msg;
			}
			else
			{
				var isHTML = false;
				switch (filetype)
				{
					case ('js'):
						fileref=document.createElement('script');
						fileref.setAttribute("type","text/javascript");
						fileref.setAttribute("defer",true);		//TODO:???
						fileref.setAttribute("text", xmlhttp.responseText);
						//above strategy probably did not work for all browsers
						//perhaps because the above type WAS incorrectly set to: "text/css"
						//ultimatimately used alternative in RZloadcssjsfile(...) for calendar_app
						isHTML = true;
						break;

					case ('css'):
						fileref=document.createElement("link");
						fileref.setAttribute("rel", "stylesheet");
						fileref.setAttribute("type", "text/css");
						//never determined how to create css from xmlhttp.responseText
						//ultimatimately used alternative in RZloadcssjsfile(...) for calendar_app
						//below code loads css w/o ajax post in RZloadcssjsfile(...)
						//don't remember what happened here (perhaps just copied here as memory jogger)
						//TODO: fileref.setAttribute("href", xmlhttp.responseText);
						isHTML = true;
						break;

					case ('htm'):
					case ('html'):
					{
						//TODO: probably not completed as of 01-27-2012 because final calendar_app
						//		archetecture did not need this functionality.
						fileref = 'html';
						processHTML(xmlhttp);
						break;
					}

					case ('xml'):
						/*BOOKMARK was NOT commented out in some versions of src*/
						//xmlDoc.xml = xmlhttp.responseText;
						//xmlDoc.createDOM();
						fileref = 'xml';
						xmlDoc.createDOM(xmlhttp.responseText);
						callbackArg = xmlDoc;
						break;

					case ('jsp'):
						fileref = 'jsp';
						callbackArg = xmlhttp;
						break;

					case ('json'):
						fileref = 'json';
						var json = RZtrim(xmlhttp.responseText);
						json = json.replace(/^.*?\/\/.*$/gm,'').replace(/[\r\n]/gm,'');
						callbackArg = json;
						break;

					default:
						fileref: 'na';
				}	// end switch

				//----- Shared html document dom logic for css & js file types (TODO: may not be complete)
				//		As of 01-27-2012, calendar_app uses RZloadcssjsfile() in leiu ajax since these
				//		elements can be loaded directly into cooresponding html elements.
				if (isHTML)
				{
					var headElement = document.getElementsByTagName("head")[0];
					headElement.appendChild(fileref);
					callbackArg = true;
				}
			}

			//----- If caller specified callback, call it with argument defined above based on file type
			if (callBackFunction && callbackArg != null)
				callBackFunction(callbackArg, xmlhttp.status, fileref);
		}
	}
	//----- Post the ajax request
	url = RZabsoluteUrl(url);
	/*
	var offset = url.indexOf('/calendar_main_signup');
	if (offset != -1)
		url = location.href.substring(0,offset+1) + xmlDoc.url;
	*/

	url += '?' + Math.round(Math.random()*100000);		//avoid cache
	xmlhttp.open("GET",url,true);
	xmlhttp.send(null);	//w3schools.com did not use null
	return;

	/**
	 *	TODO: load html from external file from url below:
	 *	http://stackoverflow.com/questions/3765364/javascript-how-to-inject-external-html-file-on-same-domain
	 **/
	function processHTML(xmlhttp)
	{
		/*
		(function()
		{
			// our callback: do this when the remote document loads.
			function callback() {
			  var b = frames['my_hidden_frame'].document.body;
			  var response = (b.parentElement||b.parentNode).innerHTML;
			  // do whatever you need to do here
			  alert(response);
			}


			// create an iframe
			var e = document.createElement('iframe');

			// your ajax content
			e.src = '/some/local/path';

			// give the frame an id
			e.id = 'my_hidden_frame';

			// make the iframe invisible, but don't just display:none,
			// because some browser (forgot which, old safari?) screws it up
			e.style.height='0px';
			e.style.width='0px';
			e.style.position='absolute';
			e.style.left='-100px';

			e.onload=callback;

			// put it in the body, it will load.
			document.body.appendChild(e);

		}());
		*/
	}
}
/*---------------------------------------------------------------------------------------
Creates class with browser INDEPENDENT functions for retrieving XML elements, attributes
and values for XML initially parsed by one of the following browser DEPENDENT parsers:

	ActiveXObject("Microsoft.XMLDOM")		//IE
	DOMParser()								//Standards based browser
---------------------------------------------------------------------------------------*/
function RZxmlDoc(url,caller)
{
	this.msg = '';
	this.xml = '';
	this.url = url;
	this.caller = caller;
	this.dom = null;
	this.warn = function(msg) { return warn(this.formatMessage(msg)) };

	/**
	 *	createDOM
	 **/
	this.createDOM = function(xml)
	{
		var msg = '';
		this.dom = null;
		this.xml = '';

		var e;
		try
		{
			while (true)
			{
				if (!xml) break;
				this.xml = xml;

				if (window.DOMParser)
				{
					var parser = new DOMParser();
					this.dom = parser.parseFromString(xml,"text/xml");
					if (!this.dom) break;

					var tags = this.dom.getElementsByTagName("parsererror");
					if (tags.length > 0)
					{
						msg = 'XML DOMParser:\n' + tags[0].innerText;
						msg = msg.replace(/page/,'xml');
					}
				}
				else 	// older Internet Explorer
				{
					this.dom = new ActiveXObject("Microsoft.XMLDOM");
					if (!this.dom) break;

					this.dom.async = "false";
					this.dom.loadXML(xml);
					if (this.dom.parseError && this.dom.parseError.errorCode != 0)
						msg = msg = 'XML Corupt '
							+ " Error Code: " + xmlDoc.parseError.errorCode
							+ " Error Reason: " + xmlDoc.parseError.reason
							+ " Error Line: " + xmlDoc.parseError.line
				}
				break;
			}

			if (!msg && (this.dom == null || !this.dom.documentElement))
				msg = 'XML Corupt';
		}
		catch (e)
		{
			msg = 'JAVASCRIPT exception processing XML' + e.toString() + '\n';
			if (e.filename)
				msg += 'filename: ' + e.filename + '\n';
			if (e.lineNumber)
				msg += 'lineNumber: ' + e.lineNumber + '\n';
		}

		/*BOOKMARK if (!msg) msg = 'forced error for testing';*/
		//if (!msg) msg = 'forced error for testing';
		if (msg) this.warn(msg);
	}

	/**
	*	Format msg and append to popupErrorMessageDetail container
	**/
	this.warn = function(msg)
	{
		displayUserMessage('\n' + this.formatMessage(msg));
	}

	/**
	*	return an array of tags from anywhere in xmlDOM
	**/
	this.getTags = function(tag)
	{
		if (this.dom)
			return this.dom.getElementsByTagName(tag);
		this.warn('No DOM loaded');
		return [];
	}

	/**
	*
	**/
	this.getValue = function(el)
	{
		var value = '';
		if (typeof(el.text) != 'undefined')
			value = el.text;
		else if (typeof(el.textContent) != 'undefined')
			value = el.textContent;
		else
			this.warn('xml tag: ' + el.tagName + ' value cannot be determined');
		return value;
	}
	/**
	*	first checks for an attribute on the tag element; if no such attribute then looks for child tag
	*	matching specified attr and returns the innerXML value.
	**/
	this.getAttribute = function(tagElement,attr)
	{
		//if (tagElement.getAttribute) return attr + ' unknown';
		var value = tagElement.getAttribute(attr);
		if (value == null)
		{
			var childTags = tagElement.getElementsByTagName(attr);
			if (childTags.length > 0)
			{
				value = this.getValue(childTags[0]);
				if (value == '' && childTags.length == 1 && childTags[0].getAttribute('value') != null)
					value = childTags[0].getAttribute('value')
			}
		}
		return value;
	}
	/**
	*	return object containing all attributes and child tags value
	*	TODO: return objects when childNode has more than 1 child
	*		  (on IE 1st child nodeValue is the value found in text)
	**/
	this.getAttributes = function(tagElement)
	{
		var i,attributes = {};
		for (i=0;i<tagElement.attributes.length;i++)
		{
			var attr = tagElement.attributes[i].nodeName;
			attributes[attr] = this.getValue(tagElement.attributes[i],attr);
		}
		for (i=0;i<tagElement.childNodes.length;i++)
		{
			var attr = tagElement.childNodes[i].nodeName;
			attributes[attr] = this.getValue(tagElement.childNodes[i],attr);
		}
		return attributes;
	}
	/**
	*	Append xml url to msg and add link to xml validator if xml exists
	**/
	this.formatMessage = function(msg)
	{
		var url = '';
		if (this.url)
		{
			url = this.url;
			if (!this.xml)
				msg += ' No XML returned';

			else if (document.xmlValidate)
			{
				document.xmlValidate.fragment.value = this.xml;
				url = '<a href="javascript:document.xmlValidate.submit()" target="_blank">' + url + '</a>'
			}
			url = '\n\n' + url;
		}
		var msg = msg + url + '\n';
			    //+ '\n\n Called From\n\n' + this.callStack;
		return msg;
	}
}
/*---------------------------------------------------------------------------------------
Display call stack

Options:
	debug		pause in debug mode
	debug=???	only pause if RZdebugoption[???] is true
	force		pause even if not in debug mode
	yes			assume yes rather using comfirm
---------------------------------------------------------------------------------------*/
function RZdisplayCaller(msg,options)
{
    if (!msg) msg = '';
	if (msg) msg += '\n\n';
	if (!options) options = '';

	var trace = '';
	var isDebug = RZcheckoptions(options,'debug')
	var isDebugForce = RZcheckoptions(options,'force')
	if (isDebugForce) isDebug = true;

	var e = '';
	try											//don't want js error for users
	{
		if (isDebug)
		{
			if (!RZ.debug && !isDebugForce)		//RZ.debug can be typeof unknown
				return false;
			var isDebugYes = RZcheckoptions(options,'yes');
			var debugOption = RZgetoption(options,'debug');	//debug=
			if (!debugOption || !RZisDebugOption(debugOption)) return false;
		}

		var i, count = 0;
		var funcName = '';
		var patternFunction = /function\s*(\w*)\s*\((.*?)\)[^{]*{([\s\S]*)}/
		//                                 1         2           3
		//								   name      args        script
		for (var func = RZdisplayCaller.caller; func != null; func = func.caller)
		{
			var script = func.toString();
			var results = funcName = script.match(patternFunction);
			if (!results)
				funcName = '*unknown*';
			else
				funcName = results[1] + '(' + results[2] + ')';

			if (funcName == null || funcName.length == 0)
				funcName = "anonymous"

			if (!count++) 		//if 1st caller
			{
				trace += msg;
				var indentFunc = isDebug ? 0 : 4;
				var indentArgs = indentFunc + 4;
				msg = RZdup(indentFunc,' ') + funcName + '\n';
				var args = results[2];
				if (args)
				{
					args = args.split(',');
					for (i=0;i<args.length;i++)
					{
						var value = 'undefined';
						if (i < func.arguments.length) 	//value supplied
						{
							var indentValue = indentArgs + args[i].length + 1;
							value = func.arguments[i] + '';
							value = value.replace(/\t/g,'    ');
							if (value.length > 20)
								value = RZtrim(value.substr(0,20)) + '...';
							value = value.replace(/\n/g,'\n' + RZdup(indentValue,' '));
						}
						msg += RZdup(indentArgs,' ') + args[i] + '='
							   + value
							   + '\n';
					}
				}
				if (isDebug)
					trace += 'DEBUG MODE pause in: ' + msg + 'CALLED FROM...\n';
				else
					trace += 'CALLED FROM...\n' + msg;
			}
			else
				trace += '    ' + funcName + "\n";

			if (func.caller == func) break;	//NS 4.0 bug workaround
			if (count > 15) break;	//probably in recursive loop (e.g. calendar setup())
		}

		RZdisplayCaller.fn = funcName;
		var filepath = location.pathname;
		RZdisplayCaller.filename = filepath;

		trace += '    ' + filepath;
		if (isDebug)
			return isDebugYes || confirm(trace + '\n\nStart Debugger?');
	}
	catch (e) {}	//ignore js errors

	return trace;
}
/*---------------------------------------------------------------------------------------
Display all object values and expand object childrend down to OBJECT_DEPTH

Can also be used to return display value for other types (i.e. boolean, number or string) OR
	*undefined*, *empty*, *null*, *true*, *false*

TODO: typeof undefined is not displayed properly
	  html elements have el.contructor == Element is true
---------------------------------------------------------------------------------------*/
function RZdisplayObject(obj,name,indent,isArray)
{
	try
	{
		return RZdisplayObjectProcess(obj,name,indent,isArray);
	}
	catch (e)
	{
		RZdisplayObject.display += '\nException Displaying Object:\n' + e.toString();
		return RZdisplayObject.display;
	}
}
function RZdisplayObjectProcess(obj,name,indent,isArray)
{
	var i, e, results;
	RZdisplayObject.display = '';				//build as processed in case exception

	if (!isArray)	//assume top level starting point, initialize variables
	{
		indent = 0;
		RZdisplayObject.objectCount = 0;
		RZdisplayObject.quit = false;
		RZdisplayObject.lastTypeObject = false;
		RZdisplayObject.firstObject = true;
	}
	//----- Initialize any undefined RZdisplayObject settings
	if (!RZdisplayObject.OBJECT_LIMIT)
		RZdisplayObject.OBJECT_LIMIT = 100;		//max number of object displayed without prompt
	if (!RZdisplayObject.OBJECT_DEPTH)			//TODO:
		RZdisplayObject.OBJECT_DEPTH = 5;		//max depth for object display
	if (!RZdisplayObject.INDENT_SIZE)
		RZdisplayObject.INDENT_SIZE = 4;		//max depth for object display
	if (!RZdisplayObject.MAXLINE)
		RZdisplayObject.MAXLINE = 500;			//max characters displayed for any value
	if (typeof RZdisplayObject.SHOW_PROTOTYPE == 'undefined')
		RZdisplayObject.SHOW_PROTOTYPE = false;	//true to display prototype elements
	if (typeof RZdisplayObject.SHOW_TYPE == 'undefined')
		RZdisplayObject.SHOW_TYPE = true;		//true to display non-object data types
	if (!RZdisplayObject.MARKER)
		RZdisplayObject.MARKER = '&#8226;';		//used for null, empty, etc
	if (!RZdisplayObject.EOL_MARKER)
		RZdisplayObject.EOL_MARKER = '&#172;';	//end of non-object value
	if (!RZdisplayObject.OBJECT_SPACING)
		RZdisplayObject.OBJECT_SPACING = '\n';	//spacing before and after object

	//----- Set work variables for this depth
	var spaces = RZdup(indent * RZdisplayObject.INDENT_SIZE, "&nbsp;");
	var spacesPlus = spaces + RZdup(RZdisplayObject.INDENT_SIZE, "&nbsp;");
	var spacesPlusPlus = spacesPlus + RZdup(RZdisplayObject.INDENT_SIZE, "&nbsp;");

	var type = '';
	var isEmpty = true;
	var isObject = true;
	var isArrayElement = false;
	if (isArray && !isNaN(name))
		isArrayElement = true;
	var objAdjust = obj;

	//----- Determine type
	if (obj && obj.constructor == Array)
	{
		type = 'array';
		isArray = true;
		//objAdjust = {length: obj.length}
		//for (i in obj) {objAdjust[i] = i};
	}

	else if (obj && obj.constructor == Function)
		type = 'function';

	//----- Not called with object, display value of obj argument
	else if (typeof(obj) != 'object' || (indent==0 && obj === null))
		return getValue(obj);

	//----- Headings
	if (type) type += ' ';
	if (indent == 0)	//display for top level
	{
		if (isObject)
		{
			if (!name) name = '[' + type + 'object]: ';
			RZdisplayObject.display += name + '\n';
			indent = 1;
		}
	}
	else
	{
		RZdisplayObject.display += spaces;
		if (isArrayElement)
			RZdisplayObject.display += '[' + name + ']: (' + type + 'object)\n';
		else
			RZdisplayObject.display += '(' + type + 'object): ' + name + '\n';
		//RZdisplayObject.display += spaces + '[object' + type + ']: ' + name + '\n';
	}

	//----- Iterate through the elements in obj; NOTE: when typeof(obj)==function, no iteration takes place
	//		Use objAdjust defined above since for (i in obj) does not find array length property
	for (i in objAdjust)
	{
		// process OBJECT within obj (including functions)
		if (typeof(obj[i]) == 'object' || typeof(obj[i]) == 'function')		//expand nested object
		{
			if (overLimit() || skipPrototype(Function)) continue;

			var prefix = '';
			if (RZdisplayObject.firstObject && !RZdisplayObject.lastTypeObject)
				prefix = RZdisplayObject.OBJECT_SPACING;

			// move down another level
			RZdisplayObject.display += prefix + spaces + RZdisplayObjectProcess(obj[i],i,indent,isArray);
			if (RZdisplayObject.display.substr(RZdisplayObject.display.length-2,1) != '\n')		//don't need newline if returned from nested call
				RZdisplayObject.display += RZdisplayObject.OBJECT_SPACING;

			RZdisplayObject.firstObject = false;
			RZdisplayObject.lastTypeObject = true;
			isEmpty = false;
		}
		// process NON-OBJECT element within obj
		else
		{
			if (skipPrototype()) continue;		// if not displaying prototype variables
			if (isArray && isArrayElement) RZdisplayObject.display += spaces;		// extra indentation for array objects

			var value = getValue(obj[i]) 		// determine non-object value


			value = value.replace(/\n/gm,'\n'+spacesPlusPlus);	//apply indent to all lines
			value = RZdisplayObject.display += spacesPlus + i + ': ' + value + '\n';

			RZdisplayObject.lastTypeObject = false;
			isEmpty = false;
		}
	}

	//----- Done iterating through elements, if nothing displayed, indicate why
	if (isEmpty)
	{
		// extra indentation for array objects
		if (isArray) RZdisplayObject.display += spaces;

		// special values: null, function, empty
		if (obj === null)							//null object
			RZdisplayObject.display += spacesPlus + RZdisplayObject.MARKER + 'null' + RZdisplayObject.MARKER + '\n';

		else if (obj.constructor == Function)		//function (just show name and paramters)
		{
			results = obj.toString().match(/function\s*(\w*)\s*\(([^\)]*)\)/);
			if (results)
				RZdisplayObject.display += spacesPlus + results[0] + '...\n'
			else									//name not found (should not get here)
				RZdisplayObject.display += spacesPlus  + RZdisplayObject.MARKER+ 'unknown function' + RZdisplayObject.MARKER;
			RZdisplayObject.lastTypeObject = false;
		}
		else if (isEmpty)							//empty object (must test after function test above)
			RZdisplayObject.display += spacesPlus + RZdisplayObject.MARKER + 'no elements' + RZdisplayObject.MARKER + '\n';
	}
	// remove last newline (it gets added by caller)
	RZdisplayObject.display = RZdisplayObject.display.substring(0,RZdisplayObject.display.length-1);
	//-----------------------------
	return RZdisplayObject.display;
	//-----------------------------

	/*
	*	Return true if not displaying any more nested objects.
	*/
	function overLimit()
	{
		if (RZdisplayObject.quit || indent >= RZdisplayObject.OBJECT_LIMIT) return true;
		if (++RZdisplayObject.objectCount > RZdisplayObject.OBJECT_LIMIT)
		{
			if ( confirm(RZdisplayObject.OBJECT_LIMIT + ' objects expanded\n'
			   + 'Display ' + RZdisplayObject.OBJECT_LIMIT + ' more?'))
				RZdisplayObject.objectCount = 0;
			else
				RZdisplayObject.quit = true;
		}
		return false;
	}
	/*
	*	Return true if not displaying prototype functions or variables.
	*	type (optional: Function if checking for Function constructor
	*/
	function skipPrototype(type)
	{
		var status = false;

		//js error from RZupdateFieldList trace after RZclearlist(...)
		if (!RZdisplayObject.SHOW_PROTOTYPE
		&& obj && i && obj[i]
		&& obj[i].constructor
		&& obj[i].constructor.prototype)
		{
			if (type && type == Function
			&& obj[i].constructor.prototype.constructor == type)
				status = true;
			else if (!type && obj[i].constructor.prototype == i)
				status = true;
		}
		return status;

		if (!RZdisplayObject.SHOW_PROTOTYPE
		|| !obj[i].hasOwnProperty(obj))
			status = true;
		else
			status = false;
	}
	/*
	*	determine non-object value
	*/
	function getValue(value)
	{
		var type = typeof(value);

		if (type === 'undefined')
			value = RZdisplayObject.MARKER + 'undefined' + RZdisplayObject.MARKER;

		else if (value === '')
			value = RZdisplayObject.MARKER + 'empty string' + RZdisplayObject.MARKER;

		else if (value === null)
			value = RZdisplayObject.MARKER + 'null' + RZdisplayObject.MARKER;

		else if (value === true)
			value = RZdisplayObject.MARKER + 'true' + RZdisplayObject.MARKER;

		else if (value === false)
			value = RZdisplayObject.MARKER + 'false' + RZdisplayObject.MARKER;

		else if (value.length > RZdisplayObject.MAXLINE)
			value = value.substr(0,RZdisplayObject.MAXLINE) + '...' + RZdisplayObject.EOL_MARKER;

		else
			value += RZdisplayObject.EOL_MARKER;

		if (RZdisplayObject.SHOW_TYPE && type !== 'undefined'
		&& value.indexOf(RZdisplayObject.MARKER + 'empty') != 0
		&& value.indexOf(RZdisplayObject.MARKER + 'null') != 0)
			value = '(' + type + '): ' + value;

		return value;
	}
}
/*---------------------------------------------------------------------------------------
TODO: launch RZdebugger()
TODO: window.onerror = RZexception
---------------------------------------------------------------------------------------*/
function RZexception(e,msg)
{
	if (!msg) msg = 'JAVASCRIPT EXCEPTION:';
	RZtrace(msg,e);
	if (e.toString() == 99999) return;	//RZdebugger stopped script

	msg += '\n' + e.toString();
	warn(msg,'',e.fileName,e.lineNumber);
}
/*-----------------------------------------------------------------------------------
Display error message in RZtrace window if warnings or devmode set true in:
webspace_config.calendar_options (e.g.	devmode=true,warnings=true)
(default is false if no value is defined)
DW initializes to: devmode=false,warnings=false

TODO: add prompt to continue and return value to caller
-----------------------------------------------------------------------------------*/
function warn(msg,options)
{
	if (!options) options = '';

	var levels = {critical:0, severe:1, normal:2, info:3}
	var level = RZgetoption(options,'level');
	if (isNaN(level)) level = levels[level];
	if (isNaN(level)) level = 1;

	if (level > 1 && !RZ.devmode && !RZ.debug) return true;

	RZdisplayMessage(msg);
	return true;
}
/*-----------------------------------------------------------------------------
Log activity
-----------------------------------------------------------------------------*/
function RZlog(title,msg,level)
{
	if (!level) level = 1;	//severe is default
	if (isNaN(homeframe.RZ.logLevel)) return;
	if (level > homeframe.RZ.logLevel) return;

	if (!msg) msg = '';
	if (!title) title = '';
	if (!msg && !title) return;				//no title or msg

	if (typeof msg == 'object')
	{
		var depth = RZdisplayObject.OBJECT_DEPTH;
		RZdisplayObject.OBJECT_DEPTH = 0;
		msg = RZdisplayObject(msg);
		RZdisplayObject.OBJECT_DEPTH = depth;
	}

//alert(title+'\n\n'+msg);
//return;
	homeframe.RZtrace.show = true;			//turn on trace
	homeframe.RZtrace(title,msg);
	homeframe.RZtrace.show = false;			//turn off trace
}
/*-----------------------------------------------------------------------------
Function to display the error messages
-----------------------------------------------------------------------------*/
function RZfieldError(theField, errorMsg, win)
{
	var e;
	try
	{
		if (typeof win == 'undefined') win = window;

		if (!setInnerHTML('errorMsg',errorMsg.replace(/\n+/g,' ')))
			win.alert(errorMsg)

		if (theField)
		{
			var focusSelect = '';
			if (theField.select)
				focusSelect = function(){theField.select()};
			else if (theField.focus)
				focusSelect = function(){theField.focus()};
			if (focusSelect)
			{
/*BOOKMARK //TODO: RZfieldError add scrollto*/
				if (RZloadingDone.isCalled)
					focusSelect();
				else
					setTimeout( function() {focusSelect()}, 1000);
			}
		}
	}
	catch (e)
	{
		RZdisplayMessage(RZdisplayCaller(e + '\n\n' + errorMsg));
	}
	return false;
}
/*-----------------------------------------------------------------------------------
Display meaningful user message -- create message container if not found
e.g. Specified Calendar does not exist -- no calendars defined -- invalid xml
-----------------------------------------------------------------------------------*/
function displayUserMessage(msg)
{
	msg = msg.replace(/\n/g,'<br>');
	var el = document.getElementById('popupErrorMessageDetail')
	if (!el)
	{
		var div = document.createElement('div');
		div.setAttribute('id','popupErrorMessage');
		div.className = "RZhidden";

		el = document.createElement('div');
		el.setAttribute('id','popupErrorMessageInner');
		el.setAttribute('align','center');
		div.appendChild(el);

		var a = document.createElement('a');
		a.setAttribute('href',"javascript:RZloadingContinue()");
		el.appendChild(a);

		var text = document.createTextNode('close');
		a.appendChild(text);
	}
	el.innerHTML += '<br>' + msg;
}
/*-----------------------------------------------------------------------------------
Display error message

TODO: beep
http://stackoverflow.com/questions/879152/how-do-i-make-javascript-beep
<style type="text/css">
        {cue: url("beep.wav") }
</style>

var body=document.getElementByTagName("body");
body.className=body.className + " " + "beep";

http://www.rgagnon.com/jsdetails/js-0024.html

options		(optional) comma separated string with one of more of the following:
			admin	only display for Administrators
			append	to append to existing message

return false if msg otherwise true
-----------------------------------------------------------------------------------*/
function RZdisplayMessage(msg,options)
{
	var html;

	//----- Only show messages if webspace desc contains warnings or debug mode
	if (!RZ.warnings && !RZ.debug) return;

	//----- Clear timeout that clears messages after a min or so
	if (RZdisplayMessage.timeout)
	{
		clearTimeout(RZdisplayMessage.timeout);
		RZdisplayMessage.timeout = null;
	}

	if (!msg) msg = '';
	if (!options) options = '';
	if (!RZdisplayMessage.delay) RZdisplayMessage.delay = 60000;	//delay before msg cleared

	RZlog('RZdisplayMessage',msg);


	var isAppend = RZcheckoptions(options,'append');
	var isAdmin  = !RZcheckoptions(options,'user');
	var isClear  = RZcheckoptions(options,'clear');
	var isDebugMode = !RZdisplayMessage.debugModeInnerHTML		//if not yet used for message

	//----- Do not clear message if page not loaded
	if (isClear
	&& (RZ.debug || !RZloadingDone.isCalled))
		return;

	//----- Find div for message
	var el = document.getElementById('errorMsg');		//use errorMsg div if found
	while (!el)											//if not, try debugMode div
	{
		elContainer = document.getElementById('debugMode')
		el = document.getElementById('debugModeCenter')
		if (!el || !elContainer) break;

		//if currently debugMode display
		if (msg && isDebugMode)
		{
			RZdisplayMessage.debugModeInnerHTML = el.innerHTML;
			el.innerHTML = RZ.calendar.setDebug+'Administrator Messages'+RZ.calendar.debugLink;
			elContainer.style.display = 'block';		//override class
			isDebugMode = false;
		}
		// restore to debugMode display
		else if (!msg && !isDebugMode)
		{
			elContainer.style.display = '';			//revert to class
			el.innerHTML = RZdisplayMessage.debugModeInnerHTML;
			var windowName = document.getElementById('windowName');
			if (windowName) windowName.innerHTML = window.name;
			RZdisplayMessage.debugModeInnerHTML = false;
			isDebugMode = true;
		}
		break;
	}

	//----- If div found use for message
	if (el)
	{
		msg = msg.replace(/\n/g,'<br>');
		if (!msg)		//if clearing message
		{
			if (!isDebugMode) el.innerHTML = '';
			RZdisplayMessage.skip = false;
		}
		else
		{
			if (el.innerHTML != '' && isAppend)	//if prior msg and appending, prepend <br>
				msg = '<br>' + msg;

			if (isAppend)
				el.innerHTML += msg;
			else
				el.innerHTML = msg;
		}
	}

	//----- Otherwise alert if msg
	else if (msg && !RZdisplayMessage.skip)
	{
		msg = 'Administrator Message\n\n' + msg
			+ '\n\nSkip additional messages from this action?'
		if (confirm(msg))
			RZdisplayMessage.skip = 1;
	}
	else
	{
		if (++RZdisplayMessage.skip > 10)
			RZdisplayMessage.skip = false;
	}

	//----- If message showing, schedule clear for min or so
	if (msg && !isDebugMode && el && el.innerHTML)
	{
		var fn = "RZdisplayMessage('','clear')";
		RZdisplayMessage.timeout = setTimeout(fn,RZdisplayMessage.delay);
	}
	return !msg;
}

//******************************************/
/*BOOKMARK -----Active List functions-----*/
//****************************************/

/*-----------------------------------------------------------------------------------
Called by calendar_data.html onLoad handler to load the list of activeMonths
or activeWeeks for specified calendar name
-----------------------------------------------------------------------------------*/
function loadActiveList()
{
	var i;
	var msg = '';

	//----- Clear existing event data
	//		days, daysNext cleared in loadActiveData()
	RZ.calendar.months = new Object();	//active months list
	RZ.calendar.weeks = new Object();	//active weeks list

	//----- Update calendar setting
	RZ.calendar.id = '';
	RZ.calendar.datatype = 'month';
	if (RZ.calendar.view.toLowerCase() == 'week')
		RZ.calendar.datatype = 'week';

	/*BOOKMARK Look up id for selected calendar (RZ.calendar.name)*/
	var calname = RZ.calendar.name;
	var id = getCalendarId(RZ.calendar.hash);
	if (id)
	{
		RZ.calendar.name = getCalendarName(id);
		if (RZ.calendar.hash.indexOf('*') == 0)
			RZ.calendar.exclusive = RZ.calendar.name;
	}
	if (RZ.calendar.name)
	{
		RZ.calendar.id = getCalendarId(RZ.calendar.name);
		if (RZ.calendar.id === '')
		{
			displayUserMessage('Specified Calendar "' + RZ.calendar.name + '" does not exist');
			//RZdisplayMessage('Specified Calendar "' + RZ.calendar.name + '" does not exist', 'append');
			RZ.calendar.exclusive = '';
		}
	}

	//----- Find default calendar if none specified or selected calendar unknown
	if (RZ.calendar.id === '')
	{
		// For current selection: use master if defined else master use lowest calendar
		if (RZ.calendar.default_id)
			RZ.calendar.id = RZ.calendar.default_id;
		else
			RZ.calendar.id = getFirstCalendar();

		if (RZ.calendar.id !== '')						//found default
		{
			RZ.calendar.name = getCalendarName(RZ.calendar.id);
			if (calname)	//if prior name
				displayUserMessage('(displaying Calendar "' + RZ.calendar.name + '")');
				//RZdisplayMessage('(displaying Calendar "' + RZ.calendar.name + '")', 'append,admin');
		}
		else
		{
			msg = '\n\nNo Calendars Defined - Click on Configure button to Create'
			displayUserMessage(msg);
			//RZdisplayMessage(msg, 'append,admin');
		}
	}

	//----- Get active months or week list filename
	var src = '';
	if (RZ.calendar.id !== '')
	{
		if (RZ.calendar.datatype == 'week')
			src = RZgetActiveWeekListFileName(RZ.calendar.name);
		else
			src = RZgetActiveMonthListFileName(RZ.calendar.name);
	}
	if (!src)	//no src means undefined calendar name already reported
	{
		loadActiveData();
		return;
	}

	/*BOOKMARK -----active LIST*/
	//----- Start loading data files
	function processActiveList(xmlDoc)
	{
		if (xmlDoc.msg)
		{
			displayUserMessage(xmlDoc.msg);

			/* DCO 01-20-2014
			msg = 'Active List xml request: ' + xmlDoc.msg;
			RZdisplayMessage(msg, 'append,admin');
			*/
		}
		else
		{
			//----- Populate months or weeks not error if no data
			var yearMonthWeeks = xmlDoc.getTags(RZ.calendar.datatype);

			/* DCO 01-20-2014
			if (yearMonthWeeks.length == 0)
				RZdisplayMessage(src + ' xml bad','append');
			else
			*/

			if (yearMonthWeeks.length > 0)
			{
				for (var i=0;i<yearMonthWeeks.length;i++)
				{
					var value = xmlDoc.getValue(yearMonthWeeks[i]);
					var year = value.substr(0,4);
					var monthWeek = value.substr(4);
					if (monthWeek.substr(0,1) == '0') monthWeek = monthWeek.substr(1);
					if (RZ.calendar.datatype == 'month')
						RZactivemonth_add(monthWeek,year);
					else
						RZactiveweek_add(monthWeek,year);
				}
			}
		}
		loadActiveData();	//always called so calendar always displays
	}
	//ajax callback function must proceed RZajaxload() call for Firefox & Chrome
	var fileinfo = RZgetfileinfo(homeframe.location.href);
	src = fileinfo.domain + fileinfo.pathname + '/db/' + src;
	RZajaxload(src, processActiveList);
}

//*******************************************/
/*BOOKMARK -----Active Data functions-----*/
//****************************************/

/*-----------------------------------------------------------------------------------
Loads data for current or next month.
-----------------------------------------------------------------------------------*/
function loadActiveData(isNextMonth)
{
	var msg = '';
	if (!RZ.calendar.date)						//invalid date
		RZ.calendar.date = homeframe.RZdate();	//default to today
	if (!RZ.calendar.date.isRZdate)				//not RZdate object
		RZ.calendar.date = homeframe.RZdate(RZ.calendar.date);

	//----- Calendar Id and active month data
	var month = RZ.calendar.date.getMonth()+1;
	var year = RZ.calendar.date.getFullYear()
	var yearweek = RZ.calendar.date.getWeek();

	var nextMonth = (month) % 12 + 1;
	var nextYear = month < 12 ? year : year+1;
	if (isNextMonth)
	{
		RZ.calendar.isNextMonthDataLoaded = true;
		month = nextMonth;
		year = nextYear;
	}
	else		//first month
	{
		//new structure
		RZ.calendar.events = {};
		RZ.calendar.isNextMonthDataLoaded = false;

		/* old structure
		RZ.calendar.days = new Object();		// clear month event data
		delete RZ.calendar.daysNext;
		RZ.calendar.weekdays = new Object();	// clear week event data
		*/
	}

	if (RZ.calendar.name)	//backward compatibility (signup sets RZ.calendar.id)
		RZ.calendar.id = getCalendarId(RZ.calendar.name)

	//----- Load data or display calendar based on type of display
	var src = '';
	if (RZ.calendar.id !== '')
	{
		if (RZ.calendar.datatype == 'week' && RZis_activeweek(yearweek, year))
			src = RZgetActiveWeekDataFileName(RZ.calendar.name, year, yearweek);
		else if (RZis_activemonth(month, year))
			src = RZgetActiveMonthDataFileName(RZ.calendar.name, year, month)
	}
	if (!src)	//no src means no events for this period
	{
		displayCalendar();
		return;
	}

	/**
	 * Internal loadData() function
	**/
	function processActiveData(xmlDoc, status, fileref)
	{
		if (xmlDoc.msg)
		{
			displayUserMessage(xmlDoc.msg);
			/* DCO 01-20-2014
			msg = 'Active Data xml request: ' + xmlDoc.msg
			RZdisplayMessage(msg, 'append,admin');
			*/
		}
		else	//load events if no error
		{	//DCO 09-02-2014: was only skipping next line if error not this whole code block
			var events = xmlDoc.getTags('events');		//toplevel element
			if (events.length > 0)
			{
				var format = xmlDoc.getAttribute(events[0],'format');
				var version = xmlDoc.getAttribute(events[0],'version');
				var xmlDate = RZdate(version);
				var isBetaXML = format == "3.1" || (xmlDate.getTime() < new Date('07/28/2012').getTime());
				RZ.calendar.xmlDataVersion = version;		//DCO 09-02-2014

				events = xmlDoc.getTags('event');			//child elements
				for (var i=0;i<events.length;i++)
				{
					var dateStr = xmlDoc.getAttribute(events[i],'date_begin');
					var event_date = homeframe.RZdate(dateStr);
					var eventId = xmlDoc.getAttribute(events[i],'id');
					if (!event_date || eventId <= 0) continue;

					var e = addEvent(event_date,eventId);
					var attributes = xmlDoc.getAttributes(events[i]);
					for (var j in attributes)
					{
						var key = (j == 'id') ? 'recordid' : j;
						var value = attributes[j];
						if (key == 'summary' && value.indexOf('DATES:') == 0)
						{
							value = value.substr(6).split(',');
							if (isBetaXML				//beta version 3.1 XML (no dates xml element)
							&& (value.length > 1 || value[0] != ''))
								e.dates = value;
							else						//only clear if dates xml element
								value = '';
						}
						e[key] = value;
					}
					if (typeof e.dates == 'string')		//should always be true if there are dates
						e.dates = e.dates.split(',');

					if (e.dates)	// add all but 1st date
					{
						if (!e.repeatid)	//add dates if not single override date
							addEventDates(e.dates.slice(1),eventId);

						// Remove event begin date if skipped				//09-02-2014 DCO\\
						if (e.dates[0] == event_date.get('shortDate') + '-')
						{
							dateStr = event_date.get('revizeDate');
							var idx = RZ.calendar.events.map[dateStr].indexOf(eventId+'');
							if (idx >= 0)	//should always be true
								RZ.calendar.events.map[dateStr].splice(idx);
						}
					}
				}
			}
		}
		displayCalendar();	//will load next month if needed
	}
	//ajax request with callback must follow callback on FF & Chrome
	var fileinfo = RZgetfileinfo(homeframe.location.href);
	src = fileinfo.domain + fileinfo.pathname + '/db/' + src;
	RZajaxload(src, processActiveData);
}

//************************************/
/*BOOKMARK -----Event functions-----*/
//**********************************/

/**
 *  return array of eventids for specified date:
 *
 *	options		following options separated by commas
 *					create	object map array created for date if not defined
 *					number
 *					begin
 *
 *
 *  There are two (2) map arrays:
 *		1. begin dates for each event occurance (use if options contains "begin")
 *		   useful to prevent dups in list e.g. Upcoming or Notable events
 *		2. all dates for each event: begin date & continued dates (default)
 *		   used when drawing calendar grids to show event on all its date
 **/
function getEvents(dateIn,options)
{
	if (!dateIn) return [];	//return empty array if date missing or invalid

	var date = dateIn;		//preserve dateIn if pointer to caller object
	if (!date.isRZdate)
	{
		date = date + '';	//convert to string
		if (RZright(date,1) == '+')
			date = date.substr(0,date.length-1);
		date = homeframe.RZdate(date);
	}

	var dateStr = date.get('revizeDate');
	/* DCO 05-20-2013
	if (RZcheckoptions(options,'begin'))
		dateStr += '-begin';
	*/

	//----- Make sure events{} and children objects exist;
	//		always creates events{} and events.map{} if needed
	if (!RZ.calendar.events) RZ.calendar.events = {};
	if (!RZ.calendar.events.map) RZ.calendar.events.map = {};
	if (!RZ.calendar.events.map[dateStr])
	{
		if (RZcheckoptions(options,'create'))
			RZ.calendar.events.map[dateStr] = [];
		else
			return [];
	}
	return RZ.calendar.events.map[dateStr];
}
/**
 *	returns count of events for specified date
 *	date can be date object or string
 **/
function getEventsCount(date)
{
	return getEvents(date).length;
}
/**
 *	return event object of by eventId or by date/index of event.map

 *
 *
 *
 *
 *	getEvent(eventId[,options])
 *	getEvent(date[,eventIdx])		//date must be object if eventIdx omitted
 **/
function getEvent(eventId,options)	//see notes for args
{
	//----- Determine arguments
	if (!eventId) return null;
	var date = null;				//alternative arguments from named arguments
	var eventIdx = -1;
	switch (getEvent.arguments.length)
	{
		case 1:
			if (typeof eventId != 'object')		//getEvent(eventId)
				break;
												//getEvent(date)
		case 2:									//getEvent(date,eventIdx)
			if (typeof options != 'number')		//getEvent(eventId,options)
				break;
			date = arguments[0];
			eventIdx = getEvent.arguments.length==2 ? arguments[1] : 0;
			eventId = '';
			options = '';

			var events = getEvents(date);		//get eventId from events.map
			if (eventIdx < events.length)
				eventId = events[eventIdx];
			else
				return null;
			break;

		default:
			return null;
	}
	if (eventId < 0) return null;

	//----- Always create events object if it does not exist
	if (!RZ.calendar.events) RZ.calendar.events = {};

	//----- Always create event object so debugger shows all eventId references??
	//		(backward compatibility may need null return if no eventId)
	if (!RZ.calendar.events[eventId] && RZcheckoptions(options,'create'))
		RZ.calendar.events[eventId] = {empty:true};

	//----- Return existing event object or empty object
	return RZ.calendar.events[eventId];
}
function addEvent(date,eventId)
{
	addEventDates(date,eventId);	//primary mapping
	var e = getEvent(eventId,'create');
//	if (e.recordid)					//already exists
//		RZdisplayMessage('eventid:' + eventId + 'already exists', 'append');
	return e;
}
/**
 *	map event date(s) to eventId
 *
 *	datesIn can be date object, string or array of dates and strings
 *	representing event dates (either starting date of each occurance
 *	of repeating event or continuation dates of multi-day event); if
 *	continuation date it should be dateStr with + appended.
 **/
function addEventDates(datesIn,eventId)
{
	if (!datesIn || !eventId) return;		//missing arguments; nothing to do

	var dates = datesIn;					//don't mess with caller object
	if (datesIn.getTime)					//if date convert to single...
		dates = [datesIn];					//...element array containing date
	else if (dates.constructor != Array)	//if not array, convert to array
		dates = dates.toString().split(',');
	if (dates.length == 1 && dates[0] == '') return;

	// For all specified dates...
	for (var i=0;i<dates.length;i++)
	{
		if (RZright(dates[i]+'',1) == '-') continue;	//skipped date
		var events = getEvents(dates[i],'create');		//all dates map
		if (!RZcheckoptions(events.join(','),eventId))	//if eventId not in map...
			events.push(eventId);						//...add it

		/* DCO 04-18-2013: no longer using begin date map
		if (RZright(dates[i].toString(),1) == '+') 		//event continuation
			continue;

		events = getEvents(dates[i],'create,begin');	//begin date map
		if (!RZcheckoptions(events.join(','),eventId))	//if eventId not in map...
			events.push(eventId);						//...add it
		*/
	}
}
/**
 *	get event properties for dates, time,  days, duration and repeat
 *	These are based on display date besides the event properties)
 **/
function getEventProperties(eventId,displayDate)
{
	var i, offset;
	var displayDateTime, dateBegin, dateEnd, dateTmp, timeTmp;
	var properties = { // displayDate and role dependent properties
		eventId: eventId,
		date_time_stamp: '',
		dates: '',
		begin_date: null,
		dayNames: '',
		dayCount: 0,
		times: '',
		repeat: '',
		repeatDesc: '',
		occurrence: 0,
		duration: '',
		rollup: '',
		groupId: '',
		groupName: '',
		calendarName: '',
		isRepeat: false,		//DCO 09-02-2014
		isCalendarDeleted: false,
		isEditor: false,
		isLogin: false,
		e: {}			//all event properties (null if event not found)
	}

	var e = getEvent(eventId);

	//DCO 09-02-2014: Is this repeat event content override for displayDate?
	if (RZ.calendar.isRepeatContentOverride && e && e.edits)
	{
		var shortDate = displayDate.get('shortDate');
		var pattern = new RegExp(shortDate + '=(\\d*)' );
		var results = e.edits.match(pattern)
		if (results)
		{
			var dates = e.dates;
			e = getEvent(results[1]);
			if (e) e.dates = dates;
		}
		//if (e.dates.indexOf(shortDate+'-') != -1)
		//	e = getEvent(shortDate);
	}

	properties.e = e;
	if (properties.e == null)
		return properties;

	//----- groupId, groupName, calendarName, isCalendarDeleted, isEditor, isLogin
	properties.groupId = getGroupId(e.calendarid);				//blank if deleted
	properties.groupName = getGroupName(properties.groupid);	//blank if unknown
	properties.calendarName = getCalendarName(e.calendarid);	//may be "Deleted"
	properties.isCalendarDeleted = !isValidCalendarId(e.calendarid);
	properties.isEditor = RZisValidCalendarEditor(e.calendarid);
	if (properties.isEditor)
		properties.isLogin = homeframe.RZlogin('','calendar_events','c|u','editform');

	//----- Build date_time_stamp
	if (e.date_time_stamp != null && e.date_time_stamp != "" && e.date_time_stamp != " ")
		properties.date_time_stamp = e.date_time_stamp;

	//----- Build duration, dayCount
	properties.duration = e.duration_formatted;		//display
	offset = e.duration.search(/days/i);
	if (offset != -1)		//multi-day
		properties.dayCount = parseInt(e.duration.substr(0,offset));

	//----- Build dates displayed: begin & end date for this occurance of event
	//		(based on duration and repeat dates)
	dateBegin = homeframe.RZdate(e.date_begin);
	dateEnd = homeframe.RZdate(e.date_end);
	if (typeof displayDate != 'object')
		displayDate = new Date(displayDate);
	if (displayDate && e.dates)
	{
		displayDateTime = displayDate.getTime();
		for (i=0;i<e.dates.length;i++)
		{
			var dateStr = e.dates[i];
			if (dateStr == '') continue;
			if (RZright(dateStr,1) != '+')		//begin_date for an event occurance
			{
				var dateTmp = homeframe.RZdate(dateStr);
				if (!dateTmp) continue;

				if (dateTmp.getTime() > displayDateTime) break;	//dates found (done searching dates)
				properties.occurrence++;

				dateBegin = homeframe.RZdate(dateStr);			//set dates to this occurance
				dateEnd = homeframe.RZdate(dateStr);			//cannot be pointer to dateBegin
			}
			else								//event continuation date (multi-day event)
				dateEnd = homeframe.RZdate(dateStr);			//update occurrance end date
		}
	}
	// build dates html
	if (dateBegin)								//valid begin_date (should always be true)
	{
		properties.date_begin = dateBegin;
		properties.dates = dateBegin.get('smartDate').substr(4);
		if (dateEnd && dateEnd.getTime() > dateBegin.getTime())	//valid end_date after beginDate
			properties.dates += ' - ' +  dateEnd.get('smartDate').substr(4);
	}

	//----- Build times for event
	while (e.time_begin)
	{
		properties.times = e.time_begin;				//raw start time

		// create time only date object (i.e. convert hh:mm to RZdate)
		timeTmp = homeframe.RZdate('1/1/1970 ' + e.time_begin);
		if (!timeTmp) break;							//unknown time format

		properties.times = timeTmp.get('miniTime');		//formatted start time: am pm Noon or Midnight
		if (e.duration)
		{
			if ( (offset = e.duration.search(/hrs/i)) != -1)		//hours
				timeTmp = timeTmp.getTime() + parseFloat(e.duration.substr(0,offset)) * 60 * 60 * 1000;
			else if ( (offset = e.duration.search(/min/i)) != -1)	//minutes
				timeTmp = timeTmp.getTime() + parseInt(e.duration.substr(0,offset)) * 60 * 1000;

			if (!isNaN(timeTmp))
				properties.times += ' - ' + homeframe.RZdate(timeTmp).get('briefTime');
		}
		break;
	}

	//----- Build dayNames
	if (dateBegin)								//valid begin_date (should always be true)
	{
		properties.dayNames = dateBegin.get('dayName').substr(0,3);
		if (dateEnd && dateEnd.getDatePart().getTime() > dateBegin.getTime())	//valid end_date after beginDate
			properties.dayNames += ' - ' + dateEnd.get('dayName').substr(0,3);
	}

	//----- Build repeat
	if (e.repeat)
	{
		properties.repeat = e.repeat.substr(0,1).toUpperCase() + e.repeat.substr(1);
		if (dateEnd)
			 properties.repeat += ' until ' + homeframe.RZdate(e.date_end).get('shortDate');
		properties.repeatDesc = e.repeatDesc;
	}

	return properties;
}
/* deferred creating and returning object of days with events
function getEventDays(date)
{
	var month = date.getMonth();
	if (RZ.calendar.events.months
	&& RZ.calendar.events.months[month])
		return RZ.calendar.events.months[month];
	else
		return {};
}

function addEventDays(date)
{
	var year = date.getFullYear();
	var month = date.getMonth();
	var day = date.getDate();
	if (!RZ.calendar.events.months)
		RZ.calendar.events.months = {};

	if (!RZ.calendar.events.months)
		RZ.calendar.events.months = {};
	if (!RZ.calendar.events.months[month])
		RZ.calendar.events.months[month] = {};
	if (!RZ.calendar.events.months[month][day])
		RZ.calendar.events.months[month][day] = 0;
	RZ.calendar.events.months[month][day]++;
}
*/

//************************************************/
/*BOOKMARK -----Event functions depricated -----*/
//**********************************************/

/*-----------------------------------------------------------------------------
Return number of events for specified day
days (optional): either RZ.calendar.days (default) or RZ.calendar.daysNext
-----------------------------------------------------------------------------*/
function RZevent_count(day,days)
{
	if (RZ.calendar && days !== null)
	{
		if (!days) days = RZ.calendar.days
		if (days && days[day] && days[day].events)
			return days[day].events.length;
	}
	return 0;
}
/*-----------------------------------------------------------------------------
Return specified event for specified day for active months
used in javaScript Database
days (optional): either RZ.calendar.days (default) or RZ.calendar.daysNext
-----------------------------------------------------------------------------*/
function RZevent_get(day,eventIdx,days)
{
	if (RZ.calendar)
	{
		if (!days) days = RZ.calendar.days
		if (days && days[day] && days[day].events)
			return days[day].events[eventIdx];
	}
	return null;
}
/*-----------------------------------------------------------------------------
Create & return new event object for specified day of month
used in javaScript Database

-----------------------------------------------------------------------------*/
function RZevent_add(day,eventId)
{
	var dayObj = !RZ.calendar.isNextMonthDataLoaded ? 'days' : 'daysNext';

	//----- Create days and days[day] object
	if (typeof RZ.calendar[dayObj] == 'undefined')
		RZ.calendar[dayObj] = new Object();

	if (typeof RZ.calendar[dayObj][day] == 'undefined')
		RZ.calendar[dayObj][day] = new Object();

	//----- Determine next event index (if necessary, create RZ.calendar.days[day].events)
	var eventIdx = 0;
	if ( typeof RZ.calendar[dayObj][day].events == 'undefined')
		RZ.calendar[dayObj][day].events = new Array();
	else
		eventIdx = RZ.calendar[dayObj][day].events.length;

	//----- Create new event object
	RZ.calendar[dayObj][day].events[eventIdx] = new Object();
	return RZ.calendar[dayObj][day].events[eventIdx];
}
/*-----------------------------------------------------------------------------
Return specified event for specified day[1 - 7 for Mon - Sun]  for active weeks
used in javaScript Database
-----------------------------------------------------------------------------*/
function RZeventfromweek_get(day,eventIdx)
{
	if ( typeof RZ.calendar != 'undefined'
	&& typeof RZ.calendar.weekdays != 'undefined'
	&& typeof RZ.calendar.weekdays[day] != 'undefined'
	&& typeof RZ.calendar.weekdays[day].events != 'undefined'
	&& typeof RZ.calendar.weekdays[day].events[eventIdx] != 'undefined')
		return RZ.calendar.weekdays[day].events[eventIdx];
	 else
		return null;
}
/*-----------------------------------------------------------------------------
Create & return new event object for specified day[1 - 7 for Mon - Sun] of week
used in javaScript Database
-----------------------------------------------------------------------------*/
function RZeventtoweek_add(day)
{
	//----- Create weekdays and weekdays[day] object
	if (typeof RZ.calendar.weekdays == 'undefined')
		RZ.calendar.weekdays = new Object();

	if (typeof RZ.calendar.weekdays[day] == 'undefined')
		RZ.calendar.weekdays[day] = new Object();

	//----- Determine next event index (if necessary, create RZ.calendar.weekdays[day].events)
	var eventIdx = 0;
	if ( typeof RZ.calendar.weekdays[day].events == 'undefined')
		RZ.calendar.weekdays[day].events = new Array();
	else
		eventIdx = RZ.calendar.weekdays[day].events.length;

	//----- Create new event object
	RZ.calendar.weekdays[day].events[eventIdx] = new Object();
	return RZ.calendar.weekdays[day].events[eventIdx];
}

/*-----------------------------------------------------------------------------
Checks if the given month in given year active in javaScript Database
Month ranges from 1 to 12; year is 4 digit year
-----------------------------------------------------------------------------*/
function RZis_activemonth(month, year)
{
	var toRet = false;
	if ( ( typeof RZ != 'undefined' )
	&& ( typeof RZ.calendar != 'undefined' )
	&& ( typeof RZ.calendar.months != 'undefined' )
	&& ( typeof RZ.calendar.months[month] != 'undefined' )
	&& ( typeof RZ.calendar.months[month].years != 'undefined' ) )
	{
		var numElems = RZ.calendar.months[month].years.length;
		for ( var i = 0; i < numElems; i++ )
		{
			if ( ( typeof RZ.calendar.months[month].years[i] != 'undefined' )
				&& ( year == RZ.calendar.months[month].years[i].year ) )
			{
				toRet = true;
				break;
			}
		}
	}
	return toRet;
}

/*-----------------------------------------------------------------------------
Adds a new object to the calendar, month , year tree from javaScript DB
Month ranges from 1 to 12; year is 4 digit year
-----------------------------------------------------------------------------*/
function RZactivemonth_add(month,year)
{
	//----- Create months and months[month] object
	if (typeof RZ.calendar.months == 'undefined') RZ.calendar.months = new Object();
	if (typeof RZ.calendar.months[month] == 'undefined') RZ.calendar.months[month] = new Object();

	//----- Determine next year index
	//		(if necessary, create RZ.calendar.months[month].years)
	var yrIdx = 0;
	if (typeof RZ.calendar.months[month].years == 'undefined')
		RZ.calendar.months[month].years = new Array();
	else
		yrIdx = RZ.calendar.months[month].years.length;

	//----- Create new event object and set year
	RZ.calendar.months[month].years[yrIdx] = new Object();
	RZ.calendar.months[month].years[yrIdx].year = year;

	return;
}
/*-----------------------------------------------------------------------------
Used for getting the active month file name,
that is to be included depending on the calendar name
-----------------------------------------------------------------------------*/
function RZgetActiveMonthListFileName( calendarName )
{
	if ( null == calendarName || "" == calendarName )
		return null;

	var calid = getCalendarId(calendarName);
	return ("calendar_" + calid + "_activemonth_list.xml")
}

/*-----------------------------------------------------------------------------
Used for getting the active month file name also based on the calendar name.
month ranges from 1 to 12; year is 4 digit year
-----------------------------------------------------------------------------*/
function RZgetActiveMonthDataFileName( calendarName, year, month )
{
	/*
	if (null == calendarName || "" == calendarName)
		return null;
	*/
	if (null == year)
		return null;

	else if (null == month || month < 1 || month > 12)
		return null;

	var monthStr = (month).toString()
	if (monthStr.length == 1)
		monthStr = '0' + monthStr;

	//var calid = getCalendarId();
	var filename = "calendar_" + RZ.calendar.id
				 + "_activemonthsdata_"
				 + year + '-' + monthStr + ".xml";

	return filename;
}

//*******************************************/
/*BOOKMARK -----Active Weeks functions-----*/
//*****************************************/

/*-----------------------------------------------------------------------------
Used for getting the active week file name,
that is to be included depending on the calendar name
-----------------------------------------------------------------------------*/
function RZgetActiveWeekListFileName( calendarName )
{
	if ( null == calendarName || "" == calendarName )
		return null;

	var calid = getCalendarId(calendarName);
	return ("calendar_" + calid + "_activeweek_list.xml")
}
/*-----------------------------------------------------------------------------
Used for getting the active week's data file name,
that is to be included depending on the calendar name
-----------------------------------------------------------------------------*/
function RZgetActiveWeekDataFileName( calendarName, year, yearweek )
{
	if (null == calendarName || "" == calendarName)
		return null;

	else if (null == year)
		return null;

	else if (null == yearweek || 1 > yearweek || 53 < yearweek)
		return null;

	//----- Published filenames can not contain single quote
	calendarName = replace(calendarName,"'","_");

	var yearweekStr = yearweek.toString()
	if (yearweekStr.length == 1)
		yearweekStr = '0' + yearweekStr;

	var calid = getCalendarId(calendarName);
	var filename = "calendar_" + calid
				 + "_activeweeksdata_"
				 + year + '-' + yearweekStr + ".xml";

	return filename;
}
/*-----------------------------------------------------------------------------
Checks if the given week in given year active in javaScript Database
-----------------------------------------------------------------------------*/
function RZis_activeweek(yearweek, year)
{
	toRet = false;
	if ( ( typeof RZ.calendar != 'undefined' )
	&& ( typeof RZ.calendar.yearweeks != 'undefined' )
	&& ( typeof RZ.calendar.yearweeks[yearweek] != 'undefined' )
	&& ( typeof RZ.calendar.yearweeks[yearweek].years != 'undefined' ) )
	{
		var numElems = RZ.calendar.yearweeks[yearweek].years.length;
		for ( var i = 0; i < numElems; i++ )
		{
			if ( ( typeof RZ.calendar.yearweeks[yearweek].years[i] != 'undefined' )
			&& ( year == RZ.calendar.yearweeks[yearweek].years[i].year ) )
			{
				toRet = true;
				break;
			}
		}
	}
	return toRet;
}
/*-----------------------------------------------------------------------------
Adds a new object to the calendar, yearweek , year tree from javaScript DB
-----------------------------------------------------------------------------*/
function RZactiveweek_add(yearweek,year)
{
	//----- Create yearweeks and yearweeks[yearweek] object
	if (typeof RZ.calendar.yearweeks == 'undefined')
		RZ.calendar.yearweeks = new Object();

	if (typeof RZ.calendar.yearweeks[yearweek] == 'undefined')
		RZ.calendar.yearweeks[yearweek] = new Object();

	//----- Determine next year index
	// (if necessary, create RZ.calendar.yearweeks[yearweek].years)
	var yrIdx = 0;
	if (typeof RZ.calendar.yearweeks[yearweek].years == 'undefined')
		RZ.calendar.yearweeks[yearweek].years = new Array();
	else
		yrIdx = RZ.calendar.yearweeks[yearweek].years.length;

	//----- Create new event object
	RZ.calendar.yearweeks[yearweek].years[yrIdx] = new Object();
	RZ.calendar.yearweeks[yearweek].years[yrIdx].year = year;

	return;
}

//**************************************/
/*BOOKMARK -----General Functions-----*/
//************************************/

/*-----------------------------------------------------------------------------
if debugState argument passed, just update tags; called by loadResources()
otherwise prompt to toggle debug; called by invisible link in heading

if debugMode, remove RZhidden from any div with class="debugMode"
if not debugMode, add RZhidden classs to any div with class="debugMode"
-----------------------------------------------------------------------------*/
function setDebug(debugState)
{
	// if debugState omitted, open or close the red debug window
	if (setDebug.arguments.length == 0)
	{
		// open or create debug layer / iframe
		var debugLayer = document.getElementById('debugLayer');
		if (debugLayer)
		{
			var debugOptions = document.getElementById('RZadminpanel');
			if (!debugOptions || debugLayer.style.display == 'none')
			{
				// Show debug layer (first body childNode)
				RZshowlayer(debugLayer,true);
				if (!debugOptions)
				{
					var url = '/revize/plugins/calendar/calendar3.settings.jsp';
					if (RZ.devmode)
					{
						url = 'plugins/calendar3.settings.jsp';
						if (RZ.isEditPage) url = '../' + url;
					}
					var debugLayer = document.getElementById("debugLayer");

					var width = -10;
					if (true && RZ.calendar.view != 'mini')
						width -= 10;		//if scrollbar
					var sizes = RZscreensizes(width,0,'browser');
					width = sizes.width + width;
					if (document.all) width += 20;	//exclude borders

					debugLayer.style.width = sizes.width + 'px';

					var iframe =  document.createElement("iframe");
					iframe.setAttribute('id','RZadminpanel');
					//iframe.setAttribute('id',"debugOptions");
					iframe.setAttribute('src',url);
					iframe.setAttribute('allowtransparent','yes');
					iframe.style.width = width + 'px';
					iframe.style.left = sizes.offsetWidth + 'px';
					debugLayer.appendChild(iframe);

				}
			}
			else
				RZshowlayer(debugLayer,false);
		}
		return;
	}

	// call setDebug() in all open windows (including current page)
	else if (debugState == 'update')
	{
		debugState = RZ.debug;
		var openWins = homeframe.RZ.calendar.openWins;
		for (var win in openWins)
		{
			if (!RZwinaccess(openWins[win])) continue;
			if (openWins[win] == window || !openWins[win].setDebug) continue;
			openWins[win].setDebug(debugState);
		}
	}
	else
			{
	RZ.debug = debugState;

		// update cookie if on home page
		if (window.name == RZ.calendar.winNames.home)
			RZsetcookie('calendar_debug',debugState);

	// update windowName div in this window
	var windowName = document.getElementById('windowName');
	if (windowName) windowName.innerHTML = window.name;

	// show or hide all tags with class=debugMode (including el)
	var tags = document.getElementsByTagName('div');
	for (var i=0;i<tags.length;i++)
	{
		if (tags[i].className.indexOf('debugMode') == -1) continue;

		if (RZ.debug && tags[i].className.indexOf('RZhidden') != -1)
			tags[i].className  = tags[i].className.replace(/\s*RZhidden\s*/,'');

		else if (!RZ.debug && tags[i].className.indexOf('RZhidden') == -1)
			tags[i].className  = tags[i].className += ' RZhidden';
	}

		/* ???
		// update url search, remove RZ.debug
		var fileinfo = RZgetfileinfo(location.href);
		if (fileinfo.extension == 'jsp')
		{
			var sep = fileinfo.query ? '&' : '?';
			var isDebug = (fileinfo.query.search(/(\?|\&)debug/) != -1);

			// do not add, since using cookie
			//if (debugState && !isDebug)
			//	location.search = fileinfo.query += sep + 'debug';			//add debug

			if (!debugState && isDebug)
			{
				var pattern = new RegExp('\\' + sep + debug);
				location.search = fileinfo.query.replace(pattern,'');		//remove debug
			}
		}
		*/
	}
	return void(0)
}
/*-----------------------------------------------------------------------------
Get lowest calendar namr recordid (called when RZ.calendar.default_id is blank)
-----------------------------------------------------------------------------*/
function getFirstCalendar()
{
	var default_id = '';
	{
		for (i in RZ.calendar.names)
		{
			if (!default_id)
				default_id = i;
			else
				default_id = Math.min(default_id,i);
		}
	}
	return default_id;
}
/*-----------------------------------------------------------------------------------
Return true if calendar permits rolldown
-----------------------------------------------------------------------------------*/
function isRollDown(id)
{
	var status = false;
	if (!id) id = RZ.calendar.id;
	if (RZgetoptionvalue(RZ.calendar.options,'rolldown') == 'true'
	&& RZ.calendar.credentials[id].show_in_all == 'yes')
		status = true;
	return status;
}
/*-----------------------------------------------------------------------------
Function to sort Array
-----------------------------------------------------------------------------*/
function RZsortArray(inArr)
{
	if ( null == inArr ) return null;

	var temp, i, j, k;

	for ( i = 0; i <= (inArr.length - 2); i++ )
	{
		for ( j = i+1; j <= (inArr.length - 1); j++ )
		{
			if ( inArr[i] > inArr[j] )
			{
				temp = inArr[i];
				inArr[i] = inArr[j];
				inArr[j] = temp;
			}
		}
	}
	return inArr;
}
/*-----------------------------------------------------------------------------
-----------------------------------------------------------------------------*/
function RZdayOfWeekName(day,isThumb)
{
	var name = RZdayArr[day];
	if (isThumb)
		name = name.substr(0,1);
	return name;
}
/*------------------------------------------------------------------------------
Function to check if user is administrator for the current GROUP
------------------------------------------------------------------------------*/
function RZisValidGroupAdministrator(groupId)
{
	// at least accept superuser & administrator if groupdId invalid
	if (isNaN(groupId)) return RZcheckCredentials();

	// always call RZcheckCredentials() because at least site admin returns true
	return RZcheckCredentials(groupadmins[groupid]);
}
/*------------------------------------------------------------------------------
Function to check if user is calendar administrator for the current calendar
------------------------------------------------------------------------------*/
function RZisValidCalendarAdministrator(calendarId)
{
	// at least accept superuser & administrator if calendarId invalid
	if (!isNaN(calendarId))
		return RZcheckCredentials();

	// always call RZcheckCredentials() because at least site admin returns true
	return RZcheckCredentials(getCredentials(calendarId).administrators);
}
/*------------------------------------------------------------------------------
Function to check if user is calendar editor for the current calendar
TODO: as of 09-28-2011, logout did not seem to clear these credentials
------------------------------------------------------------------------------*/
function RZisValidCalendarEditor(calendarId)
{
	// at least accept superuser & administrator if calendarId invalid
	if (isNaN(calendarId))
		return RZcheckCredentials();

	if (RZisValidCalendarAdministrator(calendarId))
		return true;

	return RZcheckCredentials(getCredentials(calendarId).editors);
}
/*------------------------------------------------------------------------------
Check if logged in user matchs the specifed permitted credentials
credentials contains a list of roles and users seperated by | (users start with _)
------------------------------------------------------------------------------*/
function RZcheckCredentials(credentials)
{
	var users = '';
	var roles = '';
	if (credentials && credentials != '')
	{
		var items = credentials.split('|')
		for (var i=0;i<items.length;i++)
		{
			if (items[i].length < 1)
				continue;
			else if (items[i].substring(0,1) == '_')
				users += ',' + items[i].substring(1);
			else
				roles += ',' + items[i];
		}
	}
	roles += ',superuser,administrator';

	// RZcheckoptions needs list separated by comma "," not pipe "|".
	var loginRoles = homeframe.RZ.roles.replace(/\|/g,',');

	// return if logged in user found in valid users or roles
	if (RZcheckoptions(users, homeframe.RZ.username)
	|| RZcheckoptions(roles, loginRoles) )
		return true;
	else
		return false;
}
/*-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------*/
function repeatDescAlt(repeatDesc)
{
	if (!repeatDesc)
		repeatDesc = RZ.calendar.constants.eventRepeatAlt;
	else
	{
		repeatDesc = repeatDesc.replace(/-/g,RZ.calendar.constants.nonBreakDash);
		repeatDesc = repeatDesc.replace(/\d+ times /,'');
	}
	repeatDesc = repeatDesc.replace(/<br>/g,'\n');		//skipped dates
	return repeatDesc;
}

//*********************************************/
/*BOOKMARK -----snipper_helper canidates-----*/
//*******************************************/

/*-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------*/
function padoutHr(number)
{
	return (number < 12) ? number : number - 12;
}
function padoutM(number)
{
	return (number < 10) ? '0' + number : number;
}
function ampm(number)
{
	return (number < 12) ? 'am' : 'pm';
}
function y2k(number)
{
	return (number < 1000) ? number + 1900 : number;
}
/*-----------------------------------------------------------------------------------------------
Backward compatible
Return number suffix; call RZnth() to get number & suffix then strips leading number
-----------------------------------------------------------------------------------------------*/
function nths(day)
{
	return RZnth(day).substr(day.toString());
}
/*-----------------------------------------------------------------------------
Returns RZ.debugOptions[debugOption] if in debug mode.
		true is default if debugOption udefined (unless default; see below)

----------
Parameters
----------
debugOption	string specifies debugOption

options		One of more of the following separated by commas
			force			assume debugMode rather than checking RZ.debug
			defaultValue=	use when RZ.debugOptions[debugOption] is undefined
							(default is true when debugOption undefined)
-----------------------------------------------------------------------------*/
function RZisDebugOption(debugOption,options)
{
	if (!options) options = '';
	var force = RZcheckoptions(options,'force');
	var isDebug = (force ? force : RZ.debug);
	if (!isDebug)
		return false;						//false if not debug mode

	var defaultValue = RZgetoption(options,'defaultValue',true);
	if (!debugOption)
		return defaultValue;			//no debugOption to lookup

	var win = typeof(homeframe) != 'undefined' ? homeframe : window;
	var debugOptionValue = win.RZ.debugOptions[debugOption];
	if (typeof debugOptionValue == 'undefined')
		debugOptionValue = defaultValue;

	return debugOptionValue;
}
/*---------------------------------------------------------------------------------------
Return clone of following:
	null, number, string (including empty string)Function, Array and simple objects
	simple object: does not contain any methods (assumed if element hasOwnProperty undefined);
	these include: window, document, form, HTMLElement, etc.

NOT CURRENTLY USED BY CALENDAR
TODO: Function closure objects clone as undefined.
---------------------------------------------------------------------------------------*/
function RZclone(obj)
{
	var attr,clone;
	if (typeof(obj) == "undefined")
		return obj;

	else if (obj == null)
		return null;

	else if (typeof(obj) == "function")
		return eval('clone='+obj)	//obj converted to string then to new function

	else if (typeof(obj) != "object")
		return obj;

	// clone Array object
	if (obj.constructor == Array
	|| (obj.length && obj.callee))	//Function arguments object treated as Array
	{
		clone = [];
		for (attr=0;attr<obj.length;attr++)
			RZcloneAdd();
		var len = clone.length;		//at least let's debugger show clone.length
	}
	// clone other object types
	else
	{
		clone = {};
		if (typeof obj.hasOwnProperty == 'undefined')
			return null;
		for (attr in obj)
		{
			if (typeof obj.hasOwnProperty)
				clone[attr] = RZclone(obj[attr]);
			else
				clone[attr] = obj;
		}
	}
	return clone;
	// internal RZclone() function:  add element to clone object
	function RZcloneAdd()
	{
		if (obj[attr] && typeof obj[attr] == "object")
		{
			clone[attr] = RZclone(obj[attr]);
		}
		else
			clone[attr] = obj[attr];
	}
}
/*-----------------------------------------------------------------------------
Set each variable in varsArray to the cooresponding element in valuesObject
if one exists otherwise set to empty string.

When called as follows, variables are created in the calling function scope:
	eval( RZinitArgs(varsArray,valuesObject) );

Original purpose was to easily create local variables for optional arguments
passed to function via object elements without having to define a value for
every variable.

Only strings and numbers currently supported.
-----------------------------------------------------------------------------*/
function RZinitArgs(varsArray,valuesObj)
{
	var evalStr = ''
	for (var i=0;i<varsArray.length;i++)
	{
		var key = varsArray[i];
		var value = valuesObj[key];
		switch (typeof value)
		{
			case 'string':
				value = '"' + valuesObj[key] + '"';
				break;
			case 'number':
				value = valuesObj[key];
				break;
			default:
				value = "''";
		}
		evalStr += key + '=' + value + ';';
	}
	return evalStr;
}
/*-----------------------------------------------------------------------------
As of 03-14-2012, do not have strategy ensure window gets focus; below is best
attempt however does not work well if other tabs are open and has focus
-----------------------------------------------------------------------------*/
function RZsetFocusAndClose(win)
{
	if (RZwinaccess(win))
		win.top.focus();
	setTimeout('window.close()',500);
}
/*-----------------------------------------------------------------------------
Give focus to specified field of first visible frorm field if el not specified

-----------
Parameters:
-----------
el			(optional) form field (default is first visible form fields)
isSelect	(optional) boolean; true to select() field otherwise just focus()
			if 1st parameter is boolean, it is the isSelect parameter
-----------------------------------------------------------------------------*/
function RZsetFieldFocus(el,isSelect)
{
	if (typeof el == 'boolean')
	{
		isSelect = el;
		el = null;
	}

	if (!el && document.forms.length > 0 && document.forms[0].length > 0)
	{
		var inputTags = document.forms[0].getElementsByTagName('input');
		for (var i=0;i<inputTags.length;i++)
		{
			el = inputTags[i];
			if (RZsetFieldFocusAllowed(el)) break;
		}
	}
	if (RZsetFieldFocusAllowed(el))
		setTimeout(function _RZsetFieldFocus()
		{
			el.focus();
			if (isSelect && el.select)
				el.select();
		}, 500);


	function RZsetFieldFocusAllowed(el)
	{
		if (!el || !el.name || !el.focus) return false;
		if (el.type && el.type == 'hidden') return false;
		if (el.style && el.style.visible != 'hidden' && el.style.display != 'none')
			return true;
		return false;
	}
}
/*---------------------------------------------------------------------------------------------
http://stackoverflow.com/questions/1527803/generating-random-numbers-in-javascript-in-a-specific-range
---------------------------------------------------------------------------------------------*/
function EZgetRandomInt(min, max)
{
    min = min || 0;
	max = max || Number.MAX_VALUE;
	return Math.floor(Math.random() * (max - min + 1)) + min;
}
/*-----------------------------------------------------------------------------------
//example of using the html encode object

// set the type of encoding to numerical entities e.g & instead of &
Encoder.EncodeType = "numerical";

// or to set it to encode to html entities e.g & instead of &
Encoder.EncodeType = "entity";

// HTML encode text from an input element
// This will prevent double encoding.
var encoded = Encoder.htmlEncode(document.getElementById('input'));

// To encode but to allow double encoding which means any existing entities such as
// &amp; will be converted to &amp;amp;
var dblEncoded = Encoder.htmlEncode(document.getElementById('input'),true);

// Decode the now encoded text
var decoded = Encoder.htmlDecode(encoded);

// Check whether the text still contains HTML/Numerical entities
var containsEncoded = Encoder.hasEncoded(decoded);
-----------------------------------------------------------------------------------*/
/**
 * A Javascript object to encode and/or decode html characters using HTML or Numeric
 * entities that handles double or partial encoding
 * Author: R Reid
 * source: http://www.strictly-software.com/htmlencode
 * Licences: GPL, The MIT License (MIT)
 * Copyright: (c) 2011 Robert Reid - Strictly-Software.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following
 * conditions:
 * The above copyright notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
 * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
 * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Revision:
 *  2011-07-14, Jacques-Yves Bleau:
 *       - fixed conversion error with capitalized accentuated characters
 *       + converted arr1 and arr2 to object property to remove redundancy
 *
 * Revision:
 *  2011-11-10, Ce-Yi Hio:
 *       - fixed conversion error with a number of capitalized entity characters
 *
 * Revision:
 *  2011-11-10, Rob Reid:
 *		 - changed array format
 */
/*BOOKMARK function Encoder*/
Encoder =
{
	// When encoding do we convert characters into html or numerical entities
	EncodeType : "entity",  // entity OR numerical

	isEmpty : function(val)
	{
		if(val)
			return ((val===null) || val.length==0 || /^\s+$/.test(val));
		else
			return true;
	},

	// arrays for conversion from HTML Entities to Numerical values
	arr1: ['&nbsp;','&iexcl;','&cent;','&pound;','&curren;','&yen;','&brvbar;','&sect;','&uml;','&copy;','&ordf;','&laquo;','&not;',
		   '&shy;','&reg;','&macr;','&deg;','&plusmn;','&sup2;','&sup3;','&acute;','&micro;','&para;','&middot;','&cedil;','&sup1;',
		   '&ordm;','&raquo;','&frac14;','&frac12;','&frac34;','&iquest;','&Agrave;','&Aacute;','&Acirc;','&Atilde;','&Auml;',
		   '&Aring;','&AElig;','&Ccedil;','&Egrave;','&Eacute;','&Ecirc;','&Euml;','&Igrave;','&Iacute;','&Icirc;','&Iuml;','&ETH;',
		   '&Ntilde;','&Ograve;','&Oacute;','&Ocirc;','&Otilde;','&Ouml;','&times;','&Oslash;','&Ugrave;','&Uacute;','&Ucirc;',
		   '&Uuml;','&Yacute;','&THORN;','&szlig;','&agrave;','&aacute;','&acirc;','&atilde;','&auml;','&aring;','&aelig;',
		   '&ccedil;','&egrave;','&eacute;','&ecirc;','&euml;','&igrave;','&iacute;','&icirc;','&iuml;','&eth;','&ntilde;',
		   '&ograve;','&oacute;','&ocirc;','&otilde;','&ouml;','&divide;','&oslash;','&ugrave;','&uacute;','&ucirc;','&uuml;',
		   '&yacute;','&thorn;','&yuml;','&quot;','&amp;','&lt;','&gt;','&OElig;','&oelig;','&Scaron;','&scaron;','&Yuml;','&circ;',
		   '&tilde;','&ensp;','&emsp;','&thinsp;','&zwnj;','&zwj;','&lrm;','&rlm;','&ndash;','&mdash;','&lsquo;','&rsquo;',
		   '&sbquo;','&ldquo;','&rdquo;','&bdquo;','&dagger;','&Dagger;','&permil;','&lsaquo;','&rsaquo;','&euro;','&fnof;',
		   '&Alpha;','&Beta;','&Gamma;','&Delta;','&Epsilon;','&Zeta;','&Eta;','&Theta;','&Iota;','&Kappa;','&Lambda;','&Mu;',
		   '&Nu;','&Xi;','&Omicron;','&Pi;','&Rho;','&Sigma;','&Tau;','&Upsilon;','&Phi;','&Chi;','&Psi;','&Omega;','&alpha;',
		   '&beta;','&gamma;','&delta;','&epsilon;','&zeta;','&eta;','&theta;','&iota;','&kappa;','&lambda;','&mu;','&nu;','&xi;',
		   '&omicron;','&pi;','&rho;','&sigmaf;','&sigma;','&tau;','&upsilon;','&phi;','&chi;','&psi;','&omega;','&thetasym;',
		   '&upsih;','&piv;','&bull;','&hellip;','&prime;','&Prime;','&oline;','&frasl;','&weierp;','&image;','&real;','&trade;',
		   '&alefsym;','&larr;','&uarr;','&rarr;','&darr;','&harr;','&crarr;','&lArr;','&uArr;','&rArr;','&dArr;','&hArr;',
		   '&forall;','&part;','&exist;','&empty;','&nabla;','&isin;','&notin;','&ni;','&prod;','&sum;','&minus;','&lowast;',
		   '&radic;','&prop;','&infin;','&ang;','&and;','&or;','&cap;','&cup;','&int;','&there4;','&sim;','&cong;','&asymp;',
		   '&ne;','&equiv;','&le;','&ge;','&sub;','&sup;','&nsub;','&sube;','&supe;','&oplus;','&otimes;','&perp;','&sdot;',
		   '&lceil;','&rceil;','&lfloor;','&rfloor;','&lang;','&rang;','&loz;','&spades;','&clubs;','&hearts;','&diams;'],
	arr2: ['&#160;','&#161;','&#162;','&#163;','&#164;','&#165;','&#166;','&#167;','&#168;','&#169;','&#170;','&#171;','&#172;',
		   '&#173;','&#174;','&#175;','&#176;','&#177;','&#178;','&#179;','&#180;','&#181;','&#182;','&#183;','&#184;','&#185;',
		   '&#186;','&#187;','&#188;','&#189;','&#190;','&#191;','&#192;','&#193;','&#194;','&#195;','&#196;','&#197;','&#198;',
		   '&#199;','&#200;','&#201;','&#202;','&#203;','&#204;','&#205;','&#206;','&#207;','&#208;','&#209;','&#210;','&#211;',
		   '&#212;','&#213;','&#214;','&#215;','&#216;','&#217;','&#218;','&#219;','&#220;','&#221;','&#222;','&#223;','&#224;',
		   '&#225;','&#226;','&#227;','&#228;','&#229;','&#230;','&#231;','&#232;','&#233;','&#234;','&#235;','&#236;','&#237;',
		   '&#238;','&#239;','&#240;','&#241;','&#242;','&#243;','&#244;','&#245;','&#246;','&#247;','&#248;','&#249;','&#250;',
		   '&#251;','&#252;','&#253;','&#254;','&#255;','&#34;','&#38;','&#60;','&#62;','&#338;','&#339;','&#352;','&#353;',
		   '&#376;','&#710;','&#732;','&#8194;','&#8195;','&#8201;','&#8204;','&#8205;','&#8206;','&#8207;','&#8211;','&#8212;',
		   '&#8216;','&#8217;','&#8218;','&#8220;','&#8221;','&#8222;','&#8224;','&#8225;','&#8240;','&#8249;','&#8250;','&#8364;',
		   '&#402;','&#913;','&#914;','&#915;','&#916;','&#917;','&#918;','&#919;','&#920;','&#921;','&#922;','&#923;','&#924;',
		   '&#925;','&#926;','&#927;','&#928;','&#929;','&#931;','&#932;','&#933;','&#934;','&#935;','&#936;','&#937;','&#945;',
		   '&#946;','&#947;','&#948;','&#949;','&#950;','&#951;','&#952;','&#953;','&#954;','&#955;','&#956;','&#957;','&#958;',
		   '&#959;','&#960;','&#961;','&#962;','&#963;','&#964;','&#965;','&#966;','&#967;','&#968;','&#969;','&#977;','&#978;',
		   '&#982;','&#8226;','&#8230;','&#8242;','&#8243;','&#8254;','&#8260;','&#8472;','&#8465;','&#8476;','&#8482;','&#8501;',
		   '&#8592;','&#8593;','&#8594;','&#8595;','&#8596;','&#8629;','&#8656;','&#8657;','&#8658;','&#8659;','&#8660;','&#8704;',
		   '&#8706;','&#8707;','&#8709;','&#8711;','&#8712;','&#8713;','&#8715;','&#8719;','&#8721;','&#8722;','&#8727;','&#8730;',
		   '&#8733;','&#8734;','&#8736;','&#8743;','&#8744;','&#8745;','&#8746;','&#8747;','&#8756;','&#8764;','&#8773;','&#8776;',
		   '&#8800;','&#8801;','&#8804;','&#8805;','&#8834;','&#8835;','&#8836;','&#8838;','&#8839;','&#8853;','&#8855;','&#8869;',
		   '&#8901;','&#8968;','&#8969;','&#8970;','&#8971;','&#9001;','&#9002;','&#9674;','&#9824;','&#9827;','&#9829;','&#9830;'],

	// Convert HTML entities into numerical entities
	HTML2Numerical : function(s)
	{
		return this.swapArrayVals(s,this.arr1,this.arr2);
	},

	// Convert Numerical entities into HTML entities
	NumericalToHTML : function(s)
	{
		return this.swapArrayVals(s,this.arr2,this.arr1);
	},

	// Numerically encodes all unicode characters
	numEncode : function(s)
	{
		if (this.isEmpty(s)) return "";

		var e = "";
		for (var i = 0; i < s.length; i++)
		{
			var c = s.charAt(i);
			if (c < " " || c > "~")
				c = "&#" + c.charCodeAt() + ";";
			e += c;
		}
		return e;
	},

	// HTML Decode numerical and HTML entities back to original values
	htmlDecode : function(s)
	{
		var c,m,d = s;
		if (this.isEmpty(d)) return "";

		// convert HTML entites back to numerical entites first
		d = this.HTML2Numerical(d);

		// look for numerical entities "
		arr = d.match(/&#[0-9]{1,5};/g);

		// if no matches found in string then skip
		if (arr != null)
		{
			// decode every single match within string
			for (var x=0;x<arr.length;x++)
			{
				m = arr[x];
				c = m.substring(2,m.length-1); //get numeric part which is refernce to unicode character
				// if its a valid number we can decode
				if (c >= -32768 && c <= 65535)
					d = d.replace(m, String.fromCharCode(c));
				else
					d = d.replace(m, ""); //invalid so replace with nada
			}
		}
		return d;
	},

	// encode an input string into either numerical or HTML entities
	htmlEncode : function(s,dbl)
	{
		if(this.isEmpty(s)) return "";

		// do we allow double encoding? E.g will & be turned into &amp;
		dbl = dbl || false; //default to prevent double encoding

		// if allowing double encoding we do ampersands first
		if(dbl)
		{
			if (this.EncodeType=="numerical")
				s = s.replace(/&/g, "&");
			else
				s = s.replace(/&/g, "&");
		}

		// convert the xss chars to numerical entities ' " < >
		s = this.XSSEncode(s,false);

		// Now call function that will convert any HTML entities to numerical codes
		if(this.EncodeType=="numerical" || !dbl)
			s = this.HTML2Numerical(s);

		// Now encode all chars above 127 e.g unicode
		s = this.numEncode(s);

		// now we know anything that needs to be encoded has been converted to numerical entities we
		// can encode any ampersands & that are not part of encoded entities
		// to handle the fact that I need to do a negative check and handle multiple ampersands &&&
		// I am going to use a placeholder

		// if we don't want double encoded entities we ignore the & in existing entities
		if(!dbl)
		{
			s = s.replace(/&#/g,"##AMPHASH##");

			if (this.EncodeType=="numerical")
				s = s.replace(/&/g, "&");
			else
				s = s.replace(/&/g, "&");

			s = s.replace(/##AMPHASH##/g,"&#");
		}

		// replace any malformed entities
		s = s.replace(/&#\d*([^\d;]|$)/g, "$1");

		// safety check to correct any double encoded &
		if(!dbl)
			s = this.correctEncoding(s);

		// now do we need to convert our numerical encoded string into entities
		if(this.EncodeType=="entity")
			s = this.NumericalToHTML(s);

		return s;
	},

	// Encodes the basic 4 characters used to malform HTML in XSS hacks
	XSSEncode : function(s,en)
	{
		if(this.isEmpty(s))
			return "";
		else
		{
			en = en || true;
			s = s.replace(/\'/g,"'"); //no HTML equivalent as &apos is not cross browser supported
			s = s.replace(/\"/g,'"');
			s = s.replace(/>/g,">");

			// do we convert to numerical or html entity?
			if(en)
				s = s.replace(/</g,"&lt;");
			else
				s = s.replace(/</g,"&#60;");
			return s;
		}
	},

	// returns true if a string contains html or numerical encoded entities
	hasEncoded : function(s)
	{
		if (/&#[0-9]{1,5};/g.test(s))
			return true;
		else if (/&[A-Z]{2,6};/gi.test(s))
			return true;
		else
			return false;
	},

	// will remove any unicode characters
	stripUnicode : function(s)
	{
		return s.replace(/[^\x20-\x7E]/g,"");
	},

	// corrects any double encoded & entities e.g &amp;
	correctEncoding : function(s)
	{
		return s.replace(/(&)(amp;)+/,"$1");
	},

	// Loop through array swaping each item with the value from another array e.g swap HTML entities with Numericals
	swapArrayVals : function(s,arr1,arr2)
	{
		if (this.isEmpty(s)) return "";

		var re;
		if (arr1 && arr2)
		{
			//ShowDebug("in swapArrayVals arr1.length = " + arr1.length + " arr2.length = " + arr2.length)
			// array lengths must match
			if (arr1.length == arr2.length)
			{
				for (var x=0,i=arr1.length;x<i;x++)
				{
					re = new RegExp(arr1[x], 'g');
					s = s.replace(re,arr2[x]); //swap arr1 item with matching item from arr2
				}
			}
		}
		return s;
	},

	inArray : function( item, arr )
	{
		for ( var i = 0, x = arr.length; i < x; i++ )
		{
			if ( arr[i] === item ) return i;
		}
		return -1;
	}
}
/*-----------------------------------------------------------------------------
-----------------------------------------------------------------------------*/
if (RZ.scriptLoaded) //indicate the script loaded
	RZ.scriptLoaded.calendar_app_view_common = true;


/*-----------------------------------------------------------------------------
-----------------------------------------------------------------------------*/
// list of function names and msg if errors building list
RZ.calendar.functionListCommon = ['RZbowser','RZpageSetup','RZpublishcalendars','RZadminwin','RZaddrules','RZcssfromstyle','RZcsstostyle','RZelementCurrentStyleValue','RZselectorValues','changeStyle','RZtemplateclose','RZcheckHash','RZpageLoaded','RZprocessHash','RZprintStackTrace','RZbadlink','RZautoClick','RZnodeProperties','RZshowIcons','RZgetFileInfo','RZgetfileinfo','RZbuildurl','RZbrowserversion','RZresize','RZscreensizes','RZisvisible','RZhavelayer','RZshowlayer','RZsetCookieValue','RZsetcookie','RZgetCookieValue','RZgetcookie','RZdate','RZparseDate','RZcheckdate','RZpermits','RZpagepermission','RZeventadd','RZeventremove','RZsetuphandler','RZaction','RZmsgAdd','RZactionReset','RZabsoluteUrl','RZisAbsoluteUrl','RZgetEditPageUrl','RZsaveReturnUrl','RZcalleditlist','RZeditlist','RZlistbegin','RZlinktemplate','RZlevelQualifier','RZcallEditForm','RZcalleditform','RZrecordEdit','RZrecordNew','RZedit','RZeditform','RZlinkWithoutParent','RZiconMessage','RZpermissionWarning','RZsetEditParameters','RZsetParameter','RZsetEditRecordParameter','RZsetLinkManagerProperties','RZlinkmanager','RZdefaultLinkParameter','RZdefaultLinkOption','RZsetLinkUrlParameter','RZaddUrlParameter','RZpriorPage','RZback','RZisPopupCall','RZrecordDelete','RZdelete','RZpermissions','RZgetTagsByClassName','RZdup','RZnth','RZs','RZtrim','RZreplace','RZreplaceAll','RZreplacesubstring','RZsubstring','RZright','RZinteger','RZcheckOptions','RZcheckoptions','RZcheckoptionvalue','RZgetKeyValue','RZgetoptionvalue','RZgetoption','RZistrue','RZcallNextUrl','RZeditor','RZsetLinkProperty','RZaddset','RZupdate','RZupdateFormProperty','RZgetInnerHTML','RZsetInnerHTML','RZtrace','RZcallEditor','RZpopupUrl','RZcancelPopupEvents','RZfocus','RZpopupAccess','RZwait','RZwaitError','RZwaitCheck','RZwinaccess','RZopenerFocus','RZpagemessage','RZwarning','RZwarn','RZnote','RZconfirm','RZalert','RZisadmin','RZlogin','RZrte','RZdebug','RZdebugger','RZstartDebugger','RZgetcaller','RZdisplayCaller','RZdisplayObject','RZdisplayObjectProcess','RZdisplayMessage','RZcolorpicker','RZspellcheck','RZfieldValueProperties','RZfieldValueAlert','RZsetFieldValue','RZsetfieldvalue','RZgetFieldValue','RZgetfieldvalue','RZclearList','RZselectOptionRemove','RZselectOptionAdd','RZadjust_width_height','RZformatphone','RZvalidatephone','RZvalidate_email','calendarSetup','setInnerHTML','isValidCalendarId','getCalendarId','getCalendarName','getCalendarFull','RZcalendarName','RZcalendarNameTitleCase','getGroupId','getGroupName','getCredentials','isHomeframeAccess','isHomeRefreshEventActive','setHomeRefreshEventActive','setDataStale','isGlobalDataCurrent','setGlobalDataCurrent','isGlobalDataLoading','setGlobalDataLoading','isEventDataCurrent','setEventDataCurrent','isEventDataLoading','setEventDataLoading','isEventLoadingDeferred','setDeferEventLoading','refreshGlobalData','migrateDatabase','closeWindow','closeWindowDispatcher','displayCalendar','setupView','setupComplete','setVersion','isCodebase','isDeployDate','drawCalendarGrid','updateData','buildCalendarGrid','buildMonthYearHtml','buildDaysHtml','buildPopupEventDetailHref','buildPopupEventSignupHref','RZpopupSignupDetail','popupDetailIframeLayer','formatEventClick','buildDate','getDaysInMonth','changeDate','changeMonth','setNextMonth','setPriorMonth','RZclearTimeout','RZcalendarParameters','RZrestoreName','replace','RZdayName','RZmonthName','RZdaySuffix','RZgetTimeInAmPmSpace','RZgetTimeInAmPm','RZsetTarget','RZgetTimeInMinutes','replaceSpace','removeStartHyphen','getHtmlOfDayEvents','sortOnTime','RZajaxload','RZxmlDoc','RZdisplayCaller','RZdisplayObject','RZdisplayObjectProcess','RZexception','warn','RZlog','RZfieldError','displayUserMessage','RZdisplayMessage','loadActiveList','loadActiveData','getEvents','getEventsCount','getEvent','addEvent','addEventDates','getEventProperties','getEventDays','addEventDays','RZevent_count','RZevent_get','RZevent_add','RZeventfromweek_get','RZeventtoweek_add','RZis_activemonth','RZactivemonth_add','RZgetActiveMonthListFileName','RZgetActiveMonthDataFileName','RZgetActiveWeekListFileName','RZgetActiveWeekDataFileName','RZis_activeweek','RZactiveweek_add','setDebug','getFirstCalendar','isRollDown','RZsortArray','RZdayOfWeekName','RZisValidGroupAdministrator','RZisValidCalendarAdministrator','RZisValidCalendarEditor','RZcheckCredentials','repeatDescAlt','padoutHr','padoutM','ampm','y2k','nths','RZisDebugOption','RZclone','RZinitArgs','RZsetFocusAndClose','RZsetFieldFocus','EZgetRandomInt'];
RZ.calendar.functionListMsg = ""

if (RZ.scriptLoaded) //indicate the script loaded
	RZ.scriptLoaded.calendar_app_javascript = true;
